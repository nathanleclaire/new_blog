<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Growth-Hacking on nathan leclaire </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:1313/categories/growth-hacking/index.xml</link>
    
    
    
    <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
    
    <item>
      <title>How I Automated &#34;Finding Almost Anyone&#39;s Email Address&#34;</title>
      <link>http://localhost:1313/_posts/2013-11-23-how-i-automated-finding-almost-anyones-email-address</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/_posts/2013-11-23-how-i-automated-finding-almost-anyones-email-address</guid>
      <description>

&lt;p&gt;{% img /images/autorap/demo-fast.gif A demo, complete with colors. %}&lt;/p&gt;

&lt;p&gt;&lt;em&gt;EDIT:  The original article author, Rob Ousbey, has popped up on various social media sites to remind everyone to use this tool/knowledge responsibly.  I agree.  Please be responsible.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Not too long ago I came across an article on &lt;a href=&#34;https://news.ycombinator.com&#34;&gt;Hacker News&lt;/a&gt; called &amp;ldquo;&lt;a href=&#34;http://www.startupmoon.com/how-i-got-meetings-at-twitter-linkedin-and-github-using-cold-emails/&#34;&gt;The cold emails that got me meetings at Twitter, LinkedIn and GitHub&lt;/a&gt;&amp;rdquo;.  It&amp;rsquo;s by a woman named Iris Shoor who is a co-founder of a startup called &lt;a href=&#34;http://www.takipi.com/&#34;&gt;Takipi&lt;/a&gt;.  In the article she describes how she used a certain technique originally presented &lt;a href=&#34;http://www.distilled.net/blog/miscellaneous/find-almost-anybodys-email-address/&#34;&gt;here&lt;/a&gt; to obtain access to the emails of decision makers at tech companies and cold email them to glean meetings which resulted in sales of her product.  Both of the articles are engaging reads and I highly recommend them, especially if you are interested in &amp;ldquo;growth hacking&amp;rdquo;, or &amp;ldquo;sales and marketing&amp;rdquo; if you insist on using boring non-buzzwords.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;How Does It Work?&lt;/h1&gt;

&lt;p&gt;In the original &amp;ldquo;How To Find Almost Anyone&amp;rsquo;s Email Address&amp;rdquo; article, Rob Ousbey presents a Google Doc spreadsheet that will generate a large number of possible emails for someone based on their name and the domain name of the company they work for.  &lt;a href=&#34;http://bit.ly/name2email&#34;&gt;Go ahead, try it out&lt;/a&gt;.  Many peoples&amp;rsquo; emails are something along the lines of &lt;em&gt;[firstname].[lastname]@[company].com&lt;/em&gt;, so there&amp;rsquo;s a high likelihood that their email will be in the list of generated possibilities.&lt;/p&gt;

&lt;p&gt;Then, users are encouraged to exhaustively test each possibility in their Gmail account using the &lt;a href=&#34;https://rapportive.com/&#34;&gt;Rapportive&lt;/a&gt; Chrome extension until they come across a &amp;lsquo;hit&amp;rsquo; (although a little bit of creative Googling will sometimes yield the desired result for you in less time).&lt;/p&gt;

&lt;p&gt;When trying this out for the first time on a recruiter I was interested in contacting, I found myself clicking the generated permutations in succession with a looming disbelief that this trick would actually work.  Then, suddenly, Rapportive lit up with their portrait and social media info and I felt a funny buzzing sensation in my head as the possibilities swirled around in it.&lt;/p&gt;

&lt;p&gt;{% img /images/autorap/larry.png I feel funny about this. %}&lt;/p&gt;

&lt;p&gt;However, doing it this way was exhausting and tedious, as it required a lot of focus and time.  My programmer instincts revved up and I became convinced that I could automate the process.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Automating It&lt;/h1&gt;

&lt;p&gt;I won&amp;rsquo;t be publishing my full source code because this has so much potential for abuse, but I will talk a little bit here about how I accomplished automating this.  I chose to reach for my old friend Python to write the script to automate this process.  I wanted to get things done quickly and easily and Python proved to be a great boon here, even providing the excellent &lt;code&gt;argparse&lt;/code&gt; module to make the script much more usable from the command line.&lt;/p&gt;

&lt;p&gt;{% img /images/autorap/copy-as-curl.jpeg Useful Developer Tools are useful. %}&lt;/p&gt;

&lt;p&gt;First, I got an example cURL request using Chrome&amp;rsquo;s handy developer tools.&lt;/p&gt;

&lt;p&gt;Then, I called the &amp;ldquo;secret&amp;rdquo; Rapportive API using &lt;code&gt;pycurl&lt;/code&gt;.  There&amp;rsquo;s a few fields that can be used to identify whether a response has come back for the suggested user, and we use that to determine whether the user, and consequently their email address, has been found.  We also check it against the returned full name to ensure that we haven&amp;rsquo;t gotten back a false positive (for example, Rapportive may return something for &amp;ldquo;larry@google.com&amp;rdquo;, but it may not be the Larry we are looking for).  Outputting all of the emails we try to the terminal, we color the bunk addresses red, the &amp;ldquo;false positive&amp;rdquo; emails yellow, and the successful return results green.  Like good Internet citizens, we wait for a specified interval in between calls to the Rapportive server (2 seconds in the demo at the top of this page).  Upon finding the email for the person we&amp;rsquo;re looking for, the program exits.&lt;/p&gt;

&lt;p&gt;The Rapportive API is surprisingly flexible on what you send it as far as HTTP headers goes, seeming to rely mostly on the &lt;code&gt;X-Session-Token&lt;/code&gt; header for user authentication.&lt;/p&gt;

&lt;p&gt;The main loop in Python looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;if __name__ == &#39;__main__&#39;:
    args = argument_handler.handle_args()   
    rap_client = RapportiveClient(args.name, verbose=args.verbose)
    permutator = Permutator(args.name, args.domain) 
    permutations = permutator.get_permutations()

    for permutation in permutations:
        output = permutation 
        rap_client.perform(permutation)
        if args.should_color:
            output = colorer.color(permutation, rap_client)
        if not args.quiet: 
            print output 
            if rap_client.was_user_found() and rap_client.name_match():
                sys.exit(0)
        else:
            if rap_client.was_user_found():
                print output
                sys.exit(0) 
        time.sleep(args.wait_interval)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Rapportive is a subsidiary of LinkedIn and LinkedIn has been catching a lot of heat lately for everything from their &lt;a href=&#34;http://engineering.linkedin.com/mobile/linkedin-intro-doing-impossible-ios&#34;&gt;iOS MITM hack&lt;/a&gt; to their &lt;a href=&#34;http://blog.linkedin.com/2012/06/06/linkedin-member-passwords-compromised/&#34;&gt;notorious password breach&lt;/a&gt;.  They&amp;rsquo;re a popular company to love to hate.  However, I think their tools have as much potential for cool stuff as they do for abuse.  Honestly, I&amp;rsquo;m surprised that the trick described in this article is not more well-known.  I haven&amp;rsquo;t cold emailed anyone whose address I have obtained this way, but if I needed to do so I&amp;rsquo;d be very pleased to have this tool at my disposal.&lt;/p&gt;

&lt;p&gt;Cheers and I&amp;rsquo;ll see you next week.&lt;/p&gt;

&lt;p&gt;Nathan&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Number One Dev Killer</title>
      <link>http://localhost:1313/_posts/2014-02-08-the-number-one-dev-killer</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/_posts/2014-02-08-the-number-one-dev-killer</guid>
      <description>

&lt;p&gt;{%img /images/dev-killer/rage.gif One of those days? %}&lt;/p&gt;

&lt;p&gt;I frequently find myself fascinated by modern technology.  I mean, we went from computers that are the size of buildings to computers of equivalent power that fit in your pocket in ~50 years (I&amp;rsquo;ll leave you to decide if it&amp;rsquo;s sad or not that we use them mostly to look at pictures of cats and argue on the Internet).  A pretty impressive feat if you ask me, especially considering that 50 years is just about nothing in geographic terms.&lt;/p&gt;

&lt;p&gt;What always fascinates me the most, however, is people and how they interact with (and create!!) new technology.  Especially being immersed in developer culture, I&amp;rsquo;ve start to see the same patterns over and over again and begun learning what makes some projects (especially when people are working in isolation) fail to get traction, and what makes some projects so wildly successful.  So today I&amp;rsquo;m going to write about a story to demonstrate a point about the thing which is, in my opinion, a huge killer of developer productivity.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;A Story About Mailing Lists&lt;/h1&gt;

&lt;p&gt;Do you recognize this guy?&lt;/p&gt;

&lt;p&gt;{%img /images/dev-killer/mailchimp.jpg %}&lt;/p&gt;

&lt;p&gt;Probably at least looks familiar, right?  It&amp;rsquo;s the &lt;a href=&#34;http://mailchimp.com&#34;&gt;MailChimp&lt;/a&gt; monkey.  How about this guy?&lt;/p&gt;

&lt;p&gt;{%img /images/dev-killer/hermes.jpg %}&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s &lt;a href=&#34;http://en.wikipedia.org/Hermes&#34;&gt;Hermes&lt;/a&gt;, the Greek god of communication.  But unless you&amp;rsquo;re a theology buff, Freddie the MailChimp mascot was probably a lot more meaningful to you in a modern context than Hermes.  So what?  Let me tell you a story to explain what I&amp;rsquo;ll be getting at.&lt;/p&gt;

&lt;p&gt;Now that I&amp;rsquo;ve started getting some traffic to my blog, and received a variety of emails from readers, I wanted to get a mailing list up.  You know, nothing fancy, just an email that I send out every once in a while to give people a chance to catch up with what I&amp;rsquo;ve been writing about this week.  So what do I do?&lt;/p&gt;

&lt;p&gt;I could use &lt;a href=&#34;http://mailchimp.com&#34;&gt;MailChimp&lt;/a&gt;, a rock-solid and proven standby that is good enough for people like &lt;a href=&#34;http://andrewchen.co&#34;&gt;Andrew Chen&lt;/a&gt; and &lt;a href=&#34;http://www.kalzumeus.com&#34;&gt;Patrick McKenzie&lt;/a&gt; and obviously should be good enough for me.  But what did I do?  Like a &amp;ldquo;good&amp;rdquo; hacker, I started writing my own (In addition to just wanting a cool project, for some reason I was embarassed about the possibility of people know that I use MailChimp.  I don&amp;rsquo;t know why, I guess I just have some kind of weird DIY fetish).  It was going to be called &lt;a href=&#34;http://github.com/nathanleclaire/hermes&#34;&gt;Hermes&lt;/a&gt;, written in Express/Node.js, and I was totally stoked.  Mostly because now I was going to attempt to re-invent MailChimp instead of doing more important, but less sexy, things with my time.&lt;/p&gt;

&lt;p&gt;I got about this far (I&amp;rsquo;m skipping over some boilerplate):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;function sendSingleMail(subject, to) {
    getSignupEmailTemplate({
        to: to
    }, function(html) {
        mailgun.sendRaw(&amp;quot;Nathan LeClaire &amp;lt;nathan.leclaire@gmail.com&amp;gt;&amp;quot;, [to.email],
            &#39;From: nathan.leclaire@gmail.com&#39; +
            &#39;\nTo: &#39; + to.email +
            &#39;\nContent-Type: text/html; charset=utf-8&#39; +
            &#39;\nSubject: &#39; + subject + &#39;\n\n&#39; +
            html,
            function(err) {
                if (err) console.log(&amp;quot;there was an email error&amp;quot;, err);
                else console.log(&amp;quot;successfully sent email to &amp;quot; + to.email);
            }
        );
    });
}

function getSignupEmailTemplate(context, callback) {
    var tmpl = jade.renderFile(&amp;quot;views/signup-email.jade&amp;quot;, context, function(err, html) {
        if (err) {
            console.log(&amp;quot;error rendering jade template&amp;quot;);
        } else {
            callback(html);
        }
    });
}

function main(conn) {
    var subscribers = r.db(&amp;quot;hermes&amp;quot;).table(&amp;quot;subscriber&amp;quot;);
    app.post(&amp;quot;/email_signup&amp;quot;, function(req, res) {
        var email = req.body.email;
        subscribers.insert({
            email: email,
            name: &amp;quot;&amp;quot;,
            subscriptionConfirmed: false
        }).run(conn, function(err, result) {
            if (err) {
                console.log(&amp;quot;[ERROR] failed to insert email from someone... &amp;quot;, err);
                res.json({
                    success: false
                });
            } else {
                sendSingleMail(&amp;quot;Hi! I hear you&#39;d like to subscribe to my blog.&amp;quot;, {
                    email: email
                });
                res.json({
                    success: true
                });
            }
        });
    });

    app.listen(3001);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before I started to say to myself: &amp;ldquo;Nate, are you being reasonable or are you just being cheap?  And why are you doing this instead of working on other, more low-hanging fruit to make your blog and side-projects more successful?  &lt;a href=&#34;http://github.com/nathanleclaire/checkforbrokenlinks&#34;&gt;Check For Broken Links&lt;/a&gt; &lt;em&gt;still&lt;/em&gt; hasn&amp;rsquo;t ever been deployed!&amp;rdquo;&lt;sup id=&#34;foot1return&#34;&gt;&lt;a href=&#34;#foot1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.  Though the Check For Broken Links comment was a low blow, I knew I was right.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Enlightenment&lt;/h1&gt;

&lt;p&gt;So I bit the bullet and used MailChimp instead.  You can see the results of my &amp;ldquo;labor&amp;rdquo; in the left sidebar of my blog, and I&amp;rsquo;m actually ecstatic I decided to go with them instead of writing my own mail management system.&lt;/p&gt;

&lt;p&gt;Why?  Because all of the time I saved by going the MailChimp route, instead of creating something original but inferior, allowed me to spend more time doing other, more valuable things.  For that matter, the influx of reader emails that I was anticipating and hoping for hasn&amp;rsquo;t really materialized, and at the time of writing I have all of two people on my mailing list :D (myself and my girlfriend- though I&amp;rsquo;m working on improving this).  I&amp;rsquo;m glad to have one less (giant) thing on my todo list, and I don&amp;rsquo;t feel like a failure since I didn&amp;rsquo;t waste a bunch of time on something that isn&amp;rsquo;t paying dividends right away (though I think it will in the future).  And I get all of the niceness, including analytics and a crazy awesome Web UI, for the small price of a MailChimp logo on my signup form.  Sign me up!&lt;/p&gt;

&lt;p&gt;Coming back to the Freddie the Chimp vs. Hermes comparison- Why use an untrusted brand / sketchy open source product when you can use a battle-hardened old friend?&lt;/p&gt;

&lt;p&gt;The point that I&amp;rsquo;m getting at, if you haven&amp;rsquo;t guessed it already, is that developers (as I did in this case) oftentimes get their potential productivity murdered, hard, by &lt;a href=&#34;http://en.wikipedia.org/wiki/Not_invented_here&#34;&gt;Not Invented Here Syndrome&lt;/a&gt;.  Who among us has met the stubbornly anti-framework programmers that always insist they could do a better job themselves, even with the absurd wealth of (oftentimes free) tools available for development nowadays?  How many client-side JavaScript MV* frameworks exist because their creators weren&amp;rsquo;t satisfied with simply improving existing solutions?  I know it&amp;rsquo;s an easy target, but allow me to list a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://angularjs.org&#34;&gt;Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://backbonejs.org&#34;&gt;Backbone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://meteor.com/&#34;&gt;Meteor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://facebook.github.io/react/&#34;&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://twitter.github.io/flight/&#34;&gt;Flight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fahad19.github.com/singool/&#34;&gt;Singool.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://knockoutjs.com/&#34;&gt;Knockout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sammyjs.org/&#34;&gt;Sammy.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://emberjs.com/&#34;&gt;Ember.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/petermichaux/maria&#34;&gt;Maria&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://terrifically.org/composer/&#34;&gt;Terrific Composer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rivetsjs.com/&#34;&gt;Rivets.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bruth.github.com/synapse/docs/&#34;&gt;Synapse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ractivejs.org/&#34;&gt;Ractive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;{%img /images/dev-killer/incredulous.gif %}&lt;/p&gt;

&lt;p&gt;Yeah.&lt;/p&gt;

&lt;p&gt;Though he is speaking to a slightly different context, I feel that Keith Perhac breaks the issue down nicely in this &lt;a href=&#34;http://www.kalzumeus.com/2012/05/18/kalzumeus-podcast-ep-2-with-amy-hoy-pricing-products-and-passion/&#34;&gt;Kalzumeus Software Podcast&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;And really, I think there’s also a… so, this is not just the Hacker News crowd, this is not just the Slashdot crowd, this is not just the techie crowd, there are a lot of people. I think the naysayers are the people who have more time than money, is honestly what it comes down to.&lt;/p&gt;

&lt;p&gt;Because, honestly, if I had a ton of time, if I was working a nine-to-five job, had a set number of hours a day I worked at a fixed income, at that, and I needed time-tracking software, I would probably write my own on the weekend because I have more time than I have money at that point.&lt;/p&gt;

&lt;p&gt;For someone who’s trying to run or start their own business, they suddenly have more money than they have time. Not that they’re making tons of money but because their time is much more valuable because there are so many other things they could be doing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This seems to be the gospel truth right here.  People can and should be focusing less on reinventing the wheel, and more on their core value proposition.&lt;/p&gt;

&lt;p&gt;Note that I&amp;rsquo;m mostly talking about things in the context of individual developers working by themselves, or in coordination with fairly small teams, not in large cutting-edge organizations such as the type discussed in &lt;a href=&#34;http://www.joelonsoftware.com/articles/fog0000000007.html&#34;&gt;this article by Joel Spolsky&lt;/a&gt;, where he makes an argument in favor of &amp;ldquo;Not Invented Here Syndrome&amp;rdquo;.  I agree with many of the points he makes here (no off-the-shelf web server will ever be as crazy fast as Google&amp;rsquo;s and that&amp;rsquo;s their business advantage), but I also feel like making an argument in favor of NIH is kind of dangerous.  Not that Joel has an obligation to look out for everyone&amp;rsquo;s best interests or anything, but I&amp;rsquo;d be shocked if he&amp;rsquo;d never come across a business situation where a company was investing waaaay too many resources into reinventing the wheel when they could have just bit the bullet.  This is, after all, the man who invented Wasabi, a specialized dialect of Visual Basic roasted hilariously in this post by his &lt;a href=&#34;http://www.codinghorror.com/blog/2006/09/has-joel-spolsky-jumped-the-shark.html&#34;&gt;future business partner Jeff Atwood&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;FogBugz is written in Wasabi, a very advanced, functional-programming dialect of Basic with closures and lambdas and Rails-like active records that can be compiled down to VBScript, JavaScript, PHP4 or PHP5. Wasabi is a private, in-house language written by one of our best developers that is optimized specifically for developing FogBugz; the Wasabi compiler itself is written in C#.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It may have worked for Fog Creek, but a lot of weird technical decisions have ended up working out for people (like &lt;a href=&#34;http://www.hhvm.com/blog/&#34;&gt;transpiling PHP to C++&lt;/a&gt;).  Would you want to maintain &lt;em&gt;that&lt;/em&gt; codebase?&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;The Flipside&lt;/h1&gt;

&lt;p&gt;The flipside of this, of course, is equally poisionous, and I am going to describe a type of person that you and I both know to illustrate this point.  I think if you are involved in the technology community pretty heavily you will perhaps find this person eerily familiar.&lt;/p&gt;

&lt;p&gt;This type of person is passionate about technology.  In fact, they are so passionate about it that they become convinced that it is a panacea for every problem they might possibly encounter.  They put more importance on theoretical wanking and &amp;ldquo;purity&amp;rdquo; than on execution and delivery, and they jump from framework to framework without ever putting in any actual mental elbow grease.  They are a perennial &amp;ldquo;Hello Worlder&amp;rdquo;, always chasing after the hot new thing.&lt;/p&gt;

&lt;p&gt;They probably mock the PHP or Rails programmers who are too busy getting stuff done to hear or care.  They may have a passion for exploration and learning, which is good, but they lack wisdom and insight.  Often this can be the same kind of person who may be interested in starting their own company, but lacks the practical depth to find something that has good product/market fit.  Instead they may try to solve problems that nobody has, or let the technology choice dictate the business direction instead of the other way around.&lt;/p&gt;

&lt;p&gt;I have been this person on and off.  It&amp;rsquo;s no more fun them than it is to be around them.  I think one should shy away from being this guy, as much as one should shy away from being a NIHSer.  In my opinion, you should keep an open mind about things and not let your ego get in the way of being a developer who&amp;rsquo;s genuinely enjoyable to be on a team with.  Spoiler alert:  you are not right 100% of the time.&lt;/p&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Go forth and hack, sisters and brothers.  Just put some thought into using the right tool for the right job, and getting things done FAST instead of learning the newest hotness (which may cause you more headaches than it prevents).  There&amp;rsquo;s nothing wrong with a box running MySQL as its only database, or using just jQuery on your front end if that&amp;rsquo;s all you need, or developing an iOS app instead of an HTML5 one written with PhoneGap and AngularJS.  Let the tool fit the situation, and get things done (especially if you&amp;rsquo;re starting a company).&lt;/p&gt;

&lt;p&gt;Until next week, stay sassy Internet!  Oh, and subscribe to my mailing list already.  You&amp;rsquo;re killing me over here.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nathan&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span id=&#34;foot1&#34;&gt;&lt;a href=&#34;#foot1return&#34;&gt;(1)&lt;/a&gt;&lt;/span&gt; : It&amp;rsquo;s kind of like my &amp;ldquo;&lt;a href=&#34;http://en.wikipedia.org/wiki/Chinese_Democracy&#34;&gt;Chinese Democracy&lt;/a&gt;&amp;rdquo;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>