<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Javascript on nathan leclaire </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:1313/categories/javascript/index.xml</link>
    
    
    
    <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
    
    <item>
      <title>Why the async Library for Node.js is So Freaking Awesome</title>
      <link>http://localhost:1313/_posts/2014-01-31-why-the-async-library-for-node-dot-js-is-so-freaking-awesome</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/_posts/2014-01-31-why-the-async-library-for-node-dot-js-is-so-freaking-awesome</guid>
      <description></description>
    </item>
    
    <item>
      <title>Why the async Library for Node.js is So Freaking Awesome</title>
      <link>http://localhost:1313/_posts/2014-01-31-why-the-async-library-for-node-dot-js-is-so-freaking-awesome</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/_posts/2014-01-31-why-the-async-library-for-node-dot-js-is-so-freaking-awesome</guid>
      <description></description>
    </item>
    
    <item>
      <title>Don&#39;t Fear Directives In AngularJS</title>
      <link>http://localhost:1313/_posts/2013-12-07-dont-fear-directives-in-angular-js</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/_posts/2013-12-07-dont-fear-directives-in-angular-js</guid>
      <description>

&lt;p&gt;{% img /images/directivefear/anghero.jpeg Superheroic. %}&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Direct what?&lt;/h1&gt;

&lt;p&gt;As I mentioned in &lt;a href=&#34;http://nathanleclaire.com/blog/2013/11/30/fear-and-loathing-with-golang-and-angular-dot-js/&#34;&gt;last week&amp;rsquo;s article&lt;/a&gt; I have been working with &lt;a href=&#34;http://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt; for personal projects lately.  This was largely the result of me, approximately six or seven months ago, feeling like I was missing out on the new hotness by not knowing a client-side MV* framework.  I looked around at a lot of options, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://backbonejs.org/&#34;&gt;Backbone.js&lt;/a&gt; (A crowd favorite, with rock-solid online support/documentation/tutorials)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://emberjs.com/&#34;&gt;Ember.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://knockoutjs.com/&#34;&gt;Knockout.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ultimately I fell into learning Angular for a variety of reasons.  Partially it was because I went to a &amp;ldquo;Coffee Shop Coders&amp;rdquo; presentation where the presenter (&lt;a href=&#34;http://www.tauruscolvin.com/&#34;&gt;Taurus Colvin&lt;/a&gt; - a very friendly dude) explained the basics and impressed me with the possibilities the framework offers.  Maybe it was because I tried to bootstrap a simple Ember project and couldn&amp;rsquo;t get anything working.  I don&amp;rsquo;t know if it was the documentation, the learning curve, my own shortcomings, or all three, but something about Ember didn&amp;rsquo;t click with me.  My choice of Angular was also at least somewhat because I was seduced by &lt;a href=&#34;http://yeoman.io/&#34;&gt;Yeoman&lt;/a&gt; (which, at the time of writing, uses an Angular generator in its usage example) around the time I attempted my first Angular app.  It was a foray which went down in flames, largely because I was so hesitant to make my own directives and services.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;$scope Creep&lt;/h1&gt;

&lt;p&gt;One day after I had started getting interested in Angular I mentioned to a coworker that I was developing an app with the framework.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Oh yeah,&amp;rdquo; he said, &amp;ldquo;I watched a presentation about making directives - seems to be where the real power of it is.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Since I knew that the funny attributes Angular introduces such as &lt;code&gt;ng-show&lt;/code&gt;, &lt;code&gt;ng-class&lt;/code&gt;, and &lt;code&gt;ng-repeat&lt;/code&gt; were directives, I had a feeling he was onto something.  However, I was a little bit too timid to actually tackle making my own.  After all, directives were something that smart people made, not me.  I&amp;rsquo;d have to understand that difficult link/compile stuff, right?  Remember, this was April of 2013 and, though it seems silly to say since at the time of writing only eight months have passed, the quality of documentation, tutorials, and examples for AngularJS was not as good as it is today.  I think &lt;a href=&#34;http://egghead.io&#34;&gt;egghead.io&lt;/a&gt; (an excellent Angular resource if you&amp;rsquo;re not aware) was just getting off the ground, but I certianly hadn&amp;rsquo;t heard of it.&lt;/p&gt;

&lt;p&gt;Less so through concious decision and more so through my own hesitance to learn something I was irrationally afraid of, I began slipping into the trap of creating a tangled mess that stuffed everything possible into &lt;code&gt;$scope&lt;/code&gt;, used &lt;code&gt;ng-include&lt;/code&gt; when I could have used directives, and relied on &lt;code&gt;$broadcast&lt;/code&gt;ing down from &lt;code&gt;$rootScope&lt;/code&gt; when I could have used services.&lt;/p&gt;

&lt;p&gt;I was a fool.&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;How Not To Fear The Directive&lt;/h1&gt;

&lt;p&gt;If I could go back and stop myself from making a whole bunch of mistakes in that app, I would have started with explaining that a directive is just a simple little reusable component for describing the way HTML should behave.  The Angular docs try to harp on this but inevitably they make it seem obtuse and complicated.  &lt;em&gt;Note:  Though they could be better I don&amp;rsquo;t think it&amp;rsquo;s cool to hate on the Angular docs.  They&amp;rsquo;ve gotten way better even in the short time I&amp;rsquo;ve been using the framework.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In my opinion it&amp;rsquo;s a very useful tool because it allows you to encapsulate functionality in a semantic way that will (hopefully) make sense to anyone looking at your markup, and keep your functionality well &amp;ldquo;chunked&amp;rdquo; so that you can keep track of what is happening where instead of dealing with things mutating globally (which most of us hopefully know by now is bad news).&lt;/p&gt;

&lt;p&gt;Ever had this happen with jQuery? You need to do some JavaScript magic with a particular element on the page, and so you give it some arbitrary &lt;code&gt;id&lt;/code&gt; so you can access it with &lt;code&gt;$(&#39;element#id&#39;)&lt;/code&gt;.  Now you get to write a bunch of JavaScript that listens for the relevant events, checks the element&amp;rsquo;s state to see that it is congruent with our expectations, modify its class to change how it is displayed, and so on.  It starts out as a few simple functions using a very powerful tool that soon grows into a complicated mess of callbacks, weird looking selectors, and re-render functions.  It may be strewn across several files with no rhyme or reason.&lt;/p&gt;

&lt;p&gt;Not only is it no fun, it makes it very hard for your designer friends to look at your markup and know what the expected behavior for that HTML is.  So, Angular provides us with directives, which are actually pretty simple to create.  So don&amp;rsquo;t be scared of them like I was.  You just have to create an Angular app:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;var myApp = angular.module(&#39;myApp&#39;, []);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then attach a simple directive:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;myApp.directive(&#39;myDirective&#39;, function() {
    return {
        restrict: &#39;E&#39;,
        template: &#39;&amp;lt;h1&amp;gt;I made a directive!&amp;lt;/h1&amp;gt;&#39;
    };
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s all, you just created a directive!  Now, when you go looking around for some examples of directives online, it&amp;rsquo;s easy to get lost in all of the Angular-specific jargon like linking functions, the &amp;ldquo;restrict&amp;rdquo; property, scope hierarchies and so on.  But I highly recommend that you try not to panic, and realize that there is meaning behind all of the weird symbols and abbreviations you see.  For instance, in the definition for the directive above, I define a &lt;code&gt;restrict: &#39;E&#39;&lt;/code&gt; setting.  What the heck does that mean?&lt;/p&gt;

&lt;p&gt;Well, what it means is, &amp;ldquo;restrict the usage of this directive to only Elements&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;So, you can use it in HTML like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;&amp;lt;body ng-app=&amp;quot;myApp&amp;quot;&amp;gt;
    &amp;lt;myDirective&amp;gt;&amp;lt;/myDirective&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But not like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;&amp;lt;body ng-app=&amp;quot;myApp&amp;quot;&amp;gt;
    &amp;lt;span my-directive&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Angular &amp;ldquo;normalizes&amp;rdquo; the &lt;code&gt;hyphen-usage-attribute&lt;/code&gt; to &lt;code&gt;camelCase&lt;/code&gt; as part of their normalization process for directives - see the &lt;a href=&#34;http://docs.angularjs.org/guide/directive&#34;&gt;documentation&lt;/a&gt;).&lt;/p&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;Why is it useful?&lt;/h1&gt;

&lt;p&gt;So, other than providing a convenient way to make little repeatable bits of HTML that have their own names, why is this useful?&lt;/p&gt;

&lt;p&gt;Well, by default every directive inherits the parent scope but it is also possible for a directive to have its own &lt;a href=&#34;http://www.thinkster.io/pick/KnxWvHUW64/angularjs-understanding-isolate-scope&#34;&gt;isolate scope&lt;/a&gt;.  What this means is, it can have its own little properties that it sets on its own unique &lt;code&gt;$scope&lt;/code&gt; that won&amp;rsquo;t mess around with any of the other properties that you are setting in the rest of your app.  Especially if you are going to use the component in multiple places, or have it in a &lt;code&gt;ng-repeat&lt;/code&gt;, this is incredibly useful.  It allows you to break things down into much more modular components than using some giant &lt;code&gt;BigBallOfMudController&lt;/code&gt; (or several &lt;code&gt;BigBallOfMudController&lt;/code&gt;s) to control the state of your app (which is usually the essence of what ends up happening in the &amp;ldquo;traditional jQuery&amp;rdquo; mess described above).  Instead, each directive is responsible for its own data and it works on it in isolation from the other directives.  In Angular this antipattern would look something like having a big array of objects in a central Controller, and updating individual properties of those objects in that controller instead of having a directive to modularize that kind of operation.&lt;/p&gt;

&lt;p&gt;Check out this example, where I created a &lt;code&gt;gear&lt;/code&gt; directive using &lt;a href=&#34;http://fontawesome.io/&#34;&gt;Font Awesome&lt;/a&gt;&amp;rsquo;s spinning gear icon.  The end result is a lot more flexible than an attempt at creating this using jQuery, or vanilla JavaScript.  Each gear keeps track of whether it is currently spinning or not in the new shared scope automagically created by the ngRepeat directive, so they spin or remain stationary indepent of each other.  However, they are all influenced equally by the &lt;code&gt;ng-model&lt;/code&gt; properties of the parent scope.&lt;/p&gt;

&lt;p&gt;Writing a &lt;code&gt;link&lt;/code&gt; function provides even more power and flexibility, but that&amp;rsquo;s a little outside the scope of this article.  Perhaps another time.&lt;/p&gt;

&lt;iframe src=&#34;http://embed.plnkr.co/i2StmWcxKNZCQb0YtYp0/preview&#34;&gt;&lt;/iframe&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Enjoy your directives, kids, and never ever be scared of them.  &lt;a href=&#34;http://misko.hevery.com/&#34;&gt;Miško&lt;/a&gt;&amp;rsquo;s been up late at night so you can experience HTML as it could have been.&lt;/p&gt;

&lt;p&gt;On a more serious/philosophical note, I wanted to close with a thought that I have that creating your own directives reminds me a bit of &lt;a href=&#34;http://en.wikipedia.org/wiki/Metcalfe&#39;s_law&#34;&gt;Metcalfe&amp;rsquo;s Law&lt;/a&gt; (by analogy of course).  Each directive that gets created increases the power and usefulness of all the other directives.  An Angular in which &lt;code&gt;ng-repeat&lt;/code&gt; exists, for instance, is so much more powerful than one in which it doesn&amp;rsquo;t.  So, remember that they can be stacked and it makes your webapp that much better.&lt;/p&gt;

&lt;p&gt;Until next time, stay sassy Internet.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;Nathan&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The (JavaScript) Question I Bombed In An Interview With a Y Combinator Startup</title>
      <link>http://localhost:1313/_posts/2013-11-16-the-javascript-question-i-bombed-in-an-interview-with-a-y-combinator-startup</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/_posts/2013-11-16-the-javascript-question-i-bombed-in-an-interview-with-a-y-combinator-startup</guid>
      <description>

&lt;p&gt;About a year and a half ago, I was on the hunt for my first &amp;ldquo;real&amp;rdquo; job.  I knew that I wanted to be a &amp;ldquo;web developer&amp;rdquo; (whatever &lt;em&gt;that&lt;/em&gt; entails) but I had no idea where to begin.  I knew just a smidge of PHP.  I was developing websites in Classic ASP at my current internship, but I knew that was an antiquidated technology which was unlikely to help me in the modern job market.  As I had recently begun stomping around &lt;a href=&#34;https://news.ycombinator.com&#34;&gt;Hacker News&lt;/a&gt;, I noticed that they had a &amp;ldquo;jobs&amp;rdquo; section in their header.  So I looked into things, saw that a few companies were hiring, and sent a few e-mails to companies that looked nice.&lt;/p&gt;

&lt;p&gt;{% img /images/y-comb/y-combinator-logo.gif To hack and start things up. %}&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;The Hunt&lt;/h1&gt;

&lt;p&gt;A few e-mailed me back and I managed to set up a phone screen with a company that does next-level web analytics.  Going into the interview I was filled with a mixture of apprehension and excitement.  After all, I knew that Silicon Valley was where the action was at, and I had no idea what kind of intricate or crazy questions they might ask me.  They had listed in their description a desire for strong JavaScript skills, which was appealing to me as I was rapidly learning to enjoy developing in this weird little language created by Brendan Eich.  &lt;em&gt;&amp;ldquo;I know jQuery pretty well,&amp;rdquo;&lt;/em&gt;, I thought- &lt;em&gt;&amp;ldquo;What could possibly go wrong?&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The developer who did my screen was pretty courteous and eased me into things a bit by talking about my background and experience.  I sheepishly admitted that I had studied philosophy in college, not computer science, and he put my concerns at ease by telling me that their founder had never finished college.  That made me feel better about things, since part of the reason I love technology so much is that it is so meritocratic.&lt;/p&gt;

&lt;p&gt;So, without further ado, we began to investigate a coding problem.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;The Problem&lt;/h1&gt;

&lt;p&gt;INTERVIEWER: You&amp;rsquo;re familiar with jQuery, right?&lt;/p&gt;

&lt;p&gt;ME:  Yes, I&amp;rsquo;ve used it at work.  I like JavaScript.&lt;/p&gt;

&lt;p&gt;INTERVIEWER: Great.  So, you&amp;rsquo;re familiar with something like this, right?  Let&amp;rsquo;s say you have a textbox and you want to make a call to the server to get some data every time the user does some typing, if you wanted to make autocomplete suggestions, for example&amp;hellip; &lt;em&gt;(begins typing into a shared/remote codepad)&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;$(document).ready(function() {
    $(&#39;input&#39;).keypress(function() {
        $.ajax({
            // Call the server for some goodness...
        });
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ME: Oh yes, I see.  When the user presses down a key on the element, we will make a call.&lt;/p&gt;

&lt;p&gt;INTERVIEWER: So, you may be able to guess, that there is a problem with this code.  It is very inefficient.  If you type a string with 30 characters into the text box, the server gets called 30 times.  Not good, we are having all kinds of issues with scalability so we can&amp;rsquo;t afford to be writing code like this.&lt;/p&gt;

&lt;p&gt;DEMO:&lt;/p&gt;

&lt;p&gt;&lt;input id=&#34;myBox1&#34; type=&#34;text&#34; placeholder=&#34;Type some stuff in me!&#34; style=&#34;width: 30%;&#34; /&gt; &lt;strong&gt;Called Server &lt;span id=&#34;called_times1&#34;&gt;0&lt;/span&gt; times&amp;hellip;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;
$(document).ready(function() {
    $(&#39;#myBox1&#39;).keypress(function() {
        if (!this.count)
            this.count = 0;
        this.count++;
        $(&#39;#called_times1&#39;).html(this.count);
    });
});
&lt;/p&gt;

&lt;p&gt;ME: I see.&lt;/p&gt;

&lt;p&gt;INTERVIEWER: So we only want to call the server after the user has been typing, then stops typing for 200 milliseconds.  That will give it the illusion of being instantaneous while saving a lot of load on our servers and a lot of ajax handling in the JavaScript.  How would we do that?&lt;/p&gt;

&lt;p&gt;ME:  Uh&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;What Really Happened&lt;/h1&gt;

&lt;p&gt;ME:  I think I would use&amp;hellip; Um&amp;hellip;&lt;/p&gt;

&lt;p&gt;INTERVIEWER:  Well, do you know what a closure is?&lt;/p&gt;

&lt;p&gt;ME:  Yeah!  Closures.  I&amp;rsquo;ve heard of those.&lt;/p&gt;

&lt;p&gt;INTERVIEWER: What about &lt;code&gt;window.setTimeout&lt;/code&gt; ?  Do you know about that?&lt;/p&gt;

&lt;p&gt;ME:  I think that&amp;rsquo;s JavaScript&amp;rsquo;s version of a &lt;code&gt;sleep&lt;/code&gt; function?&lt;/p&gt;

&lt;p&gt;INTERVIEWER:  Kind of&amp;hellip;&lt;/p&gt;

&lt;p&gt;ME:  I think I would&amp;hellip; &lt;em&gt;typing awkwardly and struggling for 30 seconds&lt;/em&gt;  I guess I&amp;rsquo;m not sure.&lt;/p&gt;

&lt;p&gt;INTERVIEWER:  I appreciate your time but perhaps this isn&amp;rsquo;t a good fit.&lt;/p&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;What Should Have Happened&lt;/h1&gt;

&lt;p&gt;ME:  Hm, that&amp;rsquo;s an interesting problem.  So, if we use &lt;code&gt;window.setTimeout&lt;/code&gt; we can delay the call for 200 milliseconds.&lt;/p&gt;

&lt;p&gt;INTERVIEWER:  Right.&lt;/p&gt;

&lt;p&gt;ME:  But that&amp;rsquo;s not going to help us in the case where the user is typing fast, or even just normal speed.  So we need a way to interrupt the timeout if the user keeps typing.&lt;/p&gt;

&lt;p&gt;INTERVIEWER:  Exactly.&lt;/p&gt;

&lt;p&gt;ME:  So, I know that when you call &lt;code&gt;window.setTimeout&lt;/code&gt;, you get back an ID that uniquely references the timeout.  And you can use it to cancel the timeout if need be!  So we should just store the timeout ID in the &lt;code&gt;keypress&lt;/code&gt; function closure, and if the user triggers a keypress event again before the timeout function triggers, we&amp;rsquo;ll just cancel it and set a new one!&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;EDIT:&lt;/em&gt; Some commenters have pointed out that due to the fact that &lt;code&gt;this&lt;/code&gt; in jQuery callbacks refers to the DOM node in question, not the function closure, the ID is actually being stored as a property of the DOM node.  They are correct.)&lt;/p&gt;

&lt;p&gt;INTERVIEWER:  Sounds great!  What would that look like in code?&lt;/p&gt;

&lt;p&gt;ME:  It&amp;rsquo;d look a little something like this&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;$(document).ready(function() {
    $(&#39;input&#39;).keypress(function() {
        if (this.timeoutId) 
            window.clearTimeout(this.timeoutId);
        this.timeoutId = window.setTimeout(function () {
            $.ajax({
                // do some stuff
            });
        }, 200);
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;INTERVIEWER:  Clever.&lt;/p&gt;

&lt;p&gt;ME:  I try.&lt;/p&gt;

&lt;p&gt;DEMO:&lt;/p&gt;

&lt;p&gt;&lt;input id=&#34;myBox2&#34; type=&#34;text&#34; placeholder=&#34;Type some stuff in me!&#34; style=&#34;width: 30%;&#34; /&gt; &lt;strong&gt;Called Server &lt;span id=&#34;called_times2&#34;&gt;0&lt;/span&gt; times&amp;hellip;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;
$(document).ready(function() {
    $(&#39;#myBox2&#39;).keypress(function() {
        if (!this.count)
            this.count = 0;
        if (this.timeoutId)
            window.clearTimeout(this.timeoutId);
        var that = this;
        this.timeoutId = window.setTimeout(function() {
            that.count++;
            $(&#39;#called_times2&#39;).html(that.count);
        }, 200);
    });
});
&lt;/p&gt;

&lt;p&gt;INTERVIEWER:  Now on to the next question&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I bombed this interview but I learned something from it.  I know I could go in more confident and capable today.  It just goes to show you that not every setback in life has to be a bad thing.  Someday in the future I would like to work with Y Combinator or a Y Combinator-based startup, largely because I think there&amp;rsquo;s so much opportunity for learning and growth.&lt;/p&gt;

&lt;p&gt;Thanks for reading and I&amp;rsquo;ll catch you next week,&lt;/p&gt;

&lt;p&gt;Nathan&lt;/p&gt;

&lt;p&gt;&lt;em&gt;EDIT&lt;/em&gt;: Some commenters have pointed out my misuse of &lt;code&gt;clearInterval&lt;/code&gt; as opposed to &lt;code&gt;clearTimeout&lt;/code&gt;.  It turns out that this (mostly) works to clear timeouts, but is clearly not correct (it&amp;rsquo;s meant to be used with &lt;code&gt;window.setInterval&lt;/code&gt;).  I have fixed this now.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5 AngularJS Antipatterns &amp; Pitfalls</title>
      <link>http://localhost:1313/_posts/2014-04-19-5-angularjs-antipatterns-and-pitfalls</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/_posts/2014-04-19-5-angularjs-antipatterns-and-pitfalls</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;The Angular Jungle&lt;/h1&gt;

&lt;p&gt;{%img /images/angular-antipatterns/jungle.jpg %}&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://angularjs.org&#34;&gt;AngularJS&lt;/a&gt; is a big JavaScript framework and it gives you just enough rope to hang yourself with.  I&amp;rsquo;ve written a lot about it in this blog and really hope that I have made a noteworthy impact on improving the general availability of resources.  I&amp;rsquo;ve been working on a project using AngularJS at my dayjob lately and noticed some antipatterns and pitfalls that people fall into when they are new to Angular (myself included, so they&amp;rsquo;re based on my own sweat and blood learning the framework) and I&amp;rsquo;ve consolidated some of them here for you to peruse.  Hopefully I&amp;rsquo;ll save you some pain.&lt;/p&gt;

&lt;p&gt;They are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Not having a dot in your &lt;code&gt;ng-model&lt;/code&gt; (or other places you need it!)&lt;/li&gt;
&lt;li&gt;Extreme overuse of event broadcasting and listening (&lt;code&gt;$emit&lt;/code&gt;, &lt;code&gt;$broadcast&lt;/code&gt;, &lt;code&gt;$on&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Too much stuff in controllers&lt;/li&gt;
&lt;li&gt;Misunderstanding or misusing isolate scope&lt;/li&gt;
&lt;li&gt;Using the outside world instead of doing things the Angular way&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;1. Not having a dot in your &lt;code&gt;ng-model&lt;/code&gt; (or other places you need it!)&lt;/h1&gt;

&lt;p&gt;{%img /images/angular-antipatterns/george.jpg %}&lt;/p&gt;

&lt;p&gt;Angular&amp;rsquo;s &lt;a href=&#34;https://docs.angularjs.org/guide/directive&#34;&gt;directives&lt;/a&gt; provide fantastic flexibility and an amazing way to write HTML that describes its interactive behavior in a clean and clear fashion.  They provide a way to create &lt;a href=&#34;https://egghead.io/lessons/angularjs-understanding-isolate-scope&#34;&gt;isolate scope&lt;/a&gt; to promote reusability and creating a directive that uses this looks something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;angular.module(&#39;myApp&#39;).directive(&#39;myDir&#39;, function () {
  return  {
    restrict: &#39;E&#39;,
    scope: {
      aProperty: &#39;=&#39;,
      bProperty: &#39;&amp;amp;&#39;
    },
    // and so on...
  };
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above definition &lt;code&gt;aProperty&lt;/code&gt; gets passed in through an attribute (normalized to &lt;code&gt;a-property&lt;/code&gt;) and creates a two-way data binding between the parent scope and the child scope.  That means if you change one, the other will be updated to match it and vice versa.  However, because of the way that JavaScript&amp;rsquo;s prototypal inheritance works, sometimes this may not work &amp;ldquo;magically&amp;rdquo; as you would expect.  I will dicuss a particular situation with &lt;code&gt;ng-model&lt;/code&gt; here but know that understanding how this all ties together will save you lots of tears due to &lt;code&gt;ng-switch&lt;/code&gt;, &lt;code&gt;ng-repeat&lt;/code&gt;, etc. creating their own scopes (and &amp;ldquo;shadow&amp;rdquo; properties in the prototype chain) that throw off the way you might be expecting things to work.&lt;/p&gt;

&lt;p&gt;In particular, when you have an &lt;code&gt;ng-model&lt;/code&gt; bound to a property on &lt;code&gt;$scope&lt;/code&gt; which was originally passed in using &lt;code&gt;=&lt;/code&gt; in your child directive:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Whenever you have ng-model there’s gotta be a dot in there somewhere. If you don’t have a dot, you’re doing it wrong.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Words from the mouth of Miško himself.&lt;/p&gt;

&lt;p&gt;This is because &lt;em&gt;primitives&lt;/em&gt; (String, Number, etc.) passed in to a child scope create their own &amp;ldquo;shadow&amp;rdquo; property in the child scope, which hides the original property on the parent scope due to the way that JavaScript prototypes work (the prototype chain will not need to be consulted to determine the value of &lt;code&gt;foo&lt;/code&gt; if &lt;code&gt;foo&lt;/code&gt; is not an &lt;code&gt;Object&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt;).  If they are bound using &lt;code&gt;=&lt;/code&gt; and they are objects, however, &lt;code&gt;foo.bar&lt;/code&gt; &lt;em&gt;will&lt;/em&gt; be bound correctly to the original property in the parent scope.&lt;/p&gt;

&lt;p&gt;Understanding this will save you soooo much pain.  Seriously, if you&amp;rsquo;re serious about Angular at all, take the time to read the offical article I link at the end of this section.  Then read it again.&lt;/p&gt;

&lt;p&gt;I suspect that a misunderstanding of this (communicating effectively from scope to scope up and down the prototype chain) is at least partially what contributes to people digging themselves further and further into a hole by misusing event broadcasting/emitting/listening and isoalte scope, as detailed later on in this article.  When things spiral out of control in this manner, it can really be pure torture.  You&amp;rsquo;re fighting against the framework, and nobody wins in that battle, least of all the people who have to maintain your code.&lt;/p&gt;

&lt;p&gt;The point is, most people new to Angular (and even people who have been doing it for a while) expect this to work :&lt;/p&gt;

&lt;p&gt;{% raw %}
```
&lt;p&gt; You have {{dollars}} dollars &lt;/p&gt;
&lt;crazy-awesome-widget ng-repeat=&#34;account in accounts&#34; info=&#34;dollars&#34;&gt;
&lt;/crazy-awesome-widget&gt;&lt;/p&gt;

&lt;p&gt;
angular.module(&amp;lsquo;dotDemo&amp;rsquo;).controller(&amp;lsquo;OuterCtrl&amp;rsquo;, function($scope) {
  $scope.dollars = 5;
  $scope.accounts = [&amp;ldquo;Tom&amp;rdquo;, &amp;ldquo;Bobby&amp;rdquo;, &amp;ldquo;Sally&amp;rdquo;];
});
angular.module(&amp;lsquo;dotDemo&amp;rsquo;).directive(&amp;lsquo;crazyAwesomeWidget&amp;rsquo;, function() {
  return {
    restrict: &amp;lsquo;E&amp;rsquo;,
    template: &amp;lsquo;&lt;input type=&#34;text&#34; ng-model=&#34;info&#34; /&gt;&amp;rsquo;,
    scope: {
      info: &amp;lsquo;=&amp;rsquo;
    }
  };
});

```
{% endraw %}&lt;/p&gt;

&lt;p&gt;Can you spot the bug?  If you&amp;rsquo;ve been paying attention, you should be able to pick it out easily.&lt;/p&gt;

&lt;iframe src=&#34;http://embed.plnkr.co/ii8xZoOIRcWw4LlNMayf/preview&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Come on, intone it with me.  &lt;em&gt;I need a dot. I need a dot. I need a dot.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the above code the input boxes won&amp;rsquo;t update the property in the parent scope.  The prototype chain creates a new property &lt;code&gt;info&lt;/code&gt; which is unique to the child scope instead of bound to the parent scope.  It won&amp;rsquo;t work this way.  You need an object.  The code should look like this instead:&lt;/p&gt;

&lt;p&gt;{% raw %}
```
&lt;p&gt; You have {{customerData.dollars}} dollars &lt;/p&gt;
&lt;crazy-awesome-widget ng-repeat=&#34;account in accounts&#34; info=&#34;customerData&#34;&gt;
&lt;/crazy-awesome-widget&gt;&lt;/p&gt;

&lt;p&gt;
angular.module(&amp;lsquo;dotDemo&amp;rsquo;).controller(&amp;lsquo;OuterCtrl&amp;rsquo;, function($scope) {
  $scope.customerData = {
    dollars: 5
  };
  $scope.accounts = [&amp;ldquo;Tom&amp;rdquo;, &amp;ldquo;Bobby&amp;rdquo;, &amp;ldquo;Sally&amp;rdquo;];
});
angular.module(&amp;lsquo;dotDemo&amp;rsquo;).directive(&amp;lsquo;crazyAwesomeWidget&amp;rsquo;, function() {
  return {
    restrict: &amp;lsquo;E&amp;rsquo;,
    template: &amp;lsquo;&lt;input type=&#34;text&#34; ng-model=&#34;info.dollars&#34; /&gt;&amp;rsquo;,
    scope: {
      info: &amp;lsquo;=&amp;rsquo;
    }
  };
});

```
{% endraw %}&lt;/p&gt;

&lt;iframe src=&#34;http://embed.plnkr.co/IVkqcNVhwQXd1zQ9nZQ2/preview&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Boom, synchronization from parent scope =&amp;gt; isolated child scopes and back again.&lt;/p&gt;

&lt;p&gt;Big shout out to Reddit user &lt;a href=&#34;http://www.reddit.com/user/Commentares&#34;&gt;Commentares&lt;/a&gt; who caught a flaw in the original implementation of my first example in the first draft of this article.&lt;/p&gt;

&lt;p&gt;See for reference:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jimhoskins.com/2012/12/14/nested-scopes-in-angularjs.html&#34;&gt;This excellent article by Jim Hoskins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular.js/wiki/Understanding-Scopes&#34;&gt;This aforementioned Angular documentation gettin&amp;rsquo; mad deep about scopes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;2. Extreme overuse of event broadcasting and listening (&lt;code&gt;$emit&lt;/code&gt;, &lt;code&gt;$broadcast&lt;/code&gt;, &lt;code&gt;$on&lt;/code&gt;)&lt;/h1&gt;

&lt;p&gt;Everybody loves to hate on GOTOs.  Poor little GOTOs.  All they ever wanted to do was help control program execution flow and branching, and they get the Rodney Dangerfield treatment.  They&amp;rsquo;re reviled with that sort of knee-jerk reaction that only programmers can revile something with.  You know the type.  They&amp;rsquo;re the ones who got burned by &lt;code&gt;git rebase&lt;/code&gt; one time (it was their own fault) and spend way too much effort and energy spreading FUD about rebases.  But I digress.  My point is, there&amp;rsquo;s this Angular antipattern I&amp;rsquo;ve seen and fallen into, where &lt;code&gt;$scope.$emit&lt;/code&gt; and &lt;code&gt;$scope.$broadcast&lt;/code&gt; have become the new GOTO.  Except that it&amp;rsquo;s shiny and new and Angular-ey, so everybody gives it a pass.  &lt;code&gt;$scope.$watch&lt;/code&gt; can kind of be abused in the same way, but the others are slightly easier to pick on.&lt;/p&gt;

&lt;p&gt;I really feel that you should keep manual event broadcasting and catching out of your code if possible.  It doesn&amp;rsquo;t usually do a whole lot of good and confuses the hell out of the people who have to maintain your code (including you!).  The problem is thus:  Let&amp;rsquo;s say you have something going wacky in a &lt;code&gt;$scope.$on&lt;/code&gt;.  You set a breakpoint in the defined callback function that runs when that &lt;code&gt;$scope.$on&lt;/code&gt; catches its defined event.  OK, now what?  You have no idea where that event came from or what its intended purpose is, and if it&amp;rsquo;s wreaking all sorts of unintended havoc you&amp;rsquo;re in big trouble.  Usually this can be avoided by careful use of services and proper scope inheritance.&lt;/p&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;3. Too much stuff in controllers&lt;/h1&gt;

&lt;p&gt;It&amp;rsquo;s unfortunate that I have to point this one out, but as I&amp;rsquo;ve personally fallen into this pitfall especially when first getting started with Angular, I suppose I can give people a free pass on making this mistake once or twice.  After that, however, they should definitely learn.&lt;/p&gt;

&lt;p&gt;Your controllers should be lean.  Say it with me.&lt;/p&gt;

&lt;p&gt;My controllers should be lean.&lt;/p&gt;

&lt;p&gt;My controllers should be lean.&lt;/p&gt;

&lt;p&gt;My controllers &lt;em&gt;are&lt;/em&gt; lean.&lt;/p&gt;

&lt;p&gt;This means that absolutely everything which can be stripped out of them, should be.  They exist to coordinate the delicate dance between your other resources (services and directives).&lt;/p&gt;

&lt;p&gt;For instance, I came across a line introduced in one of our controllers that looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;body&#39;).attr(&#39;data-state&#39;, &#39;someNewState&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was my reaction upon finding this code in this controller:&lt;/p&gt;

&lt;p&gt;{%img /images/angular-antipatterns/hulk.gif %}&lt;/p&gt;

&lt;p&gt;Note:  My actual reaction was way more passive aggressive (wrote about it in my &lt;em&gt;blog&lt;/em&gt;!  Showed that guy).&lt;/p&gt;

&lt;p&gt;In Angular, DOM manipulation is done inside directives.  NOT controllers.  DOM manipulation is done inside directives.  Every aspiring Angular programmer should have this branded into his or her brain.&lt;/p&gt;

&lt;p&gt;Other common things that slip into controllers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ajax (sometimes disguised in a half-baked abstraction) - this should be done in services&lt;/li&gt;
&lt;li&gt;Tangled mess of event handling as discussed in last section&lt;/li&gt;
&lt;li&gt;Things that are basically service or factory logic, but eh I&amp;rsquo;m too lazy to move this code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don&amp;rsquo;t do it.  If you keep your controllers lean and small they will reward you with readability and ease of debugging.  If you let them spiral out of control you will be punished unceremoniously.&lt;/p&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;4. Misunderstanding or misusing isolate scope&lt;/h1&gt;

&lt;p&gt;Isolate scope is really nice.  It prevents directives from just accessing / modifying the parent scope willy-nilly, opening the door to all kinds of bugs associated with global-ish scope, and promotes reusability.  But it&amp;rsquo;s important to realize that this is the point of isolate scope.  Consequently, if you&amp;rsquo;re passing a bunch of properties into your directive&amp;rsquo;s &lt;code&gt;$scope&lt;/code&gt;, and then cascading them downwards through a variety of child scopes, you are probably doing something wrong.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve seen this a bit.  If you are passing a bunch of information down to your directive&amp;rsquo;s scope, either it should be inheriting by default (in which case you don&amp;rsquo;t want isolate scope), or you should bundle the properties that you can together in an object or two to keep the &lt;code&gt;scope&lt;/code&gt; definition nice and clean and promote readability of the HTML.&lt;/p&gt;

&lt;h1 id=&#34;toc_5&#34;&gt;5. Using the outside world instead of doing things the Angular way&lt;/h1&gt;

&lt;p&gt;{%img /images/angular-antipatterns/but-computers.png Aren&amp;rsquo;t we all nowadays? %}&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s really tempting, especially when first learning Angular, and directives in particular, to just write jQuery code like we always have that happens to be wrapped in an Angular directive.  While this is still probably better than rolling with no framework at all and creating a tangled mess, it indicates a basic ungrok of the Angular way.&lt;/p&gt;

&lt;p&gt;Things should be done in Angular, when they can.  Angular provides so much niceness in the form of built-in directives, services (&lt;code&gt;$window&lt;/code&gt;, &lt;code&gt;$timeout&lt;/code&gt;, &lt;code&gt;$http&lt;/code&gt; et al. wrap these things for you so you don&amp;rsquo;t have to worry about accidentally interfering with Angular&amp;rsquo;s internals!) that we should only reach for custom solutions when we have to (and believe me, you will - just think carefully before doing so).  Just wrapping jQuery code in a directive doesn&amp;rsquo;t do us any good, and creates complications when we need to start doing stuff like chucking &lt;code&gt;$scope.$apply&lt;/code&gt; into things.  So think things through, and do them the Angular way.&lt;/p&gt;

&lt;p&gt;Likewise dependencies that you had before (modules you are relying on etc.) should be refactored into e.g. factories for increased ease of use and testability.  If you have the time to use Angular into your project, you have the time to do this too.  Angular will reward you with layers of increased richness.&lt;/p&gt;

&lt;h1 id=&#34;toc_6&#34;&gt;Fin&lt;/h1&gt;

&lt;p&gt;I really hope that this article helps people avoid these bad behaviors, or at least see them when they come across them and refactor them into something better.&lt;/p&gt;

&lt;p&gt;Until next time, stay sassy Internet.  And &lt;a href=&#34;http://nathanleclaire.com&#34;&gt;consider subscribing to my mailing list&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nate&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Learn Node.js The Troll Way</title>
      <link>http://localhost:1313/_posts/2013-02-06-learn-node-dot-js-the-troll-way</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/_posts/2013-02-06-learn-node-dot-js-the-troll-way</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Server Side JavaScript&lt;/h2&gt;

&lt;p&gt;As many of you are probably aware, &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; is all the rage with the kids these days.  It&amp;rsquo;s so popular that users even have the nerve to &lt;a href=&#34;http://code.google.com/p/v8/issues/detail?id=847#c15&#34;&gt;gall Google developers&lt;/a&gt;, insisting that the V8 JavaScript engine is important for things outside of mere Chrome.  Node has rapidly been evolving and maturing into the new hotness of the web development community.  Its core is driven by the idea of asynchronous input and output,
a way to manage the latency inherent in developing applications for the web.  With Node, you gain the ability to write JavaScript which runs on the server-side of an application- and the somewhat eyebrow-raising ability to create a server within JavaScript itself.&lt;/p&gt;

&lt;p&gt;Throw in a sweet package manager for every sort of JS voodoo you can imagine (&lt;a href=&#34;https://npmjs.org/&#34;&gt;npm&lt;/a&gt;), and you&amp;rsquo;ve suddenly opened up the door to a whole new world of handy tools and tricks, accessible to many developers due to the ubiquitous nature of JavaScript on the modern web.  The V8 JavaScript engine on which it is based is has performed pretty well for a web-based language in &lt;a href=&#34;http://shootout.alioth.debian.org/u32/which-programming-languages-are-fastest.php&#34;&gt;benchmarks&lt;/a&gt;.  We all know that benchmarks are even worse dirty lies than statistics, so what I personally think is really cool about Node is that it mandates one to approach concurrency with a direct focus from the start of application development.  Surely there&amp;rsquo;s a lot to be said for not having to rip off and reinvent the wheel of horizontal scalability.  But I digress.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Screen Scraping With Node.js&lt;/h2&gt;

&lt;p&gt;{% img /images/skyrim-guard.jpeg Go cast your fancy JavaScript somewhere else! %}&lt;/p&gt;

&lt;p&gt;The purpose of this article is to give a quick flyby example, in which I will be demonstrating Node.js by constructing a screen-scraping bot to troll my brother on Reddit.  I had an idea to build an application which uses the Reddit API, to spam my brother&amp;rsquo;s account with Skyrim quotes/dialogue in comments for entertainment purposes.  If he ever were to reply, bewildered, my bot would ping back: &lt;em&gt;&amp;ldquo;Problem, theonewhoquestions?&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Naturally, in order to do this, I needed to gather the Skyrim intel (quotes) first.  Originally I set out to write the crawler in Python as I have some experience with the venerable &lt;a href=&#34;http://www.crummy.com/software/BeautifulSoup/&#34;&gt;BeautifulSoup&lt;/a&gt; Module.  But I was already using Node a bit as a result of Twitter&amp;rsquo;s Bootstrap framework, and I was curious to challenge myself to actually build something with it for fun and comprehensive learning.  So, I decided to investigate.&lt;/p&gt;

&lt;p&gt;Turns out there are a few modules that come in handy for a task like this in Node.
&lt;code&gt;javascript
    var jsdom = require(&#39;jsdom&#39;);
&lt;/code&gt;
This is the idiomatic way to import modules in Node.  The jsdom module for Node enables us to simulate a DOM environment which many of us familiar with (working with client side code) for use in our Node script.  And naturally, it&amp;rsquo;s as easy as one, two, callback!&lt;/p&gt;

&lt;p&gt;Since I am familiar with using jQuery to parse the DOM, I opted to use it to extract the quotes from &lt;a href=&#34;http://www.uesp.net/wiki/Skyrim:Guard&#34;&gt;this website&lt;/a&gt;, where they are contained within table cells ripe for the picking.  To do this with the jsdom module, you call the &lt;code&gt;jsdom.env&lt;/code&gt; method.  As arguments we pass in the address of the HTML we wish to parse.
``` javascript
    jsdom.env(&amp;lsquo;&lt;a href=&#34;http://www.uesp.net/wiki/Skyrim:Guard&#39;&#34;&gt;http://www.uesp.net/wiki/Skyrim:Guard&#39;&lt;/a&gt;,
      [ &amp;lsquo;&lt;a href=&#34;http://code.jquery.com/jquery.min.js&#39;&#34;&gt;http://code.jquery.com/jquery.min.js&#39;&lt;/a&gt; ],
      function(errors, window) {
        var $ = window.$;
        $ = stripTags($);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var $skyrim_quotes = $(&#39;tr td&#39;).filter( function(element, index, array) {
        if ( $(index).html().match(/^&amp;quot;.*&amp;quot;$/) ) {
          return true;
        } else {
          return false;
        }
    });

    $skyrim_quotes.each( function() {
      var $scopedElem = $(this);
      var content = $scopedElem.html().stripHTMLSpecialChars().stripDoubleQuotes();

      console.log( content );

    }); 
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;There&#39;s a lot going on here that merits explanation, so I will take a second to break down in more detail what is going on in this chunk of code.  We have an instance of the `jsdom` object so we can call the `env` method to bootstrap up a DOM to parse.  The first argument to this method (`&#39;http://www.uesp.net/wiki/Skyrim:Guard&#39;`) is the URL to query for the HTML to instantiate this DOM with.  You can also just pass in plain old HTML as a string if you happen to have some of that laying around in dire need of parsing.

The second argument to the `env` method is a list of scripts to be included in the virtual window (DOM).
``` javascript
    [ &#39;http://code.jquery.com/jquery.min.js&#39; ],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this instance and many of the examples given on the &lt;code&gt;jsdom&lt;/code&gt; &lt;a href=&#34;https://github.com/tmpvar/jsdom&#34;&gt;Github page&lt;/a&gt;, we include the jQuery library.  If one wanted to use Mootools or Underscore.js, I imagine that is also totally doable, although I have no anecdotal evidence to support this hypothesis.  For my purposes, jQuery was a comfortable and effective fit.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;third&lt;/em&gt; argument to the &lt;code&gt;jsdom.env&lt;/code&gt; method, and arguably the most critical, is a callback function to be executed once the response has been received from the server (or immediately, in the case of passing in your own HTML).&lt;br /&gt;
&lt;code&gt;javascript
      function(errors, window) {
        // ...
      }
&lt;/code&gt;
It takes two arguments:  The first is called &lt;code&gt;errors&lt;/code&gt; and is an list of errors which you can inspect if something in the &lt;code&gt;env&lt;/code&gt; method goes wonky (in the code I&amp;rsquo;ve presented here &lt;code&gt;errors&lt;/code&gt; is ignored, although you still need to have it in the definition of your callback function).  The second is called &lt;code&gt;window&lt;/code&gt; and it is the coup de grâce of what we are seeking: a bootstrapped, &amp;ldquo;invisible&amp;rdquo; DOM that our script can parse.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s worth pausing for a second here to think about why the &amp;ldquo;Node way&amp;rdquo; results in what may seem to some people to result in an expansive sea of callback spaghetti (if JavaScript didn&amp;rsquo;t already appear to you to be an expansive sea of said callback spaghetti).  Any time that Node encounters a situation which otherwise might block the execution of code (such as an HTTP GET request to an external service), it simply defines a callback function to be executed when that &lt;em&gt;event&lt;/em&gt; occurs (i.e. when your GET request is finished).&lt;/p&gt;

&lt;p&gt;But onward to the trolling we must progress!  The very first thing I do in this brave new callback where we will be doing our DOM parsing is define a few variables.
&lt;code&gt;javascript
    var $ = window.$;
    $ = stripTags($);
&lt;/code&gt;
&lt;code&gt;jsdom&lt;/code&gt; allows access to the jQuery object through the &lt;code&gt;window&lt;/code&gt; object, and as I would be accessing it often enough to justify a shorthand method of access, that is what &lt;code&gt;var $ = window.$;&lt;/code&gt; is all about.  So what&amp;rsquo;s with that &lt;code&gt;stripTags&lt;/code&gt; call?  Well, the values that I was after were plain text without any HTML inside, as said HTML in a Reddit comment might shatter the illusion that it could be a person typing said Skyrim quotes instead of a robot.  So, for example, some of the entries in the table cells have words &lt;em&gt;in italics&lt;/em&gt; and I needed to get rid of these tags.  Ergo, my &lt;code&gt;stripTags&lt;/code&gt; function.
``` javascript
    /* consumes jQuery object
       returns jQuery object */&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function stripTags($) {

  // Cleaning out anchor tags, italics, and one span which is a warning not
  // to edit for nice, readable quotes

  $(&#39;tr td a&#39;).contents().unwrap();
  $(&#39;tr td i&#39;).contents().unwrap();
  $(&#39;span&#39;).contents().unwrap();
  $(&#39;small&#39;).contents().unwrap();

  return $;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Using `unwrap()` on client-side code willy-nilly like this would more likely than not b0rk some critical piece of functionality in your app, but I only care about the data that I am scraping so it&#39;s not really relevant here.  It gets the job done, which is to turn quotes which in their raw form look like

&amp;lt;blockquote&amp;gt;&amp;quot;You here to see the &amp;amp;lt;a href=&amp;quot;/wiki/Skyrim:Igmund&amp;quot; title=&amp;quot;Skyrim:Igmund&amp;quot;&amp;amp;gt;Jarl&amp;amp;lt;/a&amp;amp;gt;? No sudden moves, understand?&amp;quot;&amp;lt;/blockquote&amp;gt;

into a nice clean version that looks like this:

&amp;lt;blockquote&amp;gt;&amp;quot;You here to see the Jarl? No sudden moves, understand?&amp;quot;&amp;lt;/blockquote&amp;gt;

Thanks to that `$(&#39;tr td a&#39;).contents().unwrap();` statement.  It&#39;s a little bit of extra work, but trolling is serious business, and well worth the investment.  And as I said before, applying these operations globally to the DOM on a large-scale project would be overkill, but for my purposes here it was grand.

The next step was the find the quotes themselves.  A simple little `$(&#39;tr td&#39;)` yielded very good results, mostly what I was looking for, but there happened to be a bit of extra flotsam and jetsam table cells which contained content I was not after at all.  So I needed some way to differentiate the Skyrim quotes from anything else that happened to be in a table cell which was not relevant to the task at hand.  Hm, surely I can come up with a regular expression to help with that?
``` javascript
    var $skyrim_quotes = $(&#39;tr td&#39;).filter( function(element, index, array) {
        if ( $(index).html().match(/^&amp;quot;.*&amp;quot;$/) ) {
          return true;
        } else {
          return false;
        }
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have the lovely jQuery method &lt;code&gt;filter&lt;/code&gt; being used to apply the simple regexp pattern &lt;code&gt;/^&amp;quot;.*&amp;quot;$/&lt;/code&gt; to our selection and returning only the elements that match.  This knocks out everything which does not adhere strictly to the &amp;ldquo;quote&amp;rdquo; pattern (string&amp;rsquo;s first and last character are a double quote - &lt;code&gt;&amp;quot;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Almost there now- still I needed to strip some HTML special characters such as &lt;code&gt;&amp;amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;amp;gt;&lt;/code&gt; to get them especially clean.  And, of course, to strip the double quotes for aesthetic purposes.  I decided to bring a gun to a knife fight and add methods to &lt;code&gt;String&lt;/code&gt;&amp;rsquo;s prototype.
``` javascript
    String.prototype.stripHTMLSpecialChars = function () {
      // There&amp;rsquo;s a few quirks in the soup
      var str = this.replace(/&amp;lt;/, &amp;ldquo;);
      str = str.replace(/&amp;gt;/, &amp;ldquo;);
      str = str.replace(/&amp;nbsp;[sic]/, &amp;lsquo;y&amp;rsquo;);
      return str;
    };&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;String.prototype.stripDoubleQuotes = function() {
  return this.slice(1, this.length - 1);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The solution for `stripDoubleQuotes()` feels a little bit kludgey, so I&#39;d be curious to hear if anyone else has a better idea (I&#39;m sure JavaScript is capable of sed-like string manipulation antics but this was this quickest way I could think of accomplishing the goal).  `stripHTMLSpecialChars()`&#39;s removal of these &amp;quot;quirks&amp;quot; was based on a quick grepping of the results I was getting back to see what HTML special characters were being returned.  Used in the `jsdom` callback, our &amp;quot;sanitizing&amp;quot; and printing to the console of these quotes looks like this:
``` javascript
    $skyrim_quotes.each( function() {
      var $scopedElem = $(this);
      var content = $scopedElem.html().stripHTMLSpecialChars().stripDoubleQuotes();
      console.log(content);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bravo!  Now we have our hot, fresh, Skyrim quotes, eager to troll unsuspecting brothers with.  I opted to stash these quotes in a database (sqlite3) so I didn&amp;rsquo;t have to ping the Skyrim wiki&amp;rsquo;s servers every time they were needed (and also to keep track of which ones had been used already).  I won&amp;rsquo;t go into a lot of gory details here about how working with a database in Node.js is, but suffice it to say for my purposes it was actually fairly straightforward.  Node has a handy &lt;code&gt;sqlite3&lt;/code&gt; module that made working with the database fairly simple.  As it turns out, JavaScript being single-threaded-async is quite handy for tasks like this because the thread isn&amp;rsquo;t going to block on the expensive IO operations.  If you want to pick on PHP, for instance, just note how long it takes a PHP application to make, say, 25 requests to external servers versus Node&amp;rsquo;s same attempt with concurrency.&lt;/p&gt;

&lt;p&gt;Stay tuned for the followup where I create the actual robot to talk to my brother, and if you&amp;rsquo;re keen feel free to &lt;a href=&#34;https://github.com/nathanleclaire/learnnodethetrollway&#34;&gt;check out the source&lt;/a&gt; on Github.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Unit Test Controllers In AngularJS Without Setting Your Hair On Fire</title>
      <link>http://localhost:1313/_posts/2013-12-13-how-to-unit-test-controllers-in-angularjs-without-setting-your-hair-on-fire</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/_posts/2013-12-13-how-to-unit-test-controllers-in-angularjs-without-setting-your-hair-on-fire</guid>
      <description>

&lt;p&gt;Developers almost universally agree that unit tests are a &lt;em&gt;VERY GOOD THING&lt;/em&gt; when working on a project.  They help you feel like your code is airtight, ensure reliability in production, and let you refactor with confidence when there is a need to do so.&lt;/p&gt;

&lt;p&gt;{% img /images/angularjs-unit-testing/test-code-refactor-cycle.png The Test-Driven Development cycle. %}&lt;/p&gt;

&lt;p&gt;AngularJS code touts its high degree of &lt;a href=&#34;http://angularjs.org/#embed-and-inject&#34;&gt;testability&lt;/a&gt;, which is a reasonable claim.  In much of the documentation end to end tests are provided with the examples.  Like so many things with Angular, however, I was finding that although unit testing was simple, it was not easy.  Examples were sparse and though the &lt;a href=&#34;http://docs.angularjs.org/guide/dev_guide.unit-testing&#34;&gt;official documentation&lt;/a&gt; provided some snippets of examples, putting it all together in my &amp;ldquo;real-world&amp;rdquo; case was proving challenging.  So here I&amp;rsquo;ve written a little bit about how I ended up getting that wonderful green light for a passing build to show up.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Instant Karma&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://karma-runner.github.io/&#34;&gt;Karma&lt;/a&gt; is a test runner for JavaScript that was created by the Angular team.  It is a very useful tool as it allows you to automate tasks that you would otherwise have to do by hand or with your own cobbled-together collection of scripts (such as re-running your test suite or loading up the dependencies for said tests).  Karma and Angular go together like peanut butter and jelly.&lt;/p&gt;

&lt;p&gt;With Karma, you simply define a configuration file, start Karma, and then it will take care of the rest, executing the tests in the browser(s) of your choice to ensure that they work in the environments where you plan on deploying to.  You can specify these browsers in the aforementioned configuration file.  &lt;a href=&#34;https://github.com/angular/angular-seed&#34;&gt;angular-seed&lt;/a&gt;, which I highly recommend, comes with a decent out-of-the-box Karma config that will allow you to hit the ground running quickly.   The Karma configuration in my most recent project looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module.exports = function(config) {
    config.set({
        basePath: &#39;../&#39;,

        files: [
            &#39;app/lib/angular/angular.js&#39;,
            &#39;app/lib/angular/angular-*.js&#39;,
            &#39;app/js/**/*.js&#39;,
            &#39;test/lib/recaptcha/recaptcha_ajax.js&#39;,
            &#39;test/lib/angular/angular-mocks.js&#39;,
            &#39;test/unit/**/*.js&#39;
        ],

        exclude: [
            &#39;app/lib/angular/angular-loader.js&#39;,
            &#39;app/lib/angular/*.min.js&#39;,
            &#39;app/lib/angular/angular-scenario.js&#39;
        ],

        autoWatch: true,

        frameworks: [&#39;jasmine&#39;],

        browsers: [&#39;PhantomJS&#39;],

        plugins: [
            &#39;karma-junit-reporter&#39;,
            &#39;karma-chrome-launcher&#39;,
            &#39;karma-firefox-launcher&#39;,
            &#39;karma-jasmine&#39;,
            &#39;karma-phantomjs-launcher&#39;
        ],

        junitReporter: {
            outputFile: &#39;test_out/unit.xml&#39;,
            suite: &#39;unit&#39;
        }

    })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is very similar to the default configuration in &lt;a href=&#34;https://github.com/angular/angular-seed&#34;&gt;angular-seed&lt;/a&gt;, except for a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I have switched the browser the tests run in from Chrome to &lt;a href=&#34;http://phantomjs.org/&#34;&gt;PhantomJS&lt;/a&gt;, a headless browser, so that they can run without opening a browser window and causing an awkward viewport shuffle in OSX.  Therefore the &lt;code&gt;plugins&lt;/code&gt; and &lt;code&gt;browsers&lt;/code&gt; settings have been changed.&lt;/li&gt;
&lt;li&gt;I added &lt;code&gt;recaptcha_ajax.js&lt;/code&gt;, the minified file that Google provides for their Recaptcha service, since my app depends on it being included.  Having this change be as simple as adding a line in the Karma config file was really nice.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;autoWatch&lt;/code&gt; is a particularly cool setting, since it will have Karma re-run your tests whenever they, or the files they test, change.&lt;/p&gt;

&lt;p&gt;You can install Karma with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g karma
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular-seed&#34;&gt;angular-seed&lt;/a&gt; provides a handy little script for starting the Karma test runner, which is in &lt;code&gt;scripts/test.sh&lt;/code&gt;.  Use it!&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Writing Tests With Jasmine&lt;/h1&gt;

&lt;p&gt;Most of the resources available at the time of writing for unit testing with Angular use &lt;a href=&#34;http://pivotal.github.io/jasmine/&#34;&gt;Jasmine&lt;/a&gt;, a behavior-driven development framework for testing JavaScript code.  That&amp;rsquo;s what I&amp;rsquo;ll be describing here.&lt;/p&gt;

&lt;p&gt;To unit test an AngularJS controller, you can take advantage of Angular&amp;rsquo;s &lt;a href=&#34;http://docs.angularjs.org/guide/di&#34;&gt;dependency injection&lt;/a&gt; and inject your own version of the services those controllers depend on to control the environment in which the test takes place and also to check that the expected results are occurring.  For example, I have this controller defined in my app to control the highlighting of which tab has been navigated to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.controller(&#39;NavCtrl&#39;, function($scope, $location) {
    $scope.isActive = function(route) {
        return route === $location.path();
    };
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I want to test the &lt;code&gt;isActive&lt;/code&gt; function, how do I do so?  I need to ensure that the &lt;code&gt;$location&lt;/code&gt; service returns what is expected, and that the output of the function is what is expected.  So in our test spec we have a &lt;code&gt;beforeEach&lt;/code&gt; call that gets made that sets up some local variables to hold our (controlled) version of those services, and injects them into the controller so that those are the ones to get used.  Then in our actual test we have assertions that are congruent with our expectations.  It looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe(&#39;NavCtrl&#39;, function() {
    var $scope, $location, $rootScope, createController;

    beforeEach(inject(function($injector) {
        $location = $injector.get(&#39;$location&#39;);
        $rootScope = $injector.get(&#39;$rootScope&#39;);
        $scope = $rootScope.$new();

        var $controller = $injector.get(&#39;$controller&#39;);

        createController = function() {
            return $controller(&#39;NavCtrl&#39;, {
                &#39;$scope&#39;: $scope
            });
        };
    }));

    it(&#39;should have a method to check if the path is active&#39;, function() {
        var controller = createController();
        $location.path(&#39;/about&#39;);
        expect($location.path()).toBe(&#39;/about&#39;);
        expect($scope.isActive(&#39;/about&#39;)).toBe(true);
        expect($scope.isActive(&#39;/contact&#39;)).toBe(false);
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this basic structure, you can set up all kinds of stuff.  Since we are providing the controller with our own custom scope to start with, you could do stuff like setting a bunch of properties on it and then running a function you have to clear them, then make assertions that they actually were cleared.&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;&lt;code&gt;$httpBackend&lt;/code&gt; Is Cool&lt;/h1&gt;

&lt;p&gt;But what if you are doing stuff like using the &lt;code&gt;$http&lt;/code&gt; service to call out to your server to get or post data?  Well, Angular provides a way to mock the server with a thing called &lt;code&gt;$httpBackend&lt;/code&gt;.  That way, you can set up expectations for what server calls get made, or just ensure that the response can be controlled so the results of the unit tests can be consistent.&lt;/p&gt;

&lt;p&gt;This looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe(&#39;MainCtrl&#39;, function() {
    var $scope, $rootScope, $httpBackend, $timeout, createController;
    beforeEach(inject(function($injector) {
        $timeout = $injector.get(&#39;$timeout&#39;);
        $httpBackend = $injector.get(&#39;$httpBackend&#39;);
        $rootScope = $injector.get(&#39;$rootScope&#39;);
        $scope = $rootScope.$new();


        var $controller = $injector.get(&#39;$controller&#39;);

        createController = function() {
            return $controller(&#39;MainCtrl&#39;, {
                &#39;$scope&#39;: $scope
            });
        };
    }));

    afterEach(function() {
        $httpBackend.verifyNoOutstandingExpectation();
        $httpBackend.verifyNoOutstandingRequest();
    });

    it(&#39;should run the Test to get the link data from the go backend&#39;, function() {
        var controller = createController();
        $scope.urlToScrape = &#39;success.com&#39;;

        $httpBackend.expect(&#39;GET&#39;, &#39;/slurp?urlToScrape=http:%2F%2Fsuccess.com&#39;)
            .respond({
                &amp;quot;success&amp;quot;: true,
                &amp;quot;links&amp;quot;: [&amp;quot;http://www.google.com&amp;quot;, &amp;quot;http://angularjs.org&amp;quot;, &amp;quot;http://amazon.com&amp;quot;]
            });

        // have to use $apply to trigger the $digest which will
        // take care of the HTTP request
        $scope.$apply(function() {
            $scope.runTest();
        });

        expect($scope.parseOriginalUrlStatus).toEqual(&#39;calling&#39;);

        $httpBackend.flush();

        expect($scope.retrievedUrls).toEqual([&amp;quot;http://www.google.com&amp;quot;, &amp;quot;http://angularjs.org&amp;quot;, &amp;quot;http://amazon.com&amp;quot;]);
        expect($scope.parseOriginalUrlStatus).toEqual(&#39;waiting&#39;);
        expect($scope.doneScrapingOriginalUrl).toEqual(true);
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the &lt;code&gt;beforeEach&lt;/code&gt; call is very similar, with the only exception being we are getting &lt;code&gt;$httpBackend&lt;/code&gt; from the injector rather than &lt;code&gt;$http&lt;/code&gt;.  However, there are a few notable differences with how we set up the other test.  For starters, there is an &lt;code&gt;afterEach&lt;/code&gt; call that ensures &lt;code&gt;$httpBackend&lt;/code&gt; doesn&amp;rsquo;t have any outstanding expecations or requests after each test has been run.  And if you look at the way the test is set up and utilizes &lt;code&gt;$httpBackend&lt;/code&gt;, there are a few things that are not exactly intuitive.&lt;/p&gt;

&lt;p&gt;The actual call to &lt;code&gt;$httpBackend.expect&lt;/code&gt; is fairly self-explanatory, but it is not in itself enough- we have to wrap our call to &lt;code&gt;$scope.runTest&lt;/code&gt;, the function we are actually testing in this case, in a function that we pass to &lt;code&gt;$scope.$apply&lt;/code&gt;, so that we can trigger the &lt;code&gt;$digest&lt;/code&gt; which will actually take care of the HTTP request.  And as you can see, the HTTP request to &lt;code&gt;$httpBackend&lt;/code&gt; will not resolve until we call &lt;code&gt;$httpBackend.flush()&lt;/code&gt;, so this allows us to test what things should be like when the call is in progress but hasn&amp;rsquo;t returned yet (in the example above, the controller&amp;rsquo;s &lt;code&gt;$scope.parseOriginalUrlStatus&lt;/code&gt; property will be set to &lt;code&gt;&#39;calling&#39;&lt;/code&gt; so we can display an in-progress spinny).&lt;/p&gt;

&lt;p&gt;The next few lines are assertions about properties on &lt;code&gt;$scope&lt;/code&gt; that will change after the call resolves.  Pretty cool, eh?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; In some places users have made it convention to have &lt;code&gt;scope&lt;/code&gt; without the dollar sign when it is referenced as a var in setting up unit tests.  This doesn&amp;rsquo;t seem to be enforced or emphasized particularly strongly by the Angular docs and I find it a little bit more consistent / readable to just use &lt;code&gt;$scope&lt;/code&gt; like you do everywhere else, so that&amp;rsquo;s how I&amp;rsquo;ve done things here.&lt;/p&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Maybe this is one of those things that others just take to a bit more naturally that I do, but learning to write unit tests in Angular was pretty painful for me in the beginning.  I found my understanding of how to do so to be mostly cobbled together from various blog posts and sources around the Internet, with no real consistency or definitive best practice other than that established by natural selection.  I wanted to provide some documentation of what I eventually came up with to help other people who might be in a tight spot, and just want to get coding instead of having to learn all of the quirks and idiosyncracies of Angular and Jasmine.  So I hope this article has been of use to you.&lt;/p&gt;

&lt;p&gt;Unit next week, stay sassy Internet.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nathan&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>AngularJS isn&#39;t MVC, it&#39;s SDC</title>
      <link>http://localhost:1313/_posts/2014-03-15-angularjs-isnt-mvc-its-sdc</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/_posts/2014-03-15-angularjs-isnt-mvc-its-sdc</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;Intro&lt;/h1&gt;

&lt;p&gt;{%img /images/notmvc/angular-homepage-old.gif %}&lt;/p&gt;

&lt;p&gt;I first started learning AngularJS because I was interested in exploring the world of MV&amp;#42; JavaScript frameworks for the client side.  There was something intruiging and exciting happening about a year or two ago in that space, as several JS frameworks started to get some steam and critical mass and the mainstream of client-side development (even those boring &lt;a href=&#34;http://www.hanselman.com/blog/501DevelopersFamilyAndExcitementAboutTheCraft.aspx&#34;&gt;5:01 developers&lt;/a&gt; couldn&amp;rsquo;t ignore the zeitgeist anymore) seemed to wake up and realize that maybe there was a need for something more than just vanilla jQuery in applications where everything was spiraling way out of control.&lt;/p&gt;

&lt;p&gt;So I started looking into Angular for the myriad reasons you usually hear people cite as a reason for using it.  It was backed by Google.  It was easy to get going quickly.  The quality of documentation and tutorials, though not fantastic, was starting to improve relative to Ember or more obscure frameworks.  It was fun.&lt;/p&gt;

&lt;p&gt;My first foray went down in flames.&lt;/p&gt;

&lt;p&gt;{%img /images/notmvc/javascript.png %}&lt;/p&gt;

&lt;p&gt;I fell into a common Angular antipattern (I may discuss Angular antipatterns more in a future article) where I stuffed everything into the controller.  Services and directives looked a little scary, and required learning esoteric things like what the meaning of &lt;code&gt;@&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, and &lt;code&gt;=&lt;/code&gt; was in a directive, and instead I saw fit to simply stuff everything into &lt;code&gt;$scope&lt;/code&gt; and coordinate activities using event broadcasting and listening.&lt;/p&gt;

&lt;p&gt;That project became so un-fun to work on that I just stopped.  I had dug myself into a hole deeper than I would ever get out of without a complete rewrite.&lt;/p&gt;

&lt;p&gt;Fortunately, partially through writing about Angular a lot, I eventually wised up.&lt;/p&gt;

&lt;p&gt;I learned that Angular is structured in some ways that are similar to what we have experienced before, but it also hearkens a little bit to the future of the client side (see &lt;a href=&#34;http://www.w3.org/TR/components-intro/&#34;&gt;Web Components&lt;/a&gt;).  And because of that, it had a little bit of new stuff too that threw me.&lt;/p&gt;

&lt;p&gt;You may be used to the Model View Controller pattern- but that&amp;rsquo;s not what Angular is.   A subsection of it kind of looks like that, but if you take a step back you will see a bigger picture emerge.&lt;/p&gt;

&lt;p&gt;Angular is Service, Directive, Controller.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;The Angular Way&lt;/h1&gt;

&lt;p&gt;Angular is all about testability, and testability mandates that we be able to break our application into components.  In most cases, monoliths are considered harmful.  You probably understand why if you&amp;rsquo;ve ever worked on one.  Things become too brittle and easy to break.  They become tightly coupled.  It&amp;rsquo;s impossible to change codes without introducing bugs in unrelated places.  And so on.&lt;/p&gt;

&lt;p&gt;Angular draws lines between separate parts of the architecture so that you can avoid many of these headaches.  In particular, dependency injection treats us well, as we rely on Angular&amp;rsquo;s injector to provide us with the things that we need instead of getting them ourselves.  This also allows us more control over how they are provided, which eases testing significantly (the developer has a smaller surface area that he needs to control).&lt;/p&gt;

&lt;p&gt;Most applications use these underlying principles to do three things: Retrieve, process, or send out data (usually communicating with the &amp;ldquo;outside world&amp;rdquo; such as a database or API), present (display) that data to the user in a useful way, and coordinate the general state of the application (this includes features such as routing).&lt;/p&gt;

&lt;p&gt;The first things that we mentioned, handling data, is the job of services.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Services&lt;/h2&gt;

&lt;p&gt;The main point of services is to dictate how data flows into or out of your application, not within it.  If you are talking to the outside world, this is a perfect use case for a service.  Controllers use methods and data provided by these services to update properties on &lt;code&gt;$scope&lt;/code&gt;, which in turn dictates how the DOM changes when a new digest cycle hits.&lt;/p&gt;

&lt;p&gt;When I was new to Angular, I flubbed this.  In particular the difference between &lt;a href=&#34;http://stackoverflow.com/questions/15666048/angular-js-service-vs-provider-vs-factory&#34;&gt;services and factories&lt;/a&gt; wasn&amp;rsquo;t clear to me, so I avoided them.  Instead I made &lt;code&gt;$http&lt;/code&gt; calls inside of my controllers, which ended up turning my controllers into a confused mess of business and application logic.&lt;/p&gt;

&lt;p&gt;This is &lt;em&gt;NOT&lt;/em&gt; the way to go.  Instead, anything that involves setting, retrieving, or processing data should happen in services.  The leaner that your controllers are, the better.&lt;/p&gt;

&lt;p&gt;Services should NEVER manipulate &lt;code&gt;$scope&lt;/code&gt;.  That is the job of the controller.  If you need to change values in &lt;code&gt;$scope&lt;/code&gt; based on the result of, say, an AJAX call, use &lt;a href=&#34;http://docs.angularjs.org/api/ng/service/$q&#34;&gt;promises&lt;/a&gt;.  Check out &lt;a href=&#34;http://nathanleclaire.com/blog/2014/01/04/5-smooth-angularjs-application-tips/&#34;&gt;this blog article I wrote&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Directives&lt;/h2&gt;

&lt;p&gt;Directives are definitely one of the most confusing parts of AngularJS to a newcomer.  The prospect of writing your own is intimidating.  Especialy when I first started learning, the quality of available documentation and tutorials for them was not very high (this has improved a lot in the last year or so though).&lt;/p&gt;

&lt;p&gt;But directives, for all that they intimidate the newbie, promise a land of amazing power.  Most people who are coming to Angular from a jQuery way of thinking run the risk of getting themselves in trouble by performing DOM manipulation outside of directives.  They are so used to the old way of doing things, where an element can be accessed willy-nilly by any piece of client side code that needs it.&lt;/p&gt;

&lt;p&gt;Directives have several different forms but usually they are either completely new HTML elements, or attributes that you can throw on existing elements, to perform some kind of DOM manipulation.  They can have their own scope and they can be reused, which is one of their most useful properties.&lt;/p&gt;

&lt;p&gt;In some ways we are all still fighting our way towards manifesting in reality the Platonic ideal of what directives represent, e.g. I should never have to rewrite a calendar widget if it is already existing, I should just be able to use a &lt;code&gt;&amp;lt;calendar&amp;gt;&amp;lt;/calendar&amp;gt;&lt;/code&gt; element and set properties to customize it the way that I like.  But in other ways this &lt;em&gt;is&lt;/em&gt; approaching reality, especially as Angular grows in popularity and as systems such as Bower become more useful and flexible.&lt;/p&gt;

&lt;p&gt;Directives promise no more spaghetti jQuery code (do they deliver?).  Instead, everything gets broken out into modular components that are far easier to test.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;What about Views?&lt;/h2&gt;

&lt;p&gt;In a lot of ways the &amp;ldquo;view&amp;rdquo; is the same as it&amp;rsquo;s ever been, modulo directives which we have already discussed.  &lt;code&gt;ngView&lt;/code&gt; promises new, snappy navigation, which is exciting.  Views in AngularJS do the same job they always have and they do it well.  Technically I probably should have called this article &amp;ldquo;Angular isn&amp;rsquo;t MVC, it&amp;rsquo;s SDVC&amp;rdquo; but I didn&amp;rsquo;t think it had the same ring to it.&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Controllers&lt;/h2&gt;

&lt;p&gt;Finally we discuss the piece that ties it all together.  The controller.&lt;/p&gt;

&lt;p&gt;Without controllers, directives are useless.  Controllers set properties on &lt;code&gt;$scope&lt;/code&gt; for directives to use.&lt;/p&gt;

&lt;p&gt;Likewise, without controllers, services are useless.  They are just objects for playing with data.  Therefore controllers are like the &amp;ldquo;glue&amp;rdquo; of your application.&lt;/p&gt;

&lt;p&gt;Controllers should be as lean and lightweight as possible.  It makes it easier to see what&amp;rsquo;s going on, and it makes it easier to test them.&lt;/p&gt;

&lt;h1 id=&#34;toc_6&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Angular is a new framework and it requires a new way of thinking.  Trying to apply the old patterns, or being inflexible and unwilling to learn about the different components of Angular and how they fit together will get you in trouble.&lt;/p&gt;

&lt;p&gt;Everyone likes jQuery because jQuery is a useful tool.  It is simple and it allows you to build whatever you want.  It isn&amp;rsquo;t very opinionated about the way you do so (in fact it provides you with a lot of options).&lt;/p&gt;

&lt;p&gt;Angular, on the other hand, is like a house.  It already has a framework and a foundation for how to do things, you just have to furnish it.  Trying to use Angular like a hammer will only result in tears.  It is like trying to use a house to build a house.&lt;/p&gt;

&lt;p&gt;I hope that this essay may help to clear some things up to people who are new to Angular.&lt;/p&gt;

&lt;p&gt;Until next week, stay sassy Internet.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nathan&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>The Good, The Bad, and The Ugly of Sails.js, Realtime JavaScript MVC Framework</title>
      <link>http://localhost:1313/_posts/2013-12-28-the-good-the-bad-and-the-ugly-of-sails-dot-js-realtime-javascript-mvc-framework</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/_posts/2013-12-28-the-good-the-bad-and-the-ugly-of-sails-dot-js-realtime-javascript-mvc-framework</guid>
      <description>

&lt;p&gt;Over the Christmas vacation time that I&amp;rsquo;ve been taking I&amp;rsquo;ve been finding myself drawn back to &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;, mostly for the promise of rapid web application development and not having to switch languages when changing from working on the server-side and the client-side.  As part of my interest in developing applications using &lt;a href=&#34;http://www.html5rocks.com/en/tutorials/websockets/basics/&#34;&gt;WebSockets&lt;/a&gt; for their real-time capabilities, I looked into &lt;a href=&#34;http://derbyjs.com/&#34;&gt;Derby&lt;/a&gt; and &lt;a href=&#34;https://www.meteor.com/&#34;&gt;Meteor&lt;/a&gt; and eventually I stumbled across &lt;a href=&#34;http://sailsjs.org/&#34;&gt;Sails.js&lt;/a&gt;, the new kid on the block.  It seemed very promising and addressed some issues that I had with Derby and with Meteor.  Namely, both of those frameworks seem very tightly coupled from the client to the server and I wanted something that would provide more flexibility while still allowing me to develop rapidly.  So, I decided to begin prototyping out my new side project in Sails and naturally I developed a variety of opinions to rant about.  Enjoy.&lt;/p&gt;

&lt;p&gt;{% img /images/sails/clint-eastwood.jpeg My face when developing. %}&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;The Good&lt;/h1&gt;

&lt;p&gt;{% img /images/sails/thegood.jpeg %}&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://sailsjs.org/#!&#34;&gt;Sails.js&lt;/a&gt; makes getting things started ridiculously quick.  You run &lt;code&gt;sails new myApp&lt;/code&gt; to create the application skeleton.  Then, to create a Controller and Model for some data that you&amp;rsquo;re going to be working with, you run &lt;code&gt;sails generate foo&lt;/code&gt; (&lt;code&gt;foo&lt;/code&gt; being the name of your model).  You configure the model really simply:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;module.exports = {
    adapter: &#39;sails-redis&#39;,
    attributes: {
        content: &#39;string&#39;,
        userName: &#39;string&#39;,
        userId: &#39;int&#39;,    // &amp;quot;foreign key&amp;quot;
        chatroomId: &#39;int&#39; // &amp;quot;foreign key&amp;quot;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sails uses &lt;a href=&#34;https://npmjs.org/package/waterline&#34;&gt;Waterline&lt;/a&gt; as its ORM, and it provides a lot of power for developing rapidly.  The &lt;code&gt;adapter&lt;/code&gt; field dictates where the data will be stored, and you can mix and match, so you can have some models stored in MySQL and others in Redis, for instance.  I think this is a really cool feature.  You can set validation, etc. on them.  You can write custom methods on your models to extract &amp;ldquo;higher-order&amp;rdquo; data from them.  Best of all, just having a model gets you a ton of routes (CRUD blueprints and REST endpionts) out of the box (and they &lt;a href=&#34;http://sailsjs.org/#!documentation/sockets&#34;&gt;all work with Websockets&lt;/a&gt;!):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Backbone Conventions
GET   :    /:controller                 =&amp;gt; findAll()
GET   :    /:controller/read/:id        =&amp;gt; find(id)
POST  :    /:controller/create          =&amp;gt; create()
POST  :    /:controller/create/:id      =&amp;gt; create(id)
PUT   :    /:controller/update/:id      =&amp;gt; update(id)
DELETE:    /:controller/destroy/:id     =&amp;gt; destroy(id)

# You can also explicitly state the action
GET   :    /:controller/find            =&amp;gt; findAll()
GET   :    /:controller/find/:id        =&amp;gt; find(id)
POST  :    /:controller/create          =&amp;gt; create(id)
PUT   :    /:controller/update/:id      =&amp;gt; update(id)
DELETE:    /:controller/destroy/:id     =&amp;gt; destroy(id)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, for instance, if you run &lt;code&gt;sails lift&lt;/code&gt; to start your app, hitting&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://localhost:1337/something/create?content=hello&amp;amp;userName=Nate&amp;amp;userId=1&amp;amp;chatroomId=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will add a new instance of the model to your datastore.  We did nothing manually to address this (so long &lt;code&gt;$_GET&lt;/code&gt; and &lt;code&gt;$_POST&lt;/code&gt;, it&amp;rsquo;s been&amp;hellip; okay).  And you can see everything that&amp;rsquo;s been added at &lt;code&gt;localhost:1337/something/&lt;/code&gt; without having to configure anything, althogh Sails makes it easy to change things around to your heart&amp;rsquo;s content by setting properties in the Controller and &lt;code&gt;config/routes.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Underneath the slick outer layer, Sails uses a lot of well-known and proven modules, most notably &lt;a href=&#34;http://expressjs.com/&#34;&gt;Express&lt;/a&gt;, and it makes it easy to reach to the underlying layer to configure things / do something specific/different (but does not awkwardly leak abstractions).  Additionally, serving of static assets never gave me any trouble and I just added new folders when I needed them.  Not having to worry about this was really nice when developing with &lt;a href=&#34;http://angularjs.org/&#34;&gt;Angular&lt;/a&gt;, which mandates a lot of client-side includes.&lt;/p&gt;

&lt;p&gt;In summary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Database-agnostic ORM that is simple, but powerful and flexible as well&lt;/li&gt;
&lt;li&gt;Developing routes / REST APIs is ridiculously fast - writing tiny amounts of code gets you a ton! (including WebSockets support)&lt;/li&gt;
&lt;li&gt;Lots of stuff &amp;ldquo;just works&amp;rdquo; without making you think about things too much, but Sails does not try to conceal with &amp;ldquo;magic&amp;rdquo;&lt;/li&gt;
&lt;li&gt;The Sails.js team has done a really good job of laying things out well to be extensible- and they have well-thought-out solutions that address many common issues e.g. &lt;a href=&#34;http://sailsjs.org/#!documentation/policies&#34;&gt;policies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;The Bad&lt;/h1&gt;

&lt;p&gt;{% img /images/sails/thebad.jpeg %}&lt;/p&gt;

&lt;p&gt;Sails is a young framework so sometimes issues come up that can be frustrating to address (since there are not that many users yet, therefore there are not that many resources on StackOverflow etc.).  For instace, when I wanted to start using Redis as a datastore for chat room comments, I tried running &lt;code&gt;npm install sails-redis&lt;/code&gt;.  This seemed to go off without a hitch but when I ran &lt;code&gt;sails lift&lt;/code&gt; I got an error indicating that the &lt;code&gt;sails-redis&lt;/code&gt; module could not be found.  It was very bizarre but then I tracked down &lt;a href=&#34;https://github.com/balderdashy/sails-redis/issues/3&#34;&gt;this Github issue&lt;/a&gt; which pointed out there was no source code in the npm package!!  I was able to install the package from GitHub but it was very frustrating to blow time on something like that when ostensibly the framework allows you to develop rapidly.&lt;/p&gt;

&lt;p&gt;For me personally (and I think &lt;a href=&#34;https://github.com/balderdashy/sails/issues/1239&#34;&gt;others share the sentiment&lt;/a&gt;) I think that generators should also provide you with unit test skeletons, and that Sails should address this concern a lot better.  If it&amp;rsquo;s going to be production-ready top-notch support for testing will be pretty critical.  I wouldn&amp;rsquo;t want to deploy an application that didn&amp;rsquo;t have at least some unit tests, especially for mission-critical parts of the app.  As it stands right now it&amp;rsquo;s not really clear how to test your Sails application.  We need a &lt;code&gt;sails test&lt;/code&gt; command and documentation in this regard!&lt;/p&gt;

&lt;p&gt;For a framework that touts performance as a major benefit, I find that &lt;code&gt;sails lift&lt;/code&gt; takes a pretty long time to start up (granted, it is doing a lot - if you run it with &lt;code&gt;--verbose&lt;/code&gt; option you can see all of the route binding etc. it is doing).  This would be okay if you only had to do it once, but every time you change things (models, controllers, routes, etc.) you have to stop and start &lt;code&gt;sails lift&lt;/code&gt;.  So, to have either code hot-swapping or a &lt;code&gt;sails lift&lt;/code&gt; that starts up lightning-fast would make Sails much more pleasant to use.  I&amp;rsquo;m curious if performance can be improved in this regard.&lt;/p&gt;

&lt;p&gt;The documentation, particularly when it came to using &lt;a href=&#34;http://sailsjs.org/#!documentation/sockets&#34;&gt;Sockets&lt;/a&gt;, was hard to understand as someone who is a newcomer to &lt;a href=&#34;http://socket.io&#34;&gt;socket.io&lt;/a&gt;.  Their included &lt;code&gt;app.js&lt;/code&gt; didn&amp;rsquo;t really clarify things too well, and so I had to rely on &lt;a href=&#34;http://net.tutsplus.com/tutorials/javascript-ajax/working-with-data-in-sails-js/&#34;&gt;this example from NetTuts&lt;/a&gt; to make sense of how to accomplish what I was trying to do.  So I think you could say that the documentation, though absolutely stellar in some areas, could use some bit of work.&lt;/p&gt;

&lt;p&gt;In summary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Since it is new, it can cause frustrating problems you will likely never run into with Django etc.&lt;/li&gt;
&lt;li&gt;In my opinion generators should also include tests (at least make it optional)&lt;/li&gt;
&lt;li&gt;Documentation is lacking in some ways&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sails lift&lt;/code&gt; takes longer than I&amp;rsquo;d like to start up and has to be restarted frequently&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;The Ugly&lt;/h1&gt;

&lt;p&gt;{% img /images/sails/theugly.jpeg %}&lt;/p&gt;

&lt;p&gt;At the time of writing, &lt;a href=&#34;https://travis-ci.org/balderdashy/sails&#34;&gt;their build is listed as not passing on TravisCI&lt;/a&gt;, and the sticker on their Github page says so.  That doesn&amp;rsquo;t exactly send the right kind of message you want to send with your project.  Now, be aware that I cloned the repository and ran all of the tests locally, and they all passed with Node &lt;code&gt;v0.10.24&lt;/code&gt; and &lt;code&gt;v0.11.9&lt;/code&gt;, but not with a previous version of &lt;code&gt;v0.10.*&lt;/code&gt; that I had (can&amp;rsquo;t remember which unfortunately).  So, perhaps it&amp;rsquo;s more of a TravisCI / versioning issue than a Sails issue, but I think that&amp;rsquo;s a big public-facing thing to overlook.&lt;/p&gt;

&lt;p&gt;Something that&amp;rsquo;s really unfortunate about &lt;a href=&#34;https://github.com/balderdashy/waterline&#34;&gt;Waterline&lt;/a&gt;, the aforementioned ORM that Sails uses, is that it does not support associations (relational data) at the moment.  This seems like a really huge issue / something that I would expect to be a huge cornerstone of any ORM to not have support for right away, and it was really frustrating to find out midway through starting to put together an app that has a lot of relational data.  That being said, they are &lt;a href=&#34;https://github.com/balderdashy/sails/issues/124&#34;&gt;aware of the issue&lt;/a&gt; and are working to fix it, but I really want my &lt;code&gt;JOIN&lt;/code&gt;s available for working with in the framework I&amp;rsquo;m using &lt;em&gt;now&lt;/em&gt;, without having to use an unstable/bleeding-edge pre-release version of Waterline.  In order to do so right now in Sails I have to use &lt;code&gt;Model.query&lt;/code&gt;, which is kind of awkward (plugging in raw SQL).  Having to code up things one way as a workaround and then go back and rip them out for official associations when they&amp;rsquo;re supported is really a turn off.    I kind of wonder if it&amp;rsquo;s not partially a result of NoSQL/MongoDB being very hot right now and developers not giving as much love to traditional relational things as they might have in the past.  Since it&amp;rsquo;s an area of interest for me I&amp;rsquo;d like to contribute but other than a few guidelines in &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; there&amp;rsquo;s not much communication from the core devs on this front.&lt;/p&gt;

&lt;p&gt;A lot of what is rough around the edges about Sails right now is summed up really well in this &lt;a href=&#34;https://github.com/balderdashy/sails/pull/1058#issuecomment-30498745&#34;&gt;Github pull request comment&lt;/a&gt; by &lt;a href=&#34;https://github.com/yoshuawuyts&#34;&gt;yoshuawuyts&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I know you&amp;rsquo;ve been very busy, but I feel I need to share this. As much as I&amp;rsquo;ve enjoyed Sails in the past, right now I feel very disconnected from it. For me the amount of outdated documentation, piling issues on the tracker and unclear direction make it hard to keep investing into Sails. The prolonged absence of core members like yourself and delayed responses on most issues make it hard to keep investing. If you want to lead Sails forward, I urge you to invest in clarity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;His suggestions for improvement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rigorous issue smackdown; close everything that isn&amp;rsquo;t relevant, combine duplicates into new issues.&lt;/li&gt;
&lt;li&gt;Create a roadmap; add all feature suggestions to the roadmap and close corresponding issues.&lt;/li&gt;
&lt;li&gt;Add code coverage via coveralls; it entices users to write more tests and fill up the bar.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And a very good point:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I don&amp;rsquo;t think you should prioritize getting new contributors in, I think they&amp;rsquo;ll come naturally once the points above have been addressed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After working with Sails for a week or so, I agree heartily with his take.&lt;/p&gt;

&lt;p&gt;In summary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build is broken on TravisCI at the time of writing&lt;/li&gt;
&lt;li&gt;No support for associations (though they are coming)&lt;/li&gt;
&lt;li&gt;Issues on Github are piling up without being addressed&lt;/li&gt;
&lt;li&gt;Devs have not been very responsive lately (ever?)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I don&amp;rsquo;t want the Sails team to feel like I&amp;rsquo;m ragging on them, they&amp;rsquo;ve done awesome work and I really feel like Sails has a great future if it can take care of some of the things I&amp;rsquo;ve brought up in the past two sections.  I know that when everything was running smoothly developing with Sails it was pure bliss on my end.&lt;/p&gt;

&lt;p&gt;For those readers interested or with a bunch of time on thier hands, it would be great to have people throw a bunch of pull requests Sails&amp;rsquo; way, since I sort of have a feeling that they are overwhelmed by the sheer scope of the project.  However, if the core developers don&amp;rsquo;t start piping up soon, it&amp;rsquo;s going to be hard to maintain interest / continue to invest my own valuable time and willpower into the project.  It has a ton of potential and in my opinion the vision, fully implemented and fleshed out, would be truly amazing.&lt;/p&gt;

&lt;p&gt;So that&amp;rsquo;s my take on Sails.js.  Happy New Year, I hope you enjoyed.  Until next time, stay sassy Internet.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nathan&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;EDIT:&lt;/em&gt; I absentmindedly pushed with a bunch of broken links.  Fixed now, sorry guys.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>