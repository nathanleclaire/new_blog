<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Service on nathan leclaire </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:1313/categories/service/index.xml</link>
    
    
    
    <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
    
    <item>
      <title>5 AngularJS Antipatterns &amp; Pitfalls</title>
      <link>http://localhost:1313/posts/2014-04-19-5-angularjs-antipatterns-and-pitfalls</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/posts/2014-04-19-5-angularjs-antipatterns-and-pitfalls</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;The Angular Jungle&lt;/h1&gt;

&lt;p&gt;{%img /images/angular-antipatterns/jungle.jpg %}&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://angularjs.org&#34;&gt;AngularJS&lt;/a&gt; is a big JavaScript framework and it gives you just enough rope to hang yourself with.  I&amp;rsquo;ve written a lot about it in this blog and really hope that I have made a noteworthy impact on improving the general availability of resources.  I&amp;rsquo;ve been working on a project using AngularJS at my dayjob lately and noticed some antipatterns and pitfalls that people fall into when they are new to Angular (myself included, so they&amp;rsquo;re based on my own sweat and blood learning the framework) and I&amp;rsquo;ve consolidated some of them here for you to peruse.  Hopefully I&amp;rsquo;ll save you some pain.&lt;/p&gt;

&lt;p&gt;They are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Not having a dot in your &lt;code&gt;ng-model&lt;/code&gt; (or other places you need it!)&lt;/li&gt;
&lt;li&gt;Extreme overuse of event broadcasting and listening (&lt;code&gt;$emit&lt;/code&gt;, &lt;code&gt;$broadcast&lt;/code&gt;, &lt;code&gt;$on&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Too much stuff in controllers&lt;/li&gt;
&lt;li&gt;Misunderstanding or misusing isolate scope&lt;/li&gt;
&lt;li&gt;Using the outside world instead of doing things the Angular way&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;1. Not having a dot in your &lt;code&gt;ng-model&lt;/code&gt; (or other places you need it!)&lt;/h1&gt;

&lt;p&gt;{%img /images/angular-antipatterns/george.jpg %}&lt;/p&gt;

&lt;p&gt;Angular&amp;rsquo;s &lt;a href=&#34;https://docs.angularjs.org/guide/directive&#34;&gt;directives&lt;/a&gt; provide fantastic flexibility and an amazing way to write HTML that describes its interactive behavior in a clean and clear fashion.  They provide a way to create &lt;a href=&#34;https://egghead.io/lessons/angularjs-understanding-isolate-scope&#34;&gt;isolate scope&lt;/a&gt; to promote reusability and creating a directive that uses this looks something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;angular.module(&#39;myApp&#39;).directive(&#39;myDir&#39;, function () {
  return  {
    restrict: &#39;E&#39;,
    scope: {
      aProperty: &#39;=&#39;,
      bProperty: &#39;&amp;amp;&#39;
    },
    // and so on...
  };
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above definition &lt;code&gt;aProperty&lt;/code&gt; gets passed in through an attribute (normalized to &lt;code&gt;a-property&lt;/code&gt;) and creates a two-way data binding between the parent scope and the child scope.  That means if you change one, the other will be updated to match it and vice versa.  However, because of the way that JavaScript&amp;rsquo;s prototypal inheritance works, sometimes this may not work &amp;ldquo;magically&amp;rdquo; as you would expect.  I will dicuss a particular situation with &lt;code&gt;ng-model&lt;/code&gt; here but know that understanding how this all ties together will save you lots of tears due to &lt;code&gt;ng-switch&lt;/code&gt;, &lt;code&gt;ng-repeat&lt;/code&gt;, etc. creating their own scopes (and &amp;ldquo;shadow&amp;rdquo; properties in the prototype chain) that throw off the way you might be expecting things to work.&lt;/p&gt;

&lt;p&gt;In particular, when you have an &lt;code&gt;ng-model&lt;/code&gt; bound to a property on &lt;code&gt;$scope&lt;/code&gt; which was originally passed in using &lt;code&gt;=&lt;/code&gt; in your child directive:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Whenever you have ng-model there’s gotta be a dot in there somewhere. If you don’t have a dot, you’re doing it wrong.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Words from the mouth of Miško himself.&lt;/p&gt;

&lt;p&gt;This is because &lt;em&gt;primitives&lt;/em&gt; (String, Number, etc.) passed in to a child scope create their own &amp;ldquo;shadow&amp;rdquo; property in the child scope, which hides the original property on the parent scope due to the way that JavaScript prototypes work (the prototype chain will not need to be consulted to determine the value of &lt;code&gt;foo&lt;/code&gt; if &lt;code&gt;foo&lt;/code&gt; is not an &lt;code&gt;Object&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt;).  If they are bound using &lt;code&gt;=&lt;/code&gt; and they are objects, however, &lt;code&gt;foo.bar&lt;/code&gt; &lt;em&gt;will&lt;/em&gt; be bound correctly to the original property in the parent scope.&lt;/p&gt;

&lt;p&gt;Understanding this will save you soooo much pain.  Seriously, if you&amp;rsquo;re serious about Angular at all, take the time to read the offical article I link at the end of this section.  Then read it again.&lt;/p&gt;

&lt;p&gt;I suspect that a misunderstanding of this (communicating effectively from scope to scope up and down the prototype chain) is at least partially what contributes to people digging themselves further and further into a hole by misusing event broadcasting/emitting/listening and isoalte scope, as detailed later on in this article.  When things spiral out of control in this manner, it can really be pure torture.  You&amp;rsquo;re fighting against the framework, and nobody wins in that battle, least of all the people who have to maintain your code.&lt;/p&gt;

&lt;p&gt;The point is, most people new to Angular (and even people who have been doing it for a while) expect this to work :&lt;/p&gt;

&lt;p&gt;{% raw %}
```
&lt;p&gt; You have {{dollars}} dollars &lt;/p&gt;
&lt;crazy-awesome-widget ng-repeat=&#34;account in accounts&#34; info=&#34;dollars&#34;&gt;
&lt;/crazy-awesome-widget&gt;&lt;/p&gt;

&lt;p&gt;
angular.module(&amp;lsquo;dotDemo&amp;rsquo;).controller(&amp;lsquo;OuterCtrl&amp;rsquo;, function($scope) {
  $scope.dollars = 5;
  $scope.accounts = [&amp;ldquo;Tom&amp;rdquo;, &amp;ldquo;Bobby&amp;rdquo;, &amp;ldquo;Sally&amp;rdquo;];
});
angular.module(&amp;lsquo;dotDemo&amp;rsquo;).directive(&amp;lsquo;crazyAwesomeWidget&amp;rsquo;, function() {
  return {
    restrict: &amp;lsquo;E&amp;rsquo;,
    template: &amp;lsquo;&lt;input type=&#34;text&#34; ng-model=&#34;info&#34; /&gt;&amp;rsquo;,
    scope: {
      info: &amp;lsquo;=&amp;rsquo;
    }
  };
});

```
{% endraw %}&lt;/p&gt;

&lt;p&gt;Can you spot the bug?  If you&amp;rsquo;ve been paying attention, you should be able to pick it out easily.&lt;/p&gt;

&lt;iframe src=&#34;http://embed.plnkr.co/ii8xZoOIRcWw4LlNMayf/preview&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Come on, intone it with me.  &lt;em&gt;I need a dot. I need a dot. I need a dot.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the above code the input boxes won&amp;rsquo;t update the property in the parent scope.  The prototype chain creates a new property &lt;code&gt;info&lt;/code&gt; which is unique to the child scope instead of bound to the parent scope.  It won&amp;rsquo;t work this way.  You need an object.  The code should look like this instead:&lt;/p&gt;

&lt;p&gt;{% raw %}
```
&lt;p&gt; You have {{customerData.dollars}} dollars &lt;/p&gt;
&lt;crazy-awesome-widget ng-repeat=&#34;account in accounts&#34; info=&#34;customerData&#34;&gt;
&lt;/crazy-awesome-widget&gt;&lt;/p&gt;

&lt;p&gt;
angular.module(&amp;lsquo;dotDemo&amp;rsquo;).controller(&amp;lsquo;OuterCtrl&amp;rsquo;, function($scope) {
  $scope.customerData = {
    dollars: 5
  };
  $scope.accounts = [&amp;ldquo;Tom&amp;rdquo;, &amp;ldquo;Bobby&amp;rdquo;, &amp;ldquo;Sally&amp;rdquo;];
});
angular.module(&amp;lsquo;dotDemo&amp;rsquo;).directive(&amp;lsquo;crazyAwesomeWidget&amp;rsquo;, function() {
  return {
    restrict: &amp;lsquo;E&amp;rsquo;,
    template: &amp;lsquo;&lt;input type=&#34;text&#34; ng-model=&#34;info.dollars&#34; /&gt;&amp;rsquo;,
    scope: {
      info: &amp;lsquo;=&amp;rsquo;
    }
  };
});

```
{% endraw %}&lt;/p&gt;

&lt;iframe src=&#34;http://embed.plnkr.co/IVkqcNVhwQXd1zQ9nZQ2/preview&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Boom, synchronization from parent scope =&amp;gt; isolated child scopes and back again.&lt;/p&gt;

&lt;p&gt;Big shout out to Reddit user &lt;a href=&#34;http://www.reddit.com/user/Commentares&#34;&gt;Commentares&lt;/a&gt; who caught a flaw in the original implementation of my first example in the first draft of this article.&lt;/p&gt;

&lt;p&gt;See for reference:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jimhoskins.com/2012/12/14/nested-scopes-in-angularjs.html&#34;&gt;This excellent article by Jim Hoskins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular.js/wiki/Understanding-Scopes&#34;&gt;This aforementioned Angular documentation gettin&amp;rsquo; mad deep about scopes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;2. Extreme overuse of event broadcasting and listening (&lt;code&gt;$emit&lt;/code&gt;, &lt;code&gt;$broadcast&lt;/code&gt;, &lt;code&gt;$on&lt;/code&gt;)&lt;/h1&gt;

&lt;p&gt;Everybody loves to hate on GOTOs.  Poor little GOTOs.  All they ever wanted to do was help control program execution flow and branching, and they get the Rodney Dangerfield treatment.  They&amp;rsquo;re reviled with that sort of knee-jerk reaction that only programmers can revile something with.  You know the type.  They&amp;rsquo;re the ones who got burned by &lt;code&gt;git rebase&lt;/code&gt; one time (it was their own fault) and spend way too much effort and energy spreading FUD about rebases.  But I digress.  My point is, there&amp;rsquo;s this Angular antipattern I&amp;rsquo;ve seen and fallen into, where &lt;code&gt;$scope.$emit&lt;/code&gt; and &lt;code&gt;$scope.$broadcast&lt;/code&gt; have become the new GOTO.  Except that it&amp;rsquo;s shiny and new and Angular-ey, so everybody gives it a pass.  &lt;code&gt;$scope.$watch&lt;/code&gt; can kind of be abused in the same way, but the others are slightly easier to pick on.&lt;/p&gt;

&lt;p&gt;I really feel that you should keep manual event broadcasting and catching out of your code if possible.  It doesn&amp;rsquo;t usually do a whole lot of good and confuses the hell out of the people who have to maintain your code (including you!).  The problem is thus:  Let&amp;rsquo;s say you have something going wacky in a &lt;code&gt;$scope.$on&lt;/code&gt;.  You set a breakpoint in the defined callback function that runs when that &lt;code&gt;$scope.$on&lt;/code&gt; catches its defined event.  OK, now what?  You have no idea where that event came from or what its intended purpose is, and if it&amp;rsquo;s wreaking all sorts of unintended havoc you&amp;rsquo;re in big trouble.  Usually this can be avoided by careful use of services and proper scope inheritance.&lt;/p&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;3. Too much stuff in controllers&lt;/h1&gt;

&lt;p&gt;It&amp;rsquo;s unfortunate that I have to point this one out, but as I&amp;rsquo;ve personally fallen into this pitfall especially when first getting started with Angular, I suppose I can give people a free pass on making this mistake once or twice.  After that, however, they should definitely learn.&lt;/p&gt;

&lt;p&gt;Your controllers should be lean.  Say it with me.&lt;/p&gt;

&lt;p&gt;My controllers should be lean.&lt;/p&gt;

&lt;p&gt;My controllers should be lean.&lt;/p&gt;

&lt;p&gt;My controllers &lt;em&gt;are&lt;/em&gt; lean.&lt;/p&gt;

&lt;p&gt;This means that absolutely everything which can be stripped out of them, should be.  They exist to coordinate the delicate dance between your other resources (services and directives).&lt;/p&gt;

&lt;p&gt;For instance, I came across a line introduced in one of our controllers that looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;body&#39;).attr(&#39;data-state&#39;, &#39;someNewState&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was my reaction upon finding this code in this controller:&lt;/p&gt;

&lt;p&gt;{%img /images/angular-antipatterns/hulk.gif %}&lt;/p&gt;

&lt;p&gt;Note:  My actual reaction was way more passive aggressive (wrote about it in my &lt;em&gt;blog&lt;/em&gt;!  Showed that guy).&lt;/p&gt;

&lt;p&gt;In Angular, DOM manipulation is done inside directives.  NOT controllers.  DOM manipulation is done inside directives.  Every aspiring Angular programmer should have this branded into his or her brain.&lt;/p&gt;

&lt;p&gt;Other common things that slip into controllers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ajax (sometimes disguised in a half-baked abstraction) - this should be done in services&lt;/li&gt;
&lt;li&gt;Tangled mess of event handling as discussed in last section&lt;/li&gt;
&lt;li&gt;Things that are basically service or factory logic, but eh I&amp;rsquo;m too lazy to move this code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don&amp;rsquo;t do it.  If you keep your controllers lean and small they will reward you with readability and ease of debugging.  If you let them spiral out of control you will be punished unceremoniously.&lt;/p&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;4. Misunderstanding or misusing isolate scope&lt;/h1&gt;

&lt;p&gt;Isolate scope is really nice.  It prevents directives from just accessing / modifying the parent scope willy-nilly, opening the door to all kinds of bugs associated with global-ish scope, and promotes reusability.  But it&amp;rsquo;s important to realize that this is the point of isolate scope.  Consequently, if you&amp;rsquo;re passing a bunch of properties into your directive&amp;rsquo;s &lt;code&gt;$scope&lt;/code&gt;, and then cascading them downwards through a variety of child scopes, you are probably doing something wrong.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve seen this a bit.  If you are passing a bunch of information down to your directive&amp;rsquo;s scope, either it should be inheriting by default (in which case you don&amp;rsquo;t want isolate scope), or you should bundle the properties that you can together in an object or two to keep the &lt;code&gt;scope&lt;/code&gt; definition nice and clean and promote readability of the HTML.&lt;/p&gt;

&lt;h1 id=&#34;toc_5&#34;&gt;5. Using the outside world instead of doing things the Angular way&lt;/h1&gt;

&lt;p&gt;{%img /images/angular-antipatterns/but-computers.png Aren&amp;rsquo;t we all nowadays? %}&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s really tempting, especially when first learning Angular, and directives in particular, to just write jQuery code like we always have that happens to be wrapped in an Angular directive.  While this is still probably better than rolling with no framework at all and creating a tangled mess, it indicates a basic ungrok of the Angular way.&lt;/p&gt;

&lt;p&gt;Things should be done in Angular, when they can.  Angular provides so much niceness in the form of built-in directives, services (&lt;code&gt;$window&lt;/code&gt;, &lt;code&gt;$timeout&lt;/code&gt;, &lt;code&gt;$http&lt;/code&gt; et al. wrap these things for you so you don&amp;rsquo;t have to worry about accidentally interfering with Angular&amp;rsquo;s internals!) that we should only reach for custom solutions when we have to (and believe me, you will - just think carefully before doing so).  Just wrapping jQuery code in a directive doesn&amp;rsquo;t do us any good, and creates complications when we need to start doing stuff like chucking &lt;code&gt;$scope.$apply&lt;/code&gt; into things.  So think things through, and do them the Angular way.&lt;/p&gt;

&lt;p&gt;Likewise dependencies that you had before (modules you are relying on etc.) should be refactored into e.g. factories for increased ease of use and testability.  If you have the time to use Angular into your project, you have the time to do this too.  Angular will reward you with layers of increased richness.&lt;/p&gt;

&lt;h1 id=&#34;toc_6&#34;&gt;Fin&lt;/h1&gt;

&lt;p&gt;I really hope that this article helps people avoid these bad behaviors, or at least see them when they come across them and refactor them into something better.&lt;/p&gt;

&lt;p&gt;Until next time, stay sassy Internet.  And &lt;a href=&#34;http://nathanleclaire.com&#34;&gt;consider subscribing to my mailing list&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nate&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Unit Testing Services in AngularJS for Fun and for Profit</title>
      <link>http://localhost:1313/posts/2014-04-12-unit-testing-services-in-angularjs-for-fun-and-for-profit</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/posts/2014-04-12-unit-testing-services-in-angularjs-for-fun-and-for-profit</guid>
      <description>

&lt;p&gt;{%img /images/unit-test-angularjs-service/jasmine.png Your new best friend. %}&lt;/p&gt;

&lt;p&gt;If there was a way to reduce the number of defects in the code you write (or manage), improve the quality and time to market of deliverables, and make things easier to maintain for those who come after you- would you do it?&lt;/p&gt;

&lt;p&gt;Right about now, especially given the content of the article, you might be sensing that I&amp;rsquo;m about to jump into the usual testing zealot rant.  And you&amp;rsquo;re right.&lt;/p&gt;

&lt;p&gt;How many times have you heard some variant on, &amp;ldquo;Writing tests isn&amp;rsquo;t as important as delivering finished code?&amp;rdquo;  If you&amp;rsquo;re like me, it&amp;rsquo;s way too many, and god help you if you&amp;rsquo;re working with no tests at all.  Programmers are human and we all make mistakes.  So test your code.  The number of times testing my code has helped me catch unforeseen issues before they became flat-out bugs, prevent future regressions, or simply architect better is pretty amazing.  And this is coming from a guy who used to hate writing tests for code.  &lt;em&gt;Hated&lt;/em&gt; it.&lt;/p&gt;

&lt;p&gt;I think that stemmed more from a lack of understanding how to do it than anything else.  When systems get complex and have a lot of moving parts is when it is most critical to test them, and that is also when it becomes the most difficult to test them.  Without an understanding of your tools (e.g. mocks) or why each piece is important, and especially with a lack of easily accessible examples, testing code can be really intimidating and frustrating.&lt;/p&gt;

&lt;p&gt;So what do you do?  You commit code without tests.  You are cowboy.  Cowboy no test.&lt;/p&gt;

&lt;p&gt;{%img /images/unit-test-angularjs-service/cowboy.png %}&lt;/p&gt;

&lt;p&gt;But as some of you probably know all too well, this is dangerous.  It&amp;rsquo;s like going on vacation in the Caribbean using your credit card.  Fun for a while, and everything seems great, until suddenly reality hits and &lt;a href=&#34;http://en.wikipedia.org/wiki/Red_Queen&#39;s_race&#34;&gt;it takes all the running you can do just to stay in the same place&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Fortunately Angular treats us really well as far as testing goes.  It just requires some additional explanation, since the quality of resources available for both Angular &lt;em&gt;and&lt;/em&gt; Jasmine is really not fantastic.  It&amp;rsquo;s better than a year ago, definitely, but not fantastic.&lt;/p&gt;

&lt;p&gt;So here I am doing a brain dump of sorts of what I know about testing services, which are part of the &lt;a href=&#34;http://nathanleclaire.com/blog/2014/03/15/angularjs-isnt-mvc-its-sdc/&#34;&gt;lifeblood&lt;/a&gt; of any Angular application.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Section 1: In Which I Proclaim &amp;ldquo;I love Dependency Injection!&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;When I first saw someone present on Angular, they got kind of hand-wavey about &lt;a href=&#34;http://en.wikipedia.org/wiki/Dependency_injection&#34;&gt;Dependency Injection&lt;/a&gt;.  &amp;ldquo;The way I see it, it&amp;rsquo;s basically magic and I don&amp;rsquo;t have to think about it.&amp;rdquo;  Ahhh.  Not what I like to hear.&lt;/p&gt;

&lt;p&gt;I get that it can be kind of scary, hearing people throw around jargon like injectors and providers and dependency injection like they&amp;rsquo;re nothing, but you can get it.  I know you can.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s simple.  Not easy, but simple.  When Angular runs the code that you define for a controller or a service, it looks at the parameters you have attached to the function and sets them correctly for that run based on their names.  Let&amp;rsquo;s say that you have something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;angular.module(&amp;quot;foo&amp;quot;).controller(&amp;quot;NavCtrl&amp;quot;, function ($scope, tabService) {
  // ...
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The order of the parameters on your function doesn&amp;rsquo;t matter.  You could just as easily have said &lt;code&gt;function (tabService, $scope)&lt;/code&gt; and both of those values would still be set correctly.  That&amp;rsquo;s a nice advantage in itself, and it&amp;rsquo;s why you see funny business like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;angular.module(&amp;quot;foo&amp;quot;).controller(&amp;quot;NavCtrl&amp;quot;, [
  &amp;quot;$scope&amp;quot;,
  &amp;quot;tabService&amp;quot;,
  function($scope, tabService) {
    // ...
  }
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s so that &lt;a href=&#34;http://en.wikipedia.org/wiki/Minification_%28programming%29&#34;&gt;minification&lt;/a&gt;, which renames all of your passed variables in functions, doesn&amp;rsquo;t blow up Angular&amp;rsquo;s dependency injection.  Angular knows how to handle this if you use the second form of notation.&lt;/p&gt;

&lt;p&gt;But why are we even messing with this at all?  It&amp;rsquo;s because if we inject the dependencies, we can control them from the outside world.  And this is eminently important for testing.&lt;/p&gt;

&lt;p&gt;This kind of thing (admittedly contrived for effect):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;function mungeSomeData(data) {
  var dataGetter, dataParser, dataTransformer;
  dataGetter = new DataGetter();
  dataParser = new DataParser();
  dataTransformer = data.isXML() ? new XMLDataTransformer() : new JSONDataTransformer();
  // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Doesn&amp;rsquo;t use Depdency Injection, and is a nightmare to test.  Minimizing surface area to test is so so important, and by writing code that way you make your surface area HUGE and slippery.&lt;/p&gt;

&lt;p&gt;Side note:  It is Angular convention to have a dollar sign (&lt;code&gt;$&lt;/code&gt;) in the front of the names of things that are both injected (&lt;code&gt;$scope&lt;/code&gt;, &lt;code&gt;$timeout&lt;/code&gt;, &lt;code&gt;$http&lt;/code&gt;) and built-in to Angular.  If you see &lt;code&gt;$scope&lt;/code&gt; being used in the link function of a directive, that is both wrong and confusing since parameters are &lt;em&gt;passed&lt;/em&gt; to the link function of directives, not injected.  Please Hulk out when you see this and correct the code.  If you are using &lt;code&gt;vim&lt;/code&gt; a simple &lt;code&gt;:%s/$scope/scope/&lt;/code&gt; (or perhaps just &lt;code&gt;:s&lt;/code&gt; in visual mode if you have instances of &lt;code&gt;$scope&lt;/code&gt; that &lt;em&gt;shouldn&amp;rsquo;t&lt;/em&gt; be replaced) will do the trick.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q: So what does that have to do with unit testing AngularJS services, Nate?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It has everything to do with testing services since they are injected.  So, in unit testing a service, you can control precisely what goes on in one in addition to all of its dependencies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q: Will you show us some actual Jasmine code already?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Getting there.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Section 2: In Which I Write an Actual Service, and a Unit Test for It&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s say that I&amp;rsquo;m writing an Angular app which interacts with the Reddit API.  Since we know that services are the part which Angular uses to interact with the outside world, we will write a service to handle our needs.&lt;/p&gt;

&lt;p&gt;We are going to write one with a method &lt;code&gt;getSubredditsSubmittedToBy(user)&lt;/code&gt; which returns a list of which subreddits a user has submitted to recently.  We can use &lt;a href=&#34;https://egghead.io/lessons/angularjs-chained-promises&#34;&gt;promise chaining&lt;/a&gt; to achieve this (aggregating the big glob of JSON returned by the API call) so that our controller stays super lean.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Writing the Service&lt;/h2&gt;

&lt;p&gt;Usage (inside controller):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;userService.getSubredditsSubmittedToBy(&amp;quot;yoitsnate&amp;quot;).then(function(subreddits) {
  $scope.subreddits = subreddits;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So nice and readable!&lt;/p&gt;

&lt;p&gt;Our service looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;angular.module(&amp;quot;reddit&amp;quot;).service(&amp;quot;userService&amp;quot;,
function($http) {
  return {
    getSubredditsSubmittedToBy: function(user) {
      return $http.get(&amp;quot;http://api.reddit.com/user/&amp;quot; + user + &amp;quot;/submitted.json&amp;quot;).then(function(response) {
        var posts, subreddits;

        posts = response.data.data.children;

        // transform data to be only subreddit strings
        subreddits = posts.map(function(post) {
          return post.data.subreddit;
        });
        
        // de-dupe
        subreddits = subreddits.filter(function(element, position) {
          return subreddits.indexOf(element) === position;
        });

        return subreddits;
      });
    }
  };
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Writing the test&lt;/h2&gt;

&lt;p&gt;We will write a test using &lt;a href=&#34;http://pivotal.github.io/jasmine/&#34;&gt;Jasmine&lt;/a&gt;.  Jasmine is a Behavior-Driven-Development framework, which is sort of a roundabout way of saying that our tests include descriptions of the sections that they are testing and what they are supposed to do.  This is done using nested &lt;code&gt;describe&lt;/code&gt; and &lt;code&gt;it&lt;/code&gt; blocks, which look really weird at first (something about a function as short as &lt;code&gt;it&lt;/code&gt; is just unsettling to me ;) ) but can be helpful in understanding what the test is intended to, well, test.&lt;/p&gt;

&lt;p&gt;This is quite helpful as sometimes large elaborate codebases have large elaborate tests and it can be hard to figure out what&amp;rsquo;s what.  For instance, in PHPUnit, this kind of &amp;ldquo;built-in documentation&amp;rdquo; is spread out and mostly optional, and makes complex unit tests a bit trickier to read.&lt;/p&gt;

&lt;p&gt;Using Karma we first tell it what module we&amp;rsquo;re working in (&lt;code&gt;&amp;quot;reddit&amp;quot;&lt;/code&gt;), run an inject function to set up our dependencies and get the service under test (this allows us access to Angular&amp;rsquo;s injector so we can set local test variables), then run an actual test in the &lt;code&gt;it&lt;/code&gt; block.&lt;/p&gt;

&lt;p&gt;Notice that in the &lt;code&gt;inject&lt;/code&gt; method we inject in &lt;code&gt;_foo_&lt;/code&gt;, with an underscore on either side of the name of the actual service, so that we can set it in the outer &lt;code&gt;describe&lt;/code&gt; closure.  This is by design, as the Angular maintainers foresaw (or discovered) that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var redditService;
beforeEach(inject(redditService) {
  redditService = redditService;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would result in an error.&lt;/p&gt;

&lt;p&gt;So use &lt;code&gt;_underscoreNotation_&lt;/code&gt; to get the service that you want to test :)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;use strict&amp;quot;;

describe(&amp;quot;reddit api service&amp;quot;, function () {
  var redditService, httpBackend;

  beforeEach(module(&amp;quot;reddit&amp;quot;));

  beforeEach(inject(function (_redditService_, $httpBackend) {
    redditService = _redditService_;
    httpBackend = $httpBackend;
  }));

  it(&amp;quot;should do something&amp;quot;, function () {
    httpBackend.whenGET(&amp;quot;http://api.reddit.com/user/yoitsnate/submitted.json&amp;quot;).respond({
        data: {
          children: [
            {
              data: {
                subreddit: &amp;quot;golang&amp;quot;
              }
            },
            {
              data: {
                subreddit: &amp;quot;javascript&amp;quot;
              }
            },
            {
              data: {
                subreddit: &amp;quot;golang&amp;quot;
              }
            },
            {
              data: {
                subreddit: &amp;quot;javascript&amp;quot;
              }
            }
          ]
        }
    });
    redditService.getSubredditsSubmittedToBy(&amp;quot;yoitsnate&amp;quot;).then(function(subreddits) {
      expect(subreddits).toEqual([&amp;quot;golang&amp;quot;, &amp;quot;javascript&amp;quot;]);
    });
    httpBackend.flush();
  });

});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our mock data here mimics the actual data returned by the Reddit API, but only enough that we get the necessary bits of structure in place and can account for, say, the duplicate case.  If we wanted to add different functionality for different pieces of the API, or of this call, we could just define new &lt;code&gt;httpBackend&lt;/code&gt; responses in new &lt;code&gt;it&lt;/code&gt; blocks and test things the same way without having to worry about the bits of the API response we don&amp;rsquo;t need.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;The provider idiom&lt;/h2&gt;

&lt;p&gt;Unfortunately my simple example above breaks down a little bit if we have additional dependencies on other services in our service under test.  What do we do in this case?  We need to control these injected parameters, and to do so we use &lt;code&gt;$provide&lt;/code&gt;.  &lt;code&gt;$provide&lt;/code&gt; can take the name of e.g. a service and dictate what to provide for it.  In doing so we can, say, use a spy object instead of the &amp;ldquo;real deal&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;beforeEach(module(function($provide) {
  $provide.value(&amp;quot;myDependentService&amp;quot;, serviceThatsActuallyASpyObject);
}));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that &lt;code&gt;$provide&lt;/code&gt; should always be called before your call to &lt;code&gt;$inject&lt;/code&gt;, since the former dicates what the latter should use.&lt;/p&gt;

&lt;h1 id=&#34;toc_5&#34;&gt;Section 3: Helpful Tips&lt;/h1&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;Stutter.&lt;/h2&gt;

&lt;p&gt;If you change a &lt;code&gt;describe&lt;/code&gt; or &lt;code&gt;it&lt;/code&gt; block to &lt;code&gt;ddescribe&lt;/code&gt; or &lt;code&gt;iit&lt;/code&gt; respectively &lt;a href=&#34;http://karma-runner.github.io/0.12/index.html&#34;&gt;Karma&lt;/a&gt; (&lt;a href=&#34;http://nathanleclaire.com/blog/2013/12/13/how-to-unit-test-controllers-in-angularjs-without-setting-your-hair-on-fire/&#34;&gt;Angular&amp;rsquo;s test runner&lt;/a&gt;) will run only that block.  This is called &lt;a href=&#34;https://github.com/davemo/jasmine-only&#34;&gt;stuttering&lt;/a&gt; and it is very useful if you don&amp;rsquo;t want to run your entire test suite every time, as the larger the codebase gets the longer this will take to do.&lt;/p&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;Don&amp;rsquo;t be afraid to rearrange code that is hard to test&lt;/h2&gt;

&lt;p&gt;If you can move code around to make it easier to test without changing other things, DO IT (in a general sense I find that this eases readability and maintainability too).  For instance I found that in one instance in a service a colleague was relying on a function call that was both unneccesary and confusing, and ultimately broke the chain of promises.  So I deleted the function definition and inlined the code it contained.  The resulting code was a bit easier to read and test.&lt;/p&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;Cheat.&lt;/h2&gt;

&lt;p&gt;You can create stubbed objects quite easily in JavaScript, so if there&amp;rsquo;s no need to introduce the extra complexity of a spy (see next section), then do so.  For example, if you can just return &lt;code&gt;4&lt;/code&gt; from a method every time you call it instead of counting the elements or whatever it usually does, then do so.&lt;/p&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;Do you need a Spy?&lt;/h2&gt;

&lt;p&gt;If you need more power / assertions out of the last point, Jasmine provides Spies for you to use.&lt;/p&gt;

&lt;p&gt;They&amp;rsquo;re a little out of scope for this article, but they should provide you all of the flexibility you need for faking data / objects / calls and testing what was faked.&lt;/p&gt;

&lt;p&gt;For a good reference, see this &lt;a href=&#34;http://tobyho.com/2011/12/15/jasmine-spy-cheatsheet/&#34;&gt;Jasmine spy cheatsheet&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_10&#34;&gt;Or just use &lt;code&gt;$q&lt;/code&gt; / manually manage promises&lt;/h2&gt;

&lt;p&gt;I found myself in kind of a funny situation at work recently.  We use Angular for structure but the codebase we are working on has a lot of pre-existing bits/modules that were not really moved over to Angular fully due to intense deadline pressure.  So, we find ourselves making XMLHttpRequests outside of &lt;code&gt;$http&lt;/code&gt; land, but the original programmers still return promises from their outside world modules for us to use (it&amp;rsquo;s kind of an odd setup that we don&amp;rsquo;t really have time to refactor).  So, I just caused the functions that take care of those API calls return promises that I control using &lt;code&gt;$q&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;var mockPromise;
mockDeferred = $q.defer();
someSpyObj.methodThatReturnsAPromise.andCallFake(function () {
  return mockDeferred.promise;
});
mockDeferred.resolve({
  things: &amp;quot;foo&amp;quot;,
  otherThings: &amp;quot;bar&amp;quot;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_11&#34;&gt;Conclusion.&lt;/h1&gt;

&lt;p&gt;Jasmine tests are pretty quick to write once you get the hang of them.  Seriously guys, there&amp;rsquo;s no excuse.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://blog.codinghorror.com/coding-for-violent-psychopaths/&#34;&gt;violent psychopath who ends up maintaining your code&lt;/a&gt; will thank you.  Or at least not murder you.&lt;/p&gt;

&lt;p&gt;Until next time, stay sassy Internet, and &lt;a href=&#34;http://nathanleclaire.com&#34;&gt;consider subscribing to my blog&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nathan&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>AngularJS isn&#39;t MVC, it&#39;s SDC</title>
      <link>http://localhost:1313/posts/2014-03-15-angularjs-isnt-mvc-its-sdc</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/posts/2014-03-15-angularjs-isnt-mvc-its-sdc</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;Intro&lt;/h1&gt;

&lt;p&gt;{%img /images/notmvc/angular-homepage-old.gif %}&lt;/p&gt;

&lt;p&gt;I first started learning AngularJS because I was interested in exploring the world of MV&amp;#42; JavaScript frameworks for the client side.  There was something intruiging and exciting happening about a year or two ago in that space, as several JS frameworks started to get some steam and critical mass and the mainstream of client-side development (even those boring &lt;a href=&#34;http://www.hanselman.com/blog/501DevelopersFamilyAndExcitementAboutTheCraft.aspx&#34;&gt;5:01 developers&lt;/a&gt; couldn&amp;rsquo;t ignore the zeitgeist anymore) seemed to wake up and realize that maybe there was a need for something more than just vanilla jQuery in applications where everything was spiraling way out of control.&lt;/p&gt;

&lt;p&gt;So I started looking into Angular for the myriad reasons you usually hear people cite as a reason for using it.  It was backed by Google.  It was easy to get going quickly.  The quality of documentation and tutorials, though not fantastic, was starting to improve relative to Ember or more obscure frameworks.  It was fun.&lt;/p&gt;

&lt;p&gt;My first foray went down in flames.&lt;/p&gt;

&lt;p&gt;{%img /images/notmvc/javascript.png %}&lt;/p&gt;

&lt;p&gt;I fell into a common Angular antipattern (I may discuss Angular antipatterns more in a future article) where I stuffed everything into the controller.  Services and directives looked a little scary, and required learning esoteric things like what the meaning of &lt;code&gt;@&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, and &lt;code&gt;=&lt;/code&gt; was in a directive, and instead I saw fit to simply stuff everything into &lt;code&gt;$scope&lt;/code&gt; and coordinate activities using event broadcasting and listening.&lt;/p&gt;

&lt;p&gt;That project became so un-fun to work on that I just stopped.  I had dug myself into a hole deeper than I would ever get out of without a complete rewrite.&lt;/p&gt;

&lt;p&gt;Fortunately, partially through writing about Angular a lot, I eventually wised up.&lt;/p&gt;

&lt;p&gt;I learned that Angular is structured in some ways that are similar to what we have experienced before, but it also hearkens a little bit to the future of the client side (see &lt;a href=&#34;http://www.w3.org/TR/components-intro/&#34;&gt;Web Components&lt;/a&gt;).  And because of that, it had a little bit of new stuff too that threw me.&lt;/p&gt;

&lt;p&gt;You may be used to the Model View Controller pattern- but that&amp;rsquo;s not what Angular is.   A subsection of it kind of looks like that, but if you take a step back you will see a bigger picture emerge.&lt;/p&gt;

&lt;p&gt;Angular is Service, Directive, Controller.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;The Angular Way&lt;/h1&gt;

&lt;p&gt;Angular is all about testability, and testability mandates that we be able to break our application into components.  In most cases, monoliths are considered harmful.  You probably understand why if you&amp;rsquo;ve ever worked on one.  Things become too brittle and easy to break.  They become tightly coupled.  It&amp;rsquo;s impossible to change codes without introducing bugs in unrelated places.  And so on.&lt;/p&gt;

&lt;p&gt;Angular draws lines between separate parts of the architecture so that you can avoid many of these headaches.  In particular, dependency injection treats us well, as we rely on Angular&amp;rsquo;s injector to provide us with the things that we need instead of getting them ourselves.  This also allows us more control over how they are provided, which eases testing significantly (the developer has a smaller surface area that he needs to control).&lt;/p&gt;

&lt;p&gt;Most applications use these underlying principles to do three things: Retrieve, process, or send out data (usually communicating with the &amp;ldquo;outside world&amp;rdquo; such as a database or API), present (display) that data to the user in a useful way, and coordinate the general state of the application (this includes features such as routing).&lt;/p&gt;

&lt;p&gt;The first things that we mentioned, handling data, is the job of services.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Services&lt;/h2&gt;

&lt;p&gt;The main point of services is to dictate how data flows into or out of your application, not within it.  If you are talking to the outside world, this is a perfect use case for a service.  Controllers use methods and data provided by these services to update properties on &lt;code&gt;$scope&lt;/code&gt;, which in turn dictates how the DOM changes when a new digest cycle hits.&lt;/p&gt;

&lt;p&gt;When I was new to Angular, I flubbed this.  In particular the difference between &lt;a href=&#34;http://stackoverflow.com/questions/15666048/angular-js-service-vs-provider-vs-factory&#34;&gt;services and factories&lt;/a&gt; wasn&amp;rsquo;t clear to me, so I avoided them.  Instead I made &lt;code&gt;$http&lt;/code&gt; calls inside of my controllers, which ended up turning my controllers into a confused mess of business and application logic.&lt;/p&gt;

&lt;p&gt;This is &lt;em&gt;NOT&lt;/em&gt; the way to go.  Instead, anything that involves setting, retrieving, or processing data should happen in services.  The leaner that your controllers are, the better.&lt;/p&gt;

&lt;p&gt;Services should NEVER manipulate &lt;code&gt;$scope&lt;/code&gt;.  That is the job of the controller.  If you need to change values in &lt;code&gt;$scope&lt;/code&gt; based on the result of, say, an AJAX call, use &lt;a href=&#34;http://docs.angularjs.org/api/ng/service/$q&#34;&gt;promises&lt;/a&gt;.  Check out &lt;a href=&#34;http://nathanleclaire.com/blog/2014/01/04/5-smooth-angularjs-application-tips/&#34;&gt;this blog article I wrote&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Directives&lt;/h2&gt;

&lt;p&gt;Directives are definitely one of the most confusing parts of AngularJS to a newcomer.  The prospect of writing your own is intimidating.  Especialy when I first started learning, the quality of available documentation and tutorials for them was not very high (this has improved a lot in the last year or so though).&lt;/p&gt;

&lt;p&gt;But directives, for all that they intimidate the newbie, promise a land of amazing power.  Most people who are coming to Angular from a jQuery way of thinking run the risk of getting themselves in trouble by performing DOM manipulation outside of directives.  They are so used to the old way of doing things, where an element can be accessed willy-nilly by any piece of client side code that needs it.&lt;/p&gt;

&lt;p&gt;Directives have several different forms but usually they are either completely new HTML elements, or attributes that you can throw on existing elements, to perform some kind of DOM manipulation.  They can have their own scope and they can be reused, which is one of their most useful properties.&lt;/p&gt;

&lt;p&gt;In some ways we are all still fighting our way towards manifesting in reality the Platonic ideal of what directives represent, e.g. I should never have to rewrite a calendar widget if it is already existing, I should just be able to use a &lt;code&gt;&amp;lt;calendar&amp;gt;&amp;lt;/calendar&amp;gt;&lt;/code&gt; element and set properties to customize it the way that I like.  But in other ways this &lt;em&gt;is&lt;/em&gt; approaching reality, especially as Angular grows in popularity and as systems such as Bower become more useful and flexible.&lt;/p&gt;

&lt;p&gt;Directives promise no more spaghetti jQuery code (do they deliver?).  Instead, everything gets broken out into modular components that are far easier to test.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;What about Views?&lt;/h2&gt;

&lt;p&gt;In a lot of ways the &amp;ldquo;view&amp;rdquo; is the same as it&amp;rsquo;s ever been, modulo directives which we have already discussed.  &lt;code&gt;ngView&lt;/code&gt; promises new, snappy navigation, which is exciting.  Views in AngularJS do the same job they always have and they do it well.  Technically I probably should have called this article &amp;ldquo;Angular isn&amp;rsquo;t MVC, it&amp;rsquo;s SDVC&amp;rdquo; but I didn&amp;rsquo;t think it had the same ring to it.&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Controllers&lt;/h2&gt;

&lt;p&gt;Finally we discuss the piece that ties it all together.  The controller.&lt;/p&gt;

&lt;p&gt;Without controllers, directives are useless.  Controllers set properties on &lt;code&gt;$scope&lt;/code&gt; for directives to use.&lt;/p&gt;

&lt;p&gt;Likewise, without controllers, services are useless.  They are just objects for playing with data.  Therefore controllers are like the &amp;ldquo;glue&amp;rdquo; of your application.&lt;/p&gt;

&lt;p&gt;Controllers should be as lean and lightweight as possible.  It makes it easier to see what&amp;rsquo;s going on, and it makes it easier to test them.&lt;/p&gt;

&lt;h1 id=&#34;toc_6&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Angular is a new framework and it requires a new way of thinking.  Trying to apply the old patterns, or being inflexible and unwilling to learn about the different components of Angular and how they fit together will get you in trouble.&lt;/p&gt;

&lt;p&gt;Everyone likes jQuery because jQuery is a useful tool.  It is simple and it allows you to build whatever you want.  It isn&amp;rsquo;t very opinionated about the way you do so (in fact it provides you with a lot of options).&lt;/p&gt;

&lt;p&gt;Angular, on the other hand, is like a house.  It already has a framework and a foundation for how to do things, you just have to furnish it.  Trying to use Angular like a hammer will only result in tears.  It is like trying to use a house to build a house.&lt;/p&gt;

&lt;p&gt;I hope that this essay may help to clear some things up to people who are new to Angular.&lt;/p&gt;

&lt;p&gt;Until next week, stay sassy Internet.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nathan&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>