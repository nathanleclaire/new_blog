<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on nathan leclaire </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:1313/index.xml</link>
    
    
    
    <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
    
    <item>
      <title>Commit Every Day, Blog Every Week</title>
      <link>http://localhost:1313/posts/2013-10-16-commit-every-day</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/posts/2013-10-16-commit-every-day</guid>
      <description>

&lt;p&gt;It is with the greatest of pride that I am announcing today my newest initiative.  I am going to write at least one blog post every week for the next 52 weeks, and I am going to make at least one commit every day- preferably to Github, and most likely on my own personal projects, but bonus points would be given for committing to community projects.  This effort is more than a little inspired by Jennifer Dewalt&amp;rsquo;s impressive &lt;a href=&#34;http://jenniferdewalt.com/index.html&#34;&gt;180 websites in 180 days&lt;/a&gt; project.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Why Blog?&lt;/h1&gt;

&lt;p&gt;Far too long I&amp;rsquo;ve toiled away in silence when I could be putting my thoughts, experiences, and gleanings out on the web for all to share.  Many times I&amp;rsquo;ve felt the elation of working through a challenging programming issue and having no one to share my triumph with.  With blogging, I hope to alleviate that pain and become a more active member of the business and hacker communities.  I love writing.  Grammar, punctuation, and vocabulary have always come fairly naturally to me as an avid reader.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a well noted phenomenon, too, that teaching something to other people will help you get better at it.  This is also something that I hope will benefit me if I force myself to blog regularly.  For instance, lately I&amp;rsquo;ve been doing a lot of coding questions and brushing up on my Java/C/C++ (I learned them long ago, then got embarassingly out of practice) and I hope to solidify some of the core concepts by writing about them.&lt;/p&gt;

&lt;p&gt;Also, I&amp;rsquo;d be geeked to get featured on &lt;a href=&#34;https://news.ycombinator.com&#34;&gt;Hacker News&lt;/a&gt;, even if only a few people saw and they were their typical critical selves about it :D&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Why Commit?&lt;/h1&gt;

&lt;p&gt;{% img /images/git.png Because it&amp;rsquo;s a joy? %}&lt;/p&gt;

&lt;p&gt;I love open source and everything about it.  I&amp;rsquo;ve learned so much from reading the source code to things like &lt;a href=&#34;https://github.com/coopernurse/gorp&#34;&gt;gorp&lt;/a&gt; and the Golang libraries that I feel compelled to give back in some way.  At first I will start small with my own projects, but soon I intend to veer into other open source projects as a way of sharpening my coding chops and paying it forward to the community that, in many ways, made me who I am today.  One learns the hard way how frustrating it is when you can&amp;rsquo;t fork, modify, or browse the source code of the software that you are using or the website you are accessing.  Working in the proprietary world makes that very clear.&lt;/p&gt;

&lt;p&gt;Linux, for instance, is a project for which I have the utmost respect, and the awesomeness of it continues to blow my mind to this day.  The ideals and spirit it embodies are something that I can really get behind, and the &amp;ldquo;Bazaar&amp;rdquo; nature of the operating system makes for a foundation that leads to a development environment that&amp;rsquo;s unparalleled (not to mention performs great on a server).  I defy any contenders to make an honest argument in favor of &lt;code&gt;homebrew&lt;/code&gt; over &lt;code&gt;apt-get&lt;/code&gt;, for instance.  Don&amp;rsquo;t get me wrong- I love &lt;code&gt;homebrew&lt;/code&gt; (also notably &lt;a href=&#34;https://github.com/mxcl/homebrew&#34;&gt;open source&lt;/a&gt;!)- but it&amp;rsquo;s clear that Linux package management is on a whole &amp;lsquo;nother playing field, and that starts from the ground up.  That can only be explained by the community and attitudes that insist &amp;ldquo;If you&amp;rsquo;re not satisfied, fork it yourself&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Last but not least, seeing my Github commit-tile graph lack so much green (although I know I am committing to closed source software at my day job) makes me kind of sad.&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Why Do Them With Such Fierce Regularity?&lt;/h1&gt;

&lt;p&gt;{% img /images/jerryseinfeld.jpeg It worked for him. %}&lt;/p&gt;

&lt;p&gt;Everyone by now is most likely aware (if you&amp;rsquo;re not, you&amp;rsquo;re about to be) of the &lt;a href=&#34;http://dontbreakthechain.com&#34;&gt;Jerry Seinfeld Self-Improvement Program&lt;/a&gt;.  Essentially, it is a self-improvement technique attributed to Jerry Seinfeld where you pick a goal and make small steps every day towards meeting that goal.  Jerry Seinfeld wanted to become a better comedian, so he made it a goal to come up with a good joke every day and and marked the day off on his calender with a big black &amp;ldquo;X&amp;rdquo;.  The chain of &amp;ldquo;X&amp;rdquo;es served to reinforce his sense of making progress, and also as a commitment to continue forward in spite of the possibility (or reality) of failure and disappointment.  I find that kind of tenacity extremely admirable, and I think it will help me hone various skills in a variety of ways.&lt;/p&gt;

&lt;p&gt;Thanks for tuning in and I&amp;rsquo;ll catch you next week, where I promise there will be much more code involved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why the async Library for Node.js is So Freaking Awesome</title>
      <link>http://localhost:1313/posts/2014-01-31-why-the-async-library-for-node-dot-js-is-so-freaking-awesome</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/posts/2014-01-31-why-the-async-library-for-node-dot-js-is-so-freaking-awesome</guid>
      <description></description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://localhost:1313/about</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/about</guid>
      <description>&lt;p&gt;{%img /images/naaaate.jpg %}&lt;/p&gt;

&lt;p&gt;Hi there!&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m Nathan LeClaire and I &amp;lt;3 technology.  When I was 14 or so I started to learn programming on a TI-83+ calculator so I could do algebra problems more quickly.  This, coupled with a reading of Michael Crichton&amp;rsquo;s excellent book &lt;a href=&#34;http://www.amazon.com/gp/product/0061703087/ref=as_li_tf_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0061703087&amp;amp;linkCode=as2&amp;amp;tag=natlecwrionbu-20&#34;&gt;Prey&lt;/a&gt; that ignited an interest in studying computational systems which mimicked biology, led me on a path where I began to learn C++, Python, Linux and more.  To this day, the very notion of AI and systems such as artificial neural networks (especically given how much data is available in the modern age!) is fascinating to me.&lt;/p&gt;

&lt;p&gt;I programmed on and off for a few years after taking in more in high school, mostly about Java, and eventually majored in Philosophy for college.  I love analyzing arguments and discussions of great philosophical thinkers all the way from Plato to Leibniz to Dennett.  Studying philosophy made me a better thinker and communciator as I realized that no line of argument was perfect.&lt;/p&gt;

&lt;p&gt;When I graduated from college, began interning at &lt;a href=&#34;http://21cparks.org&#34;&gt;21st Century Parks&lt;/a&gt; and I stumbled across a rekindled enjoyment of programing and technology.  When I started maintaining their website and the website of my band &lt;a href=&#34;http://funnybonesbeats.org&#34;&gt;Funny Bones&lt;/a&gt;, I knew I was onto something.  Thus began my career in technology.&lt;/p&gt;

&lt;p&gt;I continue to experiment with exciting new technologies like &lt;a href=&#34;http://golang.org&#34;&gt;Go&lt;/a&gt; and &lt;a href=&#34;http://angularjs.org&#34;&gt;AngularJS&lt;/a&gt; in my free time, as well as writing about them, computer science, and some old favorites such as Python in my blog.&lt;/p&gt;

&lt;p&gt;Areas of interest for me in computing include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scalability &amp;amp; Distributed Systems&lt;/li&gt;
&lt;li&gt;Machine Learning, Artificial Neural Nets, Genetic Algorithms/Programming etc.&lt;/li&gt;
&lt;li&gt;Security (reverse engineering exploits and network vulnerabilities)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Though I am currently employed I am always interested in talking about other opportunities, particularly involving the interests listed above and in the following cities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New York, NY&lt;/li&gt;
&lt;li&gt;San Francisco, CA&lt;/li&gt;
&lt;li&gt;Portland, OR&lt;/li&gt;
&lt;li&gt;Denver, CO&lt;/li&gt;
&lt;li&gt;Austin, TX&lt;/li&gt;
&lt;li&gt;Berlin, Germany&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I enjoy getting e-mail, you should &lt;a href=&#34;mailto:nathanleclaire@gmail.com&#34;&gt;send me one&lt;/a&gt;.  Thanks for visiting!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I Love Hackathons, Long Live Hackathons. I Hate Hackathons, Hackathons Must Die.</title>
      <link>http://localhost:1313/posts/2014-01-18-i-love-hackathons-i-hate-hackathons</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/posts/2014-01-18-i-love-hackathons-i-hate-hackathons</guid>
      <description>

&lt;p&gt;{%img /images/mhacks/crowd.jpeg A pic I snapped of some of the attendees. %}&lt;/p&gt;

&lt;p&gt;This weekend I&amp;rsquo;ve been attending &lt;a href=&#34;http://mhacks.org/&#34;&gt;MHacks&lt;/a&gt;, which is an event in Detroit geared mostly towards college students.  It is sponsored by a variety of companies including &lt;a href=&#34;http://www.quickenloans.com&#34;&gt;Quicken Loans&lt;/a&gt;, &lt;a href=&#34;http://twilio.com&#34;&gt;Twilio&lt;/a&gt;, &lt;a href=&#34;http://yahoo.com&#34;&gt;Yahoo!&lt;/a&gt;, &lt;a href=&#34;http://mashery.com&#34;&gt;Mashery&lt;/a&gt;, &lt;a href=&#34;http://apple.com&#34;&gt;Apple&lt;/a&gt; and many more.  For those of you unfamiliar with the concept, a hackathon is an event where (mostly) young people interested in technology get together to &lt;a href=&#34;http://stallman.org/&#34;&gt;hack&lt;/a&gt; (not the naughty kind of hacking) on side projects of their choice and perhaps even compete with each other to win some sweet prizes, or just glory and the respect of their peers.  The attendees are typically mostly men, although I feel that MHacks&amp;rsquo; female attendance and culture is very positive compared to some other events I&amp;rsquo;ve experienced in the past).  Sleep deprivation, stimulants, and indoor activities are encouraged.  Starting to get the picture yet?&lt;/p&gt;

&lt;p&gt;Something that strikes me about MHacks in particular as interesting is that the sponsors are paying for so much stuff that it might just blow your mind (attendance is free).  It&amp;rsquo;s set off a weird mix of reactions in me, so I decided to write about it.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Long Live Hackathons&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;ve had so many nerd chills this weekend it&amp;rsquo;s ridiculous.  I felt like a little kid in a candy store when I saw someone rocking the first pair of &lt;a href=&#34;http://www.google.com/glass/start/&#34;&gt;Google Glass&lt;/a&gt; that I had ever seen in real life.  We opted to work on a &lt;a href=&#34;http://dogecoin.com/&#34;&gt;Dogecoin&lt;/a&gt; site where you can buy them with regular old credit and debit cards (currently you can only buy them with Bitcoins), and the warm reactions we got were fantastic.  Historically peoples&amp;rsquo; eyes have glazed over when I even so much as mention Bitcoin or cyptocurrency, at least until recently.&lt;/p&gt;

&lt;p&gt;In a lot of ways, being here is like living in the future now.  Everyone is forward-thinking technologically and interested in doing things that haven&amp;rsquo;t really been done before.  I had the great fortune of getting to try on an &lt;a href=&#34;http://www.oculusvr.com/&#34;&gt;Oculus Rift&lt;/a&gt;, something I&amp;rsquo;ve wanted to try for a long time, and I have to say that it feels like the future of gaming.  The developer working on it had it rigged up to an XBox Kinect and tracking my hand motions, which appeared as spheres in the little simulation I was immersed in.  The team working on it wants to use it to visualize and manipulate large amounts of data in realtime.  Run that one by &lt;a href=&#34;http://www.edwardtufte.com/tufte/&#34;&gt;Edward Tufte&lt;/a&gt; and get back to me, will ya?&lt;/p&gt;

&lt;p&gt;The money behind the conference was out in full effect, with sponsors manning booths on prime real estate and giving away copious amounts of swag, evangelizing their products and prowess as employers as students shy and outgoing alike stopped by to chat.  We hear all the time nowadays about how the Millenials are having trouble entering the workforce but in the reality distortion field here that becomes increasingly hard to believe (&lt;code&gt;&amp;lt;snark&amp;gt;&lt;/code&gt; they must not be trying hard enough &lt;code&gt;&amp;lt;/snark&amp;gt;&lt;/code&gt;) Pretty much every company I talked to told me they are hiring like mad (though granted, those are the types of companies that would be sponsoring a hackathon).&lt;/p&gt;

&lt;p&gt;I also can&amp;rsquo;t resist posting this gem, scrawled on the whiteboarded walls in the main area like something from Randall Monroe&amp;rsquo;s wildest lucid dreams:&lt;/p&gt;

&lt;p&gt;{%img /images/mhacks/twerking-algorithm.jpeg %}&lt;/p&gt;

&lt;p&gt;The authors are working on an app that will evaluate your twerking ability (you keep your phone in your pocket while you twerk) and rank results against your friends&amp;rsquo;.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Hackathons Must Die&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;ve been doing a lot of reflection on the state of the technology industry industry and the ugly sense of self-entitlement / willful ignorance that a lot of people live in lately.  Though many of the people I&amp;rsquo;ve met this weekend are great folks, even if some of them are a bit socially awkward (not to keep perpetuating that stereotype or anything), I can&amp;rsquo;t help but shake this feeling of general existential doom and gloom that has been hanging over me like a black cloud lately.  I suppose it&amp;rsquo;s because as much as you can see the great side of what people are capable of, you can see just as much of the not so great side as well.&lt;/p&gt;

&lt;p&gt;For starters, I have a hard time getting behind an event that pretty much gleefully encourages you to disregard your physical health and well-being for a weekend of get-some-small-stuff-done-but-also-goof-off-a-lot-but-still-feel-like-you&amp;rsquo;re-working-hard.  I &lt;em&gt;really&lt;/em&gt; hate this trend in the technology industry (sacrificing your physical well-being for&amp;hellip; some &amp;ldquo;greater&amp;rdquo; goal?) because it&amp;rsquo;s crazy harmful and it should be considered as such.  It&amp;rsquo;s the same reason why I really dislike when companies offer free soda as a perk at the office, put eloquently into words by Patrick Mackenzie (talking about free soda as a perk in &lt;a href=&#34;http://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/&#34;&gt;Don&amp;rsquo;t Call Yourself a Programmer&lt;/a&gt;):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are other benefits like “free soda”, “catered lunches”, “free programming books”, etc.  These are social signals more than anything else.  When I say that I’m going to buy you soda, that says a specific thing about how I run my workplace, who I expect to work for me, and how I expect to treat them.  (It says “I like to move the behavior of unsophisticated young engineers by making this job seem fun by buying 20 cent cans of soda, saving myself tens of thousands in compensation while simultaneously encouraging them to ruin their health.”  And I like soda.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, suffice it to say that I&amp;rsquo;m not too into a culture of sleep deprivation and health-ruining for no good reason.  And I wrote this after standing in line to get free Insomnia Cookies.  Maybe that makes me a hypocrite, or maybe that makes me painfully self-aware. You decide.  Additionally, on the attendee/student side, I&amp;rsquo;d be lying if I said I wasn&amp;rsquo;t picking up on a little bit of a pampered / self-entitled / whiny vibe from some people considering the generally high quality of the event. But there&amp;rsquo;s a few bad apples in every bunch&amp;hellip;&lt;/p&gt;

&lt;p&gt;There aren&amp;rsquo;t &lt;em&gt;that&lt;/em&gt; many projects working on problems that are so first world it&amp;rsquo;s painful, but naturally there are a few.  Generally the vibe of a self-directed hackathon reinforces my belief in the maxim that mankind&amp;rsquo;s appetite for distractions is pretty much endless.  Ironically, it&amp;rsquo;s pretty hard to focus here.  Everyone&amp;rsquo;s attention is on snacks or networking or just generally being distracted by the noise levels and crowded spaces instead of working on their project in a manner that&amp;rsquo;s likely to be sustainable.&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Don&amp;rsquo;t let me being a negative nancy get you down too much.  I love these kind of events but I&amp;rsquo;m a sleepy bear today, and a little grumpy.  I&amp;rsquo;m probably just irritable since getting and configuring an SSL cert has been more arduous than I had anticipated.  Just another example of the fact that I don&amp;rsquo;t know what I don&amp;rsquo;t know and I don&amp;rsquo;t know that I don&amp;rsquo;t know it.&lt;/p&gt;

&lt;p&gt;Until next time, stay sassy Internet.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nathan&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>5 Cool Unix Hacks For Fun and Productivity</title>
      <link>http://localhost:1313/posts/2013-10-27-5-cool-unix-hacks-for-fun-and-productivity</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/posts/2013-10-27-5-cool-unix-hacks-for-fun-and-productivity</guid>
      <description>

&lt;p&gt;In my workflow I am always looking for ways to be more productive, and to have more fun while developing.  There&amp;rsquo;s nothing quite like the feeling of flying through a sequence of commands in &lt;code&gt;bash&lt;/code&gt; that you know would take your peers twice as long to execute.  Have you ever :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Raged silently at a coworker for spamming the left arrow key to get to the beginning of their terminal prompt when they could have just pressed CTRL + A ?&lt;/li&gt;
&lt;li&gt;Watched someone as they enter the same command over and over when they could have just prefaced it with &lt;code&gt;!&lt;/code&gt; ?&lt;/li&gt;
&lt;li&gt;Rolled your eyes as your buddy expounds at length on the virtues of IDEs when you know that you could &amp;ldquo;roflstomp&amp;rdquo; him or her using &lt;code&gt;vim&lt;/code&gt; ?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If so, then these tips might be for you.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;DISCLAIMER:&lt;/em&gt; There&amp;rsquo;s an admitted bias towards &lt;code&gt;vim&lt;/code&gt;, &lt;code&gt;git&lt;/code&gt;, and the terminal here.  I don&amp;rsquo;t intend to start a holy war about terminal vs. IDEs, just have some fun and point out these fun tricks that work well for me.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;git add -p&lt;/h1&gt;

&lt;p&gt;If you&amp;rsquo;ve worked with &lt;code&gt;git&lt;/code&gt; for any non-trivial amount of time you hopefully have come across the notion of making &lt;a href=&#34;http://stackoverflow.com/questions/6543913/git-commit-best-practices&#34;&gt;atomic commits&lt;/a&gt;.  Essentially, the notion is that a commit should contain only interrelated details, and not anything that&amp;rsquo;s logically unrelated to the things you are committing.  For example, it makes sense to commit changes to a class and its corresponding unit test in one commit, but if you&amp;rsquo;ve made changes to another class that deal with completely different business logic then those should be in another commit.&lt;/p&gt;

&lt;p&gt;However, what happens when you are working within one file that contains multiple unrelated changes, or changes that you&amp;rsquo;d like to split up into more than one commit in case you need to revert them separately?  Or you have sprinkled logging statements all over the file that you don&amp;rsquo;t want to commit to the repo?  The normal sequence of git commands that people use fails us here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git diff
diff --git a/some-file.c b/some-file.c
index f383179..09e4e35 100644
--- a/some-file.c
+++ b/some-file.c
@@ -2,6 +2,8 @@

 int main(void) {
        printf(&amp;quot;doing some stuff\n&amp;quot;);
-       printf(&amp;quot;doing some more stuff\n&amp;quot;);
+       do_some_stuff();
+       printf(&amp;quot;doing some unrelated stuff\n&amp;quot;);
+       do_some_unrelated_stuff();
        return 0;
 }
$ git add some-file.c
$ git commit
[master 1938906] some unrelated stuff, cramming it all in one commit &#39;cause I&#39;m lazy
 1 file changed, 3 insertions(+), 1 deletion(-)
$ echo &amp;quot;Whoops we just committed unrelated stuff.  Not very modular of us.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;-p&lt;/code&gt; (standing for patch) flag for &lt;code&gt;git add&lt;/code&gt; is ridiculously useful for these kinds of cases.  This tells &lt;code&gt;git add&lt;/code&gt; that we want to do a &lt;em&gt;partial&lt;/em&gt; add of the file, and we&amp;rsquo;re presented with a nice interative menu which allows us to specify with a lovely amount of detail exactly which parts of the file we want to stage.  &lt;code&gt;git&lt;/code&gt; splits the changes into hunks automatically, which you can approve or reject with &lt;code&gt;y&lt;/code&gt; or &lt;code&gt;n&lt;/code&gt; respectively, or use &lt;code&gt;s&lt;/code&gt; to split up into finer grained hunks.  If &lt;code&gt;git&lt;/code&gt; can&amp;rsquo;t split the hunks up the way you want automatically, you can specify as much detail as you want with the &lt;code&gt;e&lt;/code&gt; (edit) option.&lt;/p&gt;

&lt;p&gt;{% img /images/five-tips/git-add-minus-p.jpeg And now our commits are nice and tidy. %}&lt;/p&gt;

&lt;p&gt;See here for more details on &lt;code&gt;git add -p&lt;/code&gt;: &lt;a href=&#34;http://stackoverflow.com/questions/1085162/how-can-i-commit-only-part-of-a-file-in-git&#34;&gt;How can I commit only part of a file in git?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;EDIT:&lt;/em&gt; Some commenters have pointed out that this usage of &lt;code&gt;-p&lt;/code&gt; flag also works for commands such as &lt;code&gt;git checkout --&lt;/code&gt;.  Therefore you could hypothetically send only part of a file back to the way it was at HEAD, and keep your other changes.  Handy!&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;vim&amp;rsquo;s CTRL-P / CTRL-N autocomplete feature&lt;/h1&gt;

&lt;p&gt;This is one of those killer features of &lt;code&gt;vim&lt;/code&gt; that I am surprised to find out people (even experienced &lt;code&gt;vim&lt;/code&gt; gurus) don&amp;rsquo;t use more frequently.  Even if you are a casual user (hop into &lt;code&gt;vim&lt;/code&gt; to edit some config files while &lt;code&gt;ssh&lt;/code&gt;ed into a box) it has the potential to help you out quite a bit.  One of the reasons people claim they couldn&amp;rsquo;t live without IDEs is the existence of features such as Intellisense that provide autocompletion of variable/function names.  These features are very nice since they cut down on mistakes due to misspelling properties and thereby speed up the compile/run/debug cycle a fair bit.  Many people don&amp;rsquo;t seem to realize that there is an analog which comes straight out of the box in &lt;code&gt;vim&lt;/code&gt;, no plugins needed.&lt;/p&gt;

&lt;p&gt;You can press CTRL-N to move down the list of suggested completions when typing in INSERT mode (which vim draws from the current buffers, and from the &lt;code&gt;tags&lt;/code&gt; file if you have one), or CTRL-P to move back up (representing &amp;ldquo;NEXT&amp;rdquo; and &amp;ldquo;PREVIOUS&amp;rdquo; if you didn&amp;rsquo;t catch the mnemonic).  If there is only one possible completion, &lt;code&gt;vim&lt;/code&gt; will just go ahead and insert it.  Very handy and speedy, especially in codebases with a lot of long variable / method / constant names.&lt;/p&gt;

&lt;p&gt;CTRL-P/CTRL-N have a lot of synergy with the next tip as well, as touched upon briefly in the above paragraph.&lt;/p&gt;

&lt;p&gt;{% img /images/five-tips/ctrl-n-vim.jpeg And you barely need to leave the home row. %}&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;exuberant ctags&lt;/h1&gt;

&lt;p&gt;Everyone who uses &lt;code&gt;vim&lt;/code&gt; knows that it can be a bit of a kerfluffle sometimes to open a file in a distant directory (tab completion helps ease this with &lt;code&gt;:e&lt;/code&gt;, but it&amp;rsquo;s still not usually instantaneous).  If you happen to be working on a team, or a very large project, the ability to do this quickly will likely be a vital part of your workflow.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ctags.sourceforge.net/&#34;&gt;Exuberant Ctags&lt;/a&gt; is a tool that makes this worlds easier than it would be without.  With ctags, you can  you just run a command in the top directory of the project you&amp;rsquo;re working on to generate a &amp;ldquo;tags&amp;rdquo; file, then you can use CTRL-] to &amp;ldquo;pop into&amp;rdquo; the definition of whatever it is your cursor is over (say, a class name).  Press CTRL+T to get back to where you were before.&lt;/p&gt;

&lt;p&gt;You can even set up a &lt;a href=&#34;http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html&#34;&gt;post-commit hook in git&lt;/a&gt; to generate your ctags file automatically when you make a commit!  Nice.&lt;/p&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;CTRL-R in bash and zsh&lt;/h1&gt;

&lt;p&gt;Ever been typing in a command at the terminal, when you suddenly find yourself wishing that there was an easy way to just autofill the prompt with something that you&amp;rsquo;d entered previously so you can edit it or just run it again?  If so, then I&amp;rsquo;ve got good news for you:  You can!  Just press CTRL+R and start typing the thing that you are looking for.  The terminal will fill in what it thinks you are looking for, and if there is more than one option you can cycle through them by pressing CTRL+R repeatedly.  When you&amp;rsquo;ve found the thing you&amp;rsquo;re after, you can break out of the prompt with any of the usual movement commands (CTRL+A, CTRL+E, arrow keys, etc. if you have standard &lt;code&gt;bash&lt;/code&gt; keybindings).  Try it out!  Very handy if you can&amp;rsquo;t remember the name of the box you want to &lt;code&gt;ssh&lt;/code&gt; into.&lt;/p&gt;

&lt;p&gt;{% img /images/five-tips/ctrl-r.jpeg What was that IP address again? %}&lt;/p&gt;

&lt;p&gt;&lt;code&gt;history | grep $COMMAND&lt;/code&gt; will treat you well too, if you just want to review all of the times you&amp;rsquo;ve run that command in recent times.&lt;/p&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;vim macros&lt;/h1&gt;

&lt;p&gt;A lot of the time when you&amp;rsquo;re writing code, or doing related tasks, you find yourself in need of a way to repeat the same editor commands over and over, perhaps with a slight variation.  Different editors provide slightly different ways of addressing this.  &lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt;, for example, has a &amp;ldquo;killer feature&amp;rdquo; where you are able to place multiple cursors in various locations and edit away.  In &lt;code&gt;vim&lt;/code&gt; (and in &lt;code&gt;emacs&lt;/code&gt; too, but here we&amp;rsquo;ll be covering the &lt;code&gt;vim&lt;/code&gt; method) you record and playback keyboard macros to accomplish this.  It is a tool with an absurd amount of power and flexibility, and offers the chance to speed up productivity on repetitive editing tasks by an order of magnitude.&lt;/p&gt;

&lt;p&gt;To make a macro, press &lt;code&gt;q&lt;/code&gt; in normal mode, then press another key to &amp;ldquo;name&amp;rdquo; the macro (usually I use &lt;code&gt;q&lt;/code&gt; again).  &lt;code&gt;vim&lt;/code&gt; will start recording your keystrokes.  &lt;code&gt;vim&lt;/code&gt; will remember which keystrokes you make until you press &lt;code&gt;q&lt;/code&gt; again to save the macro.  You can replay with &lt;code&gt;@&lt;/code&gt;-letter in normal mode, so I am usually pressing &lt;code&gt;@q&lt;/code&gt;.  You can also preface the &lt;code&gt;@&lt;/code&gt;/replay command with a number so that you can rapidly execute your macro over and over (like much in &lt;code&gt;vim&lt;/code&gt;-land, the &amp;ldquo;grammar&amp;rdquo; behaves as you would be accustomed to).  If you&amp;rsquo;re accustomed to using &lt;code&gt;vim&lt;/code&gt;&amp;rsquo;s fancy movement commands (for instance, using &lt;code&gt;/&lt;/code&gt; search to navigate), and practice a little bit, you will soon be able to whip up thunderous macros that will leave your mouse-dependent colleagues in the dust.&lt;/p&gt;

&lt;p&gt;{% img /images/five-tips/vim-macros.gif Who needs multiple cursors? %}&lt;/p&gt;

&lt;p&gt;For more info on &lt;code&gt;vim&lt;/code&gt; macros, see here: &lt;a href=&#34;http://vim.wikia.com/wiki/Macros&#34;&gt;Vim Wiki (Macros)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all for now, folks.  Hope you enjoyed and I&amp;rsquo;ll see you next week!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dragging and Dropping Images From One Browser Tab to Another In AngularJS</title>
      <link>http://localhost:1313/posts/2014-01-11-dragging-and-dropping-images-from-one-browser-tab-to-another-in-angularjs</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/posts/2014-01-11-dragging-and-dropping-images-from-one-browser-tab-to-another-in-angularjs</guid>
      <description>

&lt;p&gt;{% img /images/drag-drop-angular/demo.gif Nice. %}&lt;/p&gt;

&lt;p&gt;So, I catch a lot of flak for not having a &lt;a href=&#34;https://facebook.com&#34;&gt;Facebook&lt;/a&gt;.  I used to have one about six years ago, when &lt;code&gt;&amp;lt;trolling&amp;gt;&lt;/code&gt; it was actually cool, our parents weren&amp;rsquo;t on it, and we had no idea the NSA was watching our every little status update &lt;code&gt;&amp;lt;/trolling&amp;gt;&lt;/code&gt;.  Then, for a variety of reasons, I deleted it.  Since then, people have complained endlessly about a dearth of Nate on social media, so I have started on a new website/project called The Natewerk, which is going to be the #1 social network for people who know me.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s written using &lt;a href=&#34;http://nodejs.org&#34;&gt;Node.js&lt;/a&gt; and &lt;a href=&#34;http://angularjs.org&#34;&gt;Angular.js&lt;/a&gt;, and part of the functionality that I wanted was to have the ability for users to drag an image from a separate tab and drop it into the Natewerk tab, &lt;a href=&#34;http://imgur.com&#34;&gt;Imgur&lt;/a&gt; style, taking an action appropriate for where the user was located in the app.  For instance, if they were on their profile page, I want the app to automatically upload that image to the server (perhaps with a prompt to confirm, also like Imgur), so they can easily add pictures of themselves to their profile.  If they were in the chatroom, it would show the image in the currently active conversation, so that people can post funny gifs/pictures and also easily post images for other people to see (this is one of the annoying things about Skype, in my opinion- you can drag and drop files but it won&amp;rsquo;t display inline, the person you&amp;rsquo;re chatting with has to download it).&lt;/p&gt;

&lt;p&gt;Googling around found a few promising articles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wisercoder.com/drag-drop-image-upload-directive-angular-js/&#34;&gt;Drag and Drop File Upload with AngularJS&lt;/a&gt; from &lt;a href=&#34;http://onemightyroar.com/&#34;&gt;One Mighty Roar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://buildinternet.com/2013/08/drag-and-drop-file-upload-with-angularjs/&#34;&gt;Drag and drop image upload directive for Angular.js&lt;/a&gt; from &lt;a href=&#34;http://wisercoder.com&#34;&gt;Wiser Coder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But neither really gave me what I wanted, which was dragging and dropping from other tabs with the body-modal kind of effect that Imgur has.  So I set out to create my own.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Creating a &lt;code&gt;&amp;lt;char-flasher&amp;gt;&lt;/code&gt; directive&lt;/h1&gt;

&lt;iframe src=&#34;http://embed.plnkr.co/PmTUfAKXZQOc2dj01pcs/preview&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;I wanted the ability to display some text on the screen with dots that blinked, as shown above, to display text such as &lt;code&gt;&amp;quot;Drop image to display in chat...&amp;quot;&lt;/code&gt; to make the process a bit more responsive and encouraging.  This kind of directive would also be reusable for creating fancy flashing text in the future as well (for example, if we wanted to display a &lt;code&gt;&amp;quot;{{user}} is typing...&amp;quot;&lt;/code&gt; message in chat like many chat clients do).  I quickly cooked up a directive that can be used like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;char-flasher display-text=&amp;quot;Drop image here to display in chat...&amp;quot; flash-char=&amp;quot;.&amp;quot; flash-interval=&amp;quot;200&amp;quot;&amp;gt;&amp;lt;/char-flasher&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We pass in parameters here to have an eye towards reuse, although for now it is fairly geared towards the use case of a message with dots at the end (though you can use any character you want, not just &lt;code&gt;&#39;.&#39;&lt;/code&gt;).  &lt;code&gt;display-text&lt;/code&gt; is the message to display.  &lt;code&gt;flash-char&lt;/code&gt; is the character to flash (it&amp;rsquo;s assumed that this character is repeated at the end of the &lt;code&gt;display-text&lt;/code&gt; string).  We pass these attributes as &lt;code&gt;&#39;@&#39;&lt;/code&gt; parameters, so they will be interpreted literally.  We also set the directive to stop the &lt;code&gt;$interval&lt;/code&gt; call we are using the animate the dots in case the directive is destroyed (this prevents memory leaks / wasted resources).&lt;/p&gt;

&lt;p&gt;The code for the directive:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;app.directive(&#39;charFlasher&#39;, function($interval) {
  return {
    restrict: &#39;E&#39;,
    scope: {
      displayText: &#39;@&#39;
      flashChar: &#39;@&#39;,
      flashInterval: &#39;@&#39;
    },
    template: &#39;{{ realContent }}{{ flashingChars }}&#39;,
    link: function(scope, element, attrs) {
      var splitMessage = attrs.displayText.split(attrs.flashChar);
      var realContent = splitMessage.shift();
      var numFlashingChars = splitMessage.length;
      scope.flashingChars = attrs.flashChar;
      scope.realContent = realContent;
      var intervalId = $interval(function() {
        if (scope.flashingChars.length &amp;gt;= numFlashingChars) {
          scope.flashingChars = &#39;&#39;;
        } else {
          scope.flashingChars += attrs.flashChar;
        }
      }, attrs.flashInterval);
      element.on(&#39;$destroy&#39;, function() {
        $interval.cancel(intervalId);
      });
    }
  };
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not perfect, but pretty fun, and useful for our purposes.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Creating the drag and drop directive&lt;/h1&gt;

&lt;p&gt;So, when the user drags an image from another tab over our application, we want the screen to be blanketed with a semi-transparent dark overlay while our message displays, and then when they drop it we want to do something with that image&amp;rsquo;s &lt;code&gt;src&lt;/code&gt; attribute, like use it to upload the image to our server.&lt;/p&gt;

&lt;p&gt;So we have to come up with a solution to this, and preferably do it in a manner that&amp;rsquo;s idiomatic to Angular.  I ended up using jQuery in my final solution to make some things a bit easier, but I&amp;rsquo;m sure there are some craft souls out there who could do everything with just the jQuery lite implementation Angular ships with.&lt;/p&gt;

&lt;p&gt;I came across &lt;a href=&#34;http://css-tricks.com/snippets/jquery/append-site-overlay-div/&#34;&gt;this blog post&lt;/a&gt; by Chris Coyier that provided me information on how to create the &amp;ldquo;body-modal&amp;rdquo; effect.  It&amp;rsquo;s pretty good, but it could be a bit more Angular-ey if we&amp;rsquo;re going to use it in our app.  We&amp;rsquo;ll start by creating a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; right above the &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; tag that will serve as our dark overlay, and we&amp;rsquo;ll use &lt;code&gt;ng-show&lt;/code&gt; to decide if it should be showing or not:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;overlay&amp;quot; ng-show=&amp;quot;darkBody&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can add to our CSS file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;css&#34;&gt;#overlay {
    height: 100%;
    opacity: 0.6;
    position: absolute;
    top: 0;
    left: 0;
    background-color: black;
    width: 100%;
    z-index: 5000;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On our main controller we&amp;rsquo;ll set some methods for manipulating this overlay:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;app.controller(&#39;MainCtrl&#39;, function($scope) {
    $scope.darkBody = false;

    $scope.darkenBody = function() {
        console.log(&#39;darkening body...&#39;);
        $scope.darkBody = true;
    };

    $scope.lightenBody = function() {
        $scope.darkBody = false;
    };
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;ll declare this controller on our &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag, which is also where we declare our &lt;code&gt;ng-app&lt;/code&gt; directive:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html ng-app=&amp;quot;nateWerk&amp;quot; ng-controller=&amp;quot;MainCtrl&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sweet.  Now we will create the create the &lt;code&gt;imageDragDropUpload&lt;/code&gt; directive, which will be an attribute directive we place on &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;.  This is so the user can drag/drop the images anywhere on the page and everything will still work (note: the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; &lt;code&gt;height&lt;/code&gt; property must be set to 100% of the screen height for this all to work).&lt;/p&gt;

&lt;p&gt;We define a function for darkening the body and bind it to the &lt;code&gt;dragenter&lt;/code&gt; and &lt;code&gt;dragover&lt;/code&gt; directives, so the first part of the link function for our directive looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var darkenBody = function(event) {
    event.preventDefault();
    scope.$apply(function() {
        scope.darkenBody();
    });
};
elm.bind(&#39;dragenter&#39;, darkenBody);
elm.bind(&#39;dragover&#39;, darkenBody);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our directive doesn&amp;rsquo;t have an isolate scope, so we have access to the &lt;code&gt;darkenBody&lt;/code&gt; method from &lt;code&gt;MainCtrl&lt;/code&gt;&amp;rsquo;s scope (if you wanted multiple drag and drops into different areas of the page you should create one with isolate scope, but with this style there will only ever be one instance of the directive).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;drop&lt;/code&gt; binding is a little bit trickier, but not too bad.  We use jQuery to do a little bit of parsing of the content (HTML) that was handed to us, and get the &lt;code&gt;src&lt;/code&gt; attribute to do with it what we will (in this case, add to an imageService so the controller can follow along).  Specifically, we use &lt;code&gt;event.dataTransfer.getData&lt;/code&gt; to get the HTML that was dropped onto the page (see &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/DragDrop/Recommended_Drag_Types&#34;&gt;this MDN documentation&lt;/a&gt;), and create a new jQuery element out of it.  We filter this jQuery element for the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; because sometimes multiple HTML elements are present in the dragged/dropped content.  Then we hide the body overlay:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;event.preventDefault();
var imageSrc = $(event.originalEvent.dataTransfer.getData(&#39;text/html&#39;)).filter(function(i, elm) { 
    return $(elm).is(&#39;img&#39;); 
}).attr(&#39;src&#39;);
imageService.pushImage(imageSrc);  // Will append to list of images dropped into app
scope.lightenBody();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty cool and useful in my opinion.  Hopefully your imagination is going crazy with possibilities in all sorts of directions right now, since this could be expanded to different types of content, including files from the user&amp;rsquo;s computer and so on.  It&amp;rsquo;d benefit from a bit of animation and such as well.&lt;/p&gt;

&lt;p&gt;I wasn&amp;rsquo;t sure how Plunker/iframes would handle this, so I made a demo viewable &lt;a href=&#34;http://nathanleclaire.github.io/angdragdropdemo&#34;&gt;on Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m hotlinking the images here, but please don&amp;rsquo;t do this in production, it&amp;rsquo;s rude (upload them to your own server instead).&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This was a fun thing to learn how to do in AngularJS.  Since this uses HTML5 APIs, it won&amp;rsquo;t work in older browsers, but I haven&amp;rsquo;t thoroughly tested it to see where it will work and where it will not (seems to go over well in Chrome, Safari, and Firefox on a variety of OSes).  Ultimately it makes me excited for the future of Angular, the browser, and the NateWerk.&lt;/p&gt;

&lt;p&gt;Until next time, stay sassy Internet.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nathan&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Three Elements That Sum To Zero</title>
      <link>http://localhost:1313/posts/2013-10-22-three-elements-that-sum-to-zero</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/posts/2013-10-22-three-elements-that-sum-to-zero</guid>
      <description>

&lt;p&gt;There&amp;rsquo;s an interview question (for developers) that recently I&amp;rsquo;ve been asking (if they have already proven they can &lt;a href=&#34;http://www.codinghorror.com/blog/2007/02/why-cant-programmers-program.html&#34;&gt;FizzBuzz&lt;/a&gt;) which goes a little something like this:&lt;/p&gt;

&lt;blockquote&gt;Given a collection of integers, return the indices of any three elements which sum to zero.  For instance, if you are given &lt;code&gt;{-1, 6, 8, 9, 10, -100, 78, 0, 1}&lt;/code&gt;, you could return &lt;code&gt;{0, 7, 8}&lt;/code&gt; because &lt;code&gt;-1 + 1 + 0 == 0&lt;/code&gt;.  You can&#39;t use the same index twice, and if there is no match you should return &lt;code&gt;{-1, -1, -1}&lt;/code&gt;.&lt;/blockquote&gt;

&lt;p&gt;I first heard this question in an interview with a San Francisco-based startup, and it has since become sort of a workhorse interview question around the office.  As it turns out, this question has the potential to &lt;a href=&#34;http://xkcd.com/356/&#34;&gt;nerd snipe&lt;/a&gt; developers pretty effectively.  I know, because I coded up the naive solution first before deciding that it wasn&amp;rsquo;t good enough, and that I wanted to write it a faster way.  Combining this with my recent revival of interest in C++ (I learned it long ago but have been mostly working with scripting languages lately) proved to be an interesting experience.  This is the story of one man (me), and his quest to write code to efficiently solve this problem.  In my solutions I use the &lt;code&gt;std::vector&lt;/code&gt; class, as I also used this as an opportunity to refresh some STL knowledge, but in the article I use the words &amp;ldquo;array&amp;rdquo; and &amp;ldquo;vector&amp;rdquo; interchangably (these solutions could also be implemented with arrays, there is nothing special about using vectors in this case).&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Solving Things Naively&lt;/h1&gt;

&lt;p&gt;The obvious way to do this is with brute force.  Starting with the zeroeth, first, and second elements of the collection, compare every possible combination of three elements to see if they sum to zero.  Sample code (&lt;code&gt;using namespace std;&lt;/code&gt; is implied):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;vector&amp;lt;int&amp;gt; three_indices_that_sum_to_zero_naive(vector&amp;lt;int&amp;gt; v)
{
    // O(n ** 3) time complexity in average case
    int i, j, k, n;
    n = v.size();
    for(i = 0; i &amp;lt; n-2; i++)
    {
        for(j = i+1; j &amp;lt; n-1; j++)
        {
            for(k = j+1; k &amp;lt; n; k++)
            {
                if ((v.at(i) + v.at(j) + v.at(k)) == 0)
                {
                    return three_vec(i, j, k);
                }
            }
        }   
    }
    return three_vec(-1, -1, -1); 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;three_vec&lt;/code&gt; is a utility method that I use to return a vector of three integers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;vector&amp;lt;int&amp;gt; three_vec(int i, int j, int k)
{
    int arr[] = {i, j, k};
    vector&amp;lt;int&amp;gt; indices (arr, arr + sizeof(arr) / sizeof(arr[0]));
    return indices;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the obvious way to do the problem at first glance, and it has the advantage of simplicity and readability (a competent developer looking at the code should be able to figure it out fairly quickly).  However, as noted in the comments for the function defined, it runs with a time complexity of O(&lt;em&gt;n&lt;sup&gt;3&lt;/sup&gt;&lt;/em&gt;).  Can we do better?&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Solving Things Suavely&lt;/h1&gt;

&lt;p&gt;Of course we can, or else I wouldn&amp;rsquo;t be writing this article!  Reaching into our algorithmic bag of tricks, we begin to ask ourselves: Is there anything we can do to this otherwise unordered vector of integers that would make it easier for us to get what we&amp;rsquo;re after?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;ldquo;Hm,&amp;rdquo;&lt;/em&gt; you say to yourself.  &lt;em&gt;&amp;ldquo;We could trying sorting it.  This will run in O(n log n) time but it will allow us to find what we are looking for much more quickly.&amp;rdquo;&lt;/em&gt;   But wait- sorting the vector will change the place of the elements, and consequently their index, which is what we are after.  Therefore, we must rely on an additional (simple) data structure if we are going to take this approach:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;typedef struct index_value_pair {
    int index;
    int value;
} index_value_pair;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can make a new array and sort that based on &lt;code&gt;index_value_pair&lt;/code&gt;&amp;rsquo;s &lt;code&gt;value&lt;/code&gt; element:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;/* Utility Function to create an index_value_pair */
index_value_pair make_index_value_pair(int index, int value)
{
    index_value_pair ivp;
    ivp.index = index;
    ivp.value = value;
    return ivp;
}

vector&amp;lt;int&amp;gt; three_indices_that_sum_to_zero_suave(vector&amp;lt;int&amp;gt; v)
{
    int i, j, k, n, sum;
    n = v.size();
    vector&amp;lt;index_value_pair&amp;gt; value_index_vec;
    for (i = 0; i &amp;lt; n; i++) 
    {
        value_index_vec.push_back(make_index_value_pair(i, v.at(i)));
    }
    sort(value_index_vec.begin(), value_index_vec.end(), suave_comp);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, we can work our way forwards from the beginning of the array starting with the zeroeth and first elements (let&amp;rsquo;s call them the &lt;code&gt;i&lt;/code&gt;th and &lt;code&gt;j&lt;/code&gt;th), and &lt;em&gt;backwards&lt;/em&gt; from the end of the array with the third (the &lt;code&gt;k&lt;/code&gt;th).  &lt;code&gt;i&lt;/code&gt; will go to &lt;code&gt;n-2&lt;/code&gt; and start off an inner loop where &lt;code&gt;j = i + 1&lt;/code&gt;.  In the inner loop, if the sum of the elements is positive, we decrement &lt;code&gt;k&lt;/code&gt; because we need a smaller sum (closer to zero).  If the sum of the elements is negative, we increment &lt;code&gt;j&lt;/code&gt; because we need a larger sum (also closer to zero).  If the elements sum to zero, great!  We have our match.  If &lt;code&gt;j&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt; meet, we go on to the next loop.  This process shaves a whole multiple of &lt;code&gt;n&lt;/code&gt; comparisons off our algorithm&amp;rsquo;s runtime and allows us to do things in O(&lt;em&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/em&gt;) time.&lt;/p&gt;

&lt;p&gt;You can intuitively grasp why this is faster by asking yourself how many comparisons it would take to find the elements that sum to zero with this array (sorted) and this algorithm:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{-10, -8, -6, 0, 3, 5, 18}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;versus this one (same elements, different order) with brute force:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{-6, -8, 0, 3, 10, -8, 18}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Therefore the whole function looks like this and runs with O(&lt;em&gt;n log n + n&lt;sup&gt;2&lt;/sup&gt;&lt;/em&gt;) time complexity including the sort.  O(&lt;em&gt;n &lt;sup&gt;2&lt;/sup&gt;&lt;/em&gt;) is asymptotically larger than O(&lt;em&gt;n log n&lt;/em&gt;), so this time complexity resolves to O(&lt;em&gt;n &lt;sup&gt;2&lt;/sup&gt;&lt;/em&gt;) (&lt;em&gt;editor&amp;rsquo;s note&lt;/em&gt;: thanks to Reddit user Olathe for pointing this out).  This should outperform the O(&lt;em&gt;n&lt;sup&gt;3&lt;/sup&gt;&lt;/em&gt;) algorithm in most cases:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;vector&amp;lt;int&amp;gt; three_indices_that_sum_to_zero_suave(vector&amp;lt;int&amp;gt; v)
{
    int i, j, k, n, sum;
    n = v.size();
    vector&amp;lt;index_value_pair&amp;gt; value_index_vec;
    for (i = 0; i &amp;lt; n; i++) 
    {
        value_index_vec.push_back(make_index_value_pair(i, v.at(i)));
    }
    // print_value_index_vec(value_index_vec);
    sort(value_index_vec.begin(), value_index_vec.end(), suave_comp);
    for (i = 0; i &amp;lt; n-2; i++)
    {
        j = i+1;
        k = n-1;
        while (k &amp;gt; j)
        {
            sum = sum_from_value_index_vec(value_index_vec, i, j, k);
            if (sum == 0)
            {
                return three_vec(value_index_vec.at(i).index, value_index_vec.at(j).index, value_index_vec.at(k).index);   
            }

            if (sum &amp;gt; 0)
            {
                k--;
            }
            else
            {
                j++;
            }

        }
    }
    return three_vec(-1, -1, -1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Interestingly, with the first few benchmarks I ran, the naive version was outperforming the efficient version, and I couldn&amp;rsquo;t quite figure out why (the first command line argument indicates how many random elements to generate in our test array- in other words, &lt;code&gt;N&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./indices_sum_to_zero 100000
Initializing...

Using naive...
Performance: 0 ticks
Naive : {0, 1, 77}
Using suave...
The elements: -100 0 100
Performance: 10000 ticks
Suave : {73045, 48974, 3270}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How could this be?  My carefully crafted algorithm was getting stomped by an algorithm I knew to be inferior.  After generating and poking around at a few callgrind files attempting to track down the issue, I suddenly realized that it was right in front of my eyes, in two constant definitions I had made and forgotten about early on:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static int LOWERBOUND = -100;
static int UPPERBOUND = 100;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These settings were used to specify the range of the pseudorandom integers I was using to test the algorithms with, and when they were so close together the naive algorithm was outperforming the &amp;ldquo;suave&amp;rdquo; one because the additional overhead of sorting was so costly.&lt;/p&gt;

&lt;p&gt;What if we change the bounds to be &lt;code&gt;{-10000000, 10000000}&lt;/code&gt;?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./indices_sum_to_zero 100000
Initializing...

Using naive...
Performance: 70000 ticks
Naive : {0, 539, 31774}
Using suave...
Performance: 10000 ticks
Suave : {78891, 33850, 54525}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Much closer to what we expect!  For smaller values of N, and upper/lower bounds that are closer together, the naive version seems to perform better.  As the range and value of N gets larger, the &amp;ldquo;suave&amp;rdquo; algorithm begins to get more appealing.  I&amp;rsquo;d be curious to see a more rigorous numerical analysis of why this is.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/nathanleclaire/algorithms_and_data_structures/blob/master/indices_sum_to_zero/indices_sum_to_zero.cc&#34;&gt;code on github&lt;/a&gt; if you&amp;rsquo;re so inclined.  Cheers, and I&amp;rsquo;ll see you next week!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;EDIT&lt;/em&gt; : Based on some feedback from Reddit I have revised a few things, notably:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There was a bug in the implementation of &lt;code&gt;three_vec&lt;/code&gt; that caused the returned value to be the same for suave and naive versions (fixed in &lt;a href=&#34;https://github.com/nathanleclaire/algorithms_and_data_structures/commit/794993e01b1e0fa6154c722c4d74009b02cdef45&#34;&gt;794993e01b1e0fa6154c722c4d74009b02cdef45&lt;/a&gt; )&lt;/li&gt;
&lt;li&gt;Constant definition is now done with &lt;code&gt;static const&lt;/code&gt; instead of &lt;code&gt;#define&lt;/code&gt; statements&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Want to Work With Databases In Golang?  Let&#39;s Try Some gorp.</title>
      <link>http://localhost:1313/posts/2013-11-04-want-to-work-with-databases-in-golang-lets-try-some-gorp</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/posts/2013-11-04-want-to-work-with-databases-in-golang-lets-try-some-gorp</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;Google&amp;rsquo;s Go&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/&#34;&gt;Go&lt;/a&gt; is a new programming language released by &lt;a href=&#34;http://www.google.com&#34;&gt;Google&lt;/a&gt;.  It has an excellent pedigree (see &lt;a href=&#34;http://en.wikipedia.org/wiki/Rob_Pike&#34;&gt;Rob Pike&lt;/a&gt; and &lt;a href=&#34;http://en.wikipedia.org/wiki/Ken_Thompson_%28computer_programmer%29&#34;&gt;Ken Thompson&lt;/a&gt;) and it brings a lot of interesting things to the table as a programming tool. Go has been the subject of rave reviews as well as controversy.  As Google is a web company it&amp;rsquo;s no surprise that Go seems hard-wired from the start to be used in the context of the modern web and the standard libaries include everything from &lt;a href=&#34;http://golang.org/pkg/net/http/&#34;&gt;HTTP servers&lt;/a&gt; to &lt;a href=&#34;http://golang.org/pkg/html/template/&#34;&gt;a templating system&lt;/a&gt; to address these ends.  A lot of companies and hobbyist hackers seem to enjoy Go as a utility language that replaces components which used to be written in Python or Perl (with Go offering better performance).&lt;/p&gt;

&lt;p&gt;Its supporters emphasize its &lt;a href=&#34;http://benchmarksgame.alioth.debian.org/u64q/benchmark.php?test=all&amp;amp;lang=go&amp;amp;lang2=yarv&amp;amp;data=u64q&#34;&gt;performance&lt;/a&gt;, nifty approach to concurrency (it&amp;rsquo;s &lt;a href=&#34;http://golang.org/doc/effective_go.html#concurrency&#34;&gt;built right in&lt;/a&gt;), and fast compile times as advantages.  Some of its detractors dislike its lack of exceptions and generics, but the purpose of this article is not to address these concerns, which have already been discussed &lt;em&gt;ad nauseum&lt;/em&gt;.  Instead, this article will talk about and examine the &lt;code&gt;gorp&lt;/code&gt; library.&lt;/p&gt;

&lt;p&gt;{% img /images/gorp/gorp.jpeg Eh? %}&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t actually mean GOOD OLD RAISINS &amp;amp; PEANUTS, of course- I mean &lt;a href=&#34;https://github.com/coopernurse/gorp&#34;&gt;gorp&lt;/a&gt;, an &amp;ldquo;ORM-ish library for Go&amp;rdquo;.  What is it, and how does it work its funny magic?&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;ORM-ish?&lt;/h1&gt;

&lt;p&gt;The README.md from &lt;code&gt;gorp&lt;/code&gt;&amp;rsquo;s repository is just too great an introduction to not quote, check it out:&lt;/p&gt;

&lt;blockquote&gt;
I hesitate to call gorp an ORM. Go doesn&#39;t really have objects, at least not in the classic Smalltalk/Java sense. There goes the &#34;O&#34;. gorp doesn&#39;t know anything about the relationships between your structs (at least not yet). So the &#34;R&#34; is questionable too (but I use it in the name because, well, it seemed more clever).

The &#34;M&#34; is alive and well. Given some Go structs and a database, gorp should remove a fair amount of boilerplate busy-work from your code.

I hope that gorp saves you time, minimizes the drudgery of getting data in and out of your database, and helps your code focus on algorithms, not infrastructure.
&lt;/blockquote&gt;

&lt;p&gt;When I was looking into &lt;a href=&#34;http://www.github.com/robfig/revel&#34;&gt;Revel&lt;/a&gt; as a possibility for a Go web application framework, I found myself frustrated by its lack of a database solution.  Persistence is just such a key aspect of web applications, and something that we&amp;rsquo;re so accustomed to letting frameworks take care of for us (a la Rails and Django) that it was hard to believe a large framework like Revel didn&amp;rsquo;t even want to touch the problem- especially since &lt;a href=&#34;http://www.playframework.com/documentation/1.2.1/model&#34;&gt;Play&lt;/a&gt;, a large source of inspiration, provides such functionality.  Revel is awesome in a lot of other ways, like its code hotswap feature, but for now at least it is &amp;ldquo;bring-your-own-ORM&amp;rdquo; (or other database solution).&lt;/p&gt;

&lt;p&gt;So I set off to look into this funny &lt;code&gt;gorp&lt;/code&gt; business.  As it turns out, &lt;code&gt;gorp&lt;/code&gt; is pretty straightforward and powerful.  At the time of writing, &lt;code&gt;gorp&lt;/code&gt; can be used with MySQL, Sqlite3, and PostgreSQL (although there are some known issues that cause different drivers to behave slightly differently).&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Creating Tables&lt;/h1&gt;

&lt;p&gt;The basic use case for &lt;code&gt;gorp&lt;/code&gt; is to define some structs and then register them with an instance of &lt;code&gt;gorp&lt;/code&gt;&amp;rsquo;s &lt;code&gt;DbMap&lt;/code&gt; structure.  This structure is responsible for generating the raw SQL to perform basic database operations on a table that will mirror your custom defined structure.  &lt;code&gt;gorp&lt;/code&gt; can easily create that table for you in the first place.  Check it out:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;type Person struct {
    Id      int64    
    Created int64
    Updated int64
    FName   string
    LName   string
}

// connect to db using standard Go database/sql API
// use whatever database/sql driver you wish
db, err := sql.Open(&amp;quot;mymysql&amp;quot;, &amp;quot;tcp:localhost:3306*mydb/myuser/mypassword&amp;quot;)

// construct a gorp DbMap
dbmap := &amp;amp;gorp.DbMap{Db: db, Dialect: gorp.MySQLDialect{&amp;quot;InnoDB&amp;quot;, &amp;quot;UTF8&amp;quot;}}

table := dbmap.AddTable(Person{}).SetKeys(true, &amp;quot;Id&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use &lt;code&gt;AddTableWithName&lt;/code&gt; if you don&amp;rsquo;t want the table name to be the same as the structure type&amp;rsquo;s name (in fact, &lt;code&gt;AddTable&lt;/code&gt; calls &lt;code&gt;AddTableWithName&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;table := dbmap.AddTableWithName(Person{}, &amp;quot;People&amp;quot;).SetKeys(true, &amp;quot;Id&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can imagine, being able to easily create and drop tables like this is useful for unit tests.&lt;/p&gt;

&lt;p&gt;You can use structure field tags if you want to change the name of the columns in the actual SQL (let&amp;rsquo;s say your team has a convention to have only lowercase column names, but all members of a Go struct must be uppercase).  Additionally you can tell &lt;code&gt;gorp&lt;/code&gt; to ignore fields completely with &lt;code&gt;db:&amp;quot;-&amp;quot;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;type Person struct {
    Id       int64                        `id`
    Created  int64                        `created`
    Updated  int64                        `modified`
    FName    string                       `firstName`
    LName    string                       `lastName`
    Comments *SomeNonPersistentStructure  `db:&amp;quot;-&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A seemingly undocumented feature is that you can set the size of the table columns manually.  If you don&amp;rsquo;t, &lt;code&gt;gorp&lt;/code&gt; will automatically figure something out for you that may be a bit too large or too small.  For example, &lt;code&gt;gorp&lt;/code&gt; turns this structure definition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// A Thing is a post (link submission or a comment)
type Thing struct {
    Id            int64
    Username      string
    Href          string
    Upvotes       int64
    Downvotes     int64
    Description   string
    ParentThingId int64
    Created       int64
    Updated       int64
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;into this (with default behavior / MySQL driver):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+---------------+--------------+------+-----+---------+-------+
| Field         | Type         | Null | Key | Default | Extra |
+---------------+--------------+------+-----+---------+-------+
| Id            | bigint(20)   | YES  |     | NULL    |       |
| Username      | varchar(255) | YES  |     | NULL    |       |
| Href          | varchar(255) | YES  |     | NULL    |       |
| Upvotes       | bigint(20)   | YES  |     | NULL    |       |
| Downvotes     | bigint(20)   | YES  |     | NULL    |       |
| Description   | varchar(255) | YES  |     | NULL    |       |
| ParentThingId | bigint(20)   | NO   | PRI | NULL    |       |
| Created       | bigint(20)   | YES  |     | NULL    |       |
| Updated       | bigint(20)   | YES  |     | NULL    |       |
+---------------+--------------+------+-----+---------+-------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you call &lt;code&gt;gorp.DbMap.AddTableWithName&lt;/code&gt;, it returns you a pointer to a &lt;code&gt;TableMap&lt;/code&gt; struct that you can use to set the size of the columns.  So you think 255 characters is a bit long for a username?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;t1 := dbmap.AddTable(Person{}).SetKeys(true, &amp;quot;Id&amp;quot;)
t1.ColMap(&amp;quot;Username&amp;quot;).SetMaxSize(25)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The things you learn from reading the unit tests (and digging in the &lt;a href=&#34;https://github.com/robfig/revel/blob/master/samples/booking/app/controllers/gorp.go&#34;&gt;Revel examples&lt;/a&gt;), huh?&lt;/p&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;CRUD&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at what CRUD (Create-Read-Update-Delete) looks like using &lt;code&gt;gorp&lt;/code&gt;-mapped structures.&lt;/p&gt;

&lt;p&gt;Inserting a new row is simple (note that you have to declare the structs as pointers so that optional callback hooks can operate on your actual data instead of copies):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;person := &amp;amp;Person{
    Created: time.Now().UnixNow(), 
    Updated: time.Now().UnixNow(),
    FName: &amp;quot;Joe&amp;quot;,
    LName: &amp;quot;Smith&amp;quot;
}
err := dbmap.Insert(person)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Want to select by primary key?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;primaryKey := 1
p1, err := dbmap.Get(Person{}, primaryKey)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How about selecting by arbitrary (non-primary-key) fields?  You can use &lt;code&gt;dbm.Select&lt;/code&gt; to get a slice, or &lt;code&gt;dbm.SelectOne&lt;/code&gt; to populate the slice or structure with the revelant data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;var ids []int64
_, err := dbmap.Select(&amp;amp;ids, &amp;quot;select id from Person&amp;quot;)

lname = &amp;quot;LeClaire&amp;quot;
var person Person
err := dbmap.SelectOne(&amp;amp;person, &amp;quot;select * from Person where LName=?&amp;quot;, lname)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Update and delete work similarly :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;// count is the # of rows updated / deleted
person.FName = &amp;quot;Nate&amp;quot; 
count, err := dbmap.Update(person)

// or just delete it 
count, err := dbmap.Delete(person)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;How does it do all of this crazy voodoo?&lt;/h1&gt;

&lt;p&gt;Obviously gorp is really cool, and useful.  So how does it work?&lt;/p&gt;

&lt;p&gt;{% img /images/gorp/use-the-source-luke.jpeg Best way to learn. %}&lt;/p&gt;

&lt;p&gt;I had no idea, but I remembered the words of Jeff Atwood and other wise folks and cracked open the &lt;a href=&#34;https://github.com/coopernurse/gorp/blob/master/gorp.go&#34;&gt;source code on github&lt;/a&gt;.  Reading the unit tests also proved useful in understanding how &lt;code&gt;gorp&lt;/code&gt; should be used (one of the virtues of meticulously tested code - it documents).&lt;/p&gt;

&lt;p&gt;Immediately upon cracking open the definition of &lt;code&gt;DbMap.AddTable&lt;/code&gt; and &lt;code&gt;DbMap.AddTableWithName&lt;/code&gt;, I had one of those &amp;ldquo;aha&amp;rdquo; moments that programmers know so well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;// AddTableWithName has the same behavior as AddTable, but sets
// table.TableName to name.
func (m *DbMap) AddTableWithName(i interface{}, name string) *TableMap {
        t := reflect.TypeOf(i)
        if name == &amp;quot;&amp;quot; {
                name = t.Name()
        }

        // check if we have a table for this type already
        // if so, update the name and return the existing pointer
        for i := range m.tables {
                table := m.tables[i]
                if table.gotype == t {
                        table.TableName = name
                        return table
                }
        }

        tmap := &amp;amp;TableMap{gotype: t, TableName: name, dbmap: m}
        tmap.columns, tmap.version = readStructColumns(t)
        m.tables = append(m.tables, tmap)

        return tmap
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, it uses reflection!  Go&amp;rsquo;s &lt;a href=&#34;http://golang.org/pkg/reflect/&#34;&gt;reflect&lt;/a&gt; package is what powers this manipulation and mapping of structure metadata (I wasn&amp;rsquo;t aware Go was capable of reflection when I started using &lt;code&gt;gorp&lt;/code&gt;, so it was a bit of a surprise to find this out).&lt;/p&gt;

&lt;p&gt;Suddenly everything became clearer to me and I feel like the code for &lt;code&gt;AddTableWithName&lt;/code&gt; is fairly self-explanatory if you are familiar with the usage of the library.  The first part of the method deals with naming the table (user defined or based on the name of the structure).  The middle section checks to see if the table already is in existence and if so it updates the name (consequently, we can set up a table for a structure with one name, then change the table name later on if we want).  Lastly, it adds the table if it doesn&amp;rsquo;t exist and returns a pointer to the &lt;code&gt;TableMap&lt;/code&gt; structure (we discussed this structure briefly earlier).&lt;/p&gt;

&lt;p&gt;The code for the &lt;code&gt;readStructColumns&lt;/code&gt; internal method that you see called near the end of the method is pretty cool as well, it powers &lt;code&gt;gorp&lt;/code&gt;&amp;rsquo;s ability to deal with struct embedding (a pretty cool feature of the libary IMO).  I won&amp;rsquo;t reproduce it here, but if you are curious &lt;a href=&#34;https://github.com/coopernurse/gorp/blob/master/gorp.go&#34;&gt;go check it out&lt;/a&gt;!&lt;/p&gt;

&lt;h1 id=&#34;toc_5&#34;&gt;The future&lt;/h1&gt;

&lt;p&gt;Alas, we developers are never easy to please forever.  Here I will note some things that may become issues for users of &lt;code&gt;gorp&lt;/code&gt;, and hopefully get the ball rolling on conversation about directions for &lt;code&gt;gorp&lt;/code&gt;&amp;rsquo;s future development.&lt;/p&gt;

&lt;p&gt;Support for &lt;code&gt;TEXT&lt;/code&gt; columns (and maybe other, &amp;ldquo;weirder&amp;rdquo; column types like PostgreSQL&amp;rsquo;s &lt;a href=&#34;http://www.postgresql.org/docs/9.2/static/datatype-json.html&#34;&gt;json data type&lt;/a&gt;) seems like something that will be needed to really bring &lt;code&gt;gorp&lt;/code&gt; into the limelight as a robust and mature tool (see &lt;a href=&#34;https://github.com/coopernurse/gorp/issues/34&#34;&gt;this issue&lt;/a&gt; on github, where someone brings up &lt;code&gt;TEXT&lt;/code&gt; specifically).  A &lt;code&gt;VARCHAR&lt;/code&gt; column arguably would be inappropriate for storing the content of a Reddit comment or a blog post, for example.  I&amp;rsquo;d be curious how the maintainers are interested in handling this- getting into defining custom data types with &lt;code&gt;gorp&lt;/code&gt; (e.g. &lt;code&gt;gorp.Text&lt;/code&gt;) might be dicey, for instance, or it could prove to be a robust solution.  In the long run, it&amp;rsquo;s worth considering how much of &lt;code&gt;gorp&lt;/code&gt;&amp;rsquo;s flexibility and power comes from its ability to discern those kinds of things with minimal input from the user, and how much of that we&amp;rsquo;re willing to give up to have a VERY robust database / ORM-ish solution for Golang.&lt;/p&gt;

&lt;p&gt;Other tough nuts to crack with &lt;code&gt;gorp&lt;/code&gt; (Golang&amp;rsquo;s strict/static typing, which is definitely one of its advantages in some ways, is partially what makes some of these so challenging) :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Handling relational data&lt;/li&gt;
&lt;li&gt;Joins (the existing solution looks pretty workable, but feels a bit stiff - admittedly I haven&amp;rsquo;t tried it though)&lt;/li&gt;
&lt;li&gt;Data migrations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any ideas?&lt;/p&gt;

&lt;p&gt;Also, not to be &amp;ldquo;that guy&amp;rdquo;, but it could probably stand to be broken up into a few different files (one for each of the different structures, for instance) instead of one large &lt;code&gt;gorp.go&lt;/code&gt; file.&lt;/p&gt;

&lt;h1 id=&#34;toc_6&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;gorp&lt;/code&gt; is a very cool, if still young, tool / library.  I find it to be a good combination of abstraction and practicality.  What do you think?&lt;/p&gt;

&lt;p&gt;Thanks for reading, I&amp;rsquo;ll see you next week.&lt;/p&gt;

&lt;p&gt;Nate&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Implementing a Concurrent Floodfill with Golang</title>
      <link>http://localhost:1313/posts/2014-04-05-implementing-a-concurrent-floodfill-with-golang</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/posts/2014-04-05-implementing-a-concurrent-floodfill-with-golang</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;The setup&lt;/h1&gt;

&lt;p&gt;Lately as part of a coding exercise I found myself implementing a &lt;a href=&#34;http://en.wikipedia.org/wiki/Flood_fill&#34;&gt;Flood Fill&lt;/a&gt; for &amp;ldquo;painting&amp;rdquo; an ASCII canvas.  For those of you unfamiliar with what that is, think back to MSPaint - remember that little paint bucket that would fill a region with your color of choice?  That paint bucket implements a flood fill algorithm, although I didn&amp;rsquo;t know that&amp;rsquo;s what it was called until I started working on implementing one myself.&lt;/p&gt;

&lt;p&gt;{%img /images/flood-fill/flood-fill-basic.gif %}&lt;/p&gt;

&lt;p&gt;My original implementation was in PHP and I had to go through a few iterations before I got to an implementation I was satisfied with.  It was surprisingly tricky to get correct as my depth-first implementation kept blowing the stack through excessive use of recursion.  A naive flood fill algorithm (depth first) looks like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Store the color of the pixel where you are starting, then color it the new color.&lt;/li&gt;
&lt;li&gt;For every adjacent pixel, if it is the same as the original color and you have never visited that pixel before, perform a flood fill on it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are a lot of issues with this algorithm.  It takes a long time and it will quickly blow the stack if the canvas size contains more than a trivial number of pixels.&lt;/p&gt;

&lt;p&gt;So I started thinking about ways to improve it, and it occurred to me to use a &lt;em&gt;breadth&lt;/em&gt;-first solution instead (this is actually the kind of solution that&amp;rsquo;s visualized in the GIF above).  That way, we could store the pixels that we want to visit / fill in a queue, and visit them one at a time without blowing the stack.  It worked pretty well.&lt;/p&gt;

&lt;p&gt;Just one problem, though:  It was written in PHP, and PHP is dog slow.  It&amp;rsquo;s also painfully single-threaded to boot.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Go!&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;s&amp;gt;&lt;/code&gt; Since we all know that all the cool kids use &lt;a href=&#34;http://golang.org&#34;&gt;Go&lt;/a&gt; nowadays &lt;code&gt;&amp;lt;/s&amp;gt;&lt;/code&gt;, I decided to take a crack at implementing a solution for this in Go, taking advantage of Go&amp;rsquo;s high performance and concurrency patterns.  Also, I just really like coding stuff in Go.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;&amp;ldquo;Canvas&amp;rdquo; abstraction&lt;/h2&gt;

&lt;p&gt;The &amp;ldquo;canvas&amp;rdquo; I modeled as an two-dimensional array of byte arrays (which are chars for our purposes).  There&amp;rsquo;s another matrix that we use to keep track of which pixels we have visited before.  For convenient passing, we also have a struct &lt;code&gt;Node&lt;/code&gt; that contains data about a given pixel.  We will use this later on to make our helper functions a little bit more clean looking.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;type Canvas struct {
    contents [][]byte
    visited  [][]bool
}

type Node struct {
    X     int
    Y     int
    Color byte
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The function to initialize the &amp;ldquo;canvas&amp;rdquo; is pretty straightforward.  We also have an analagous method, &lt;code&gt;setVisitedMatrixToFalse&lt;/code&gt;, that we call before performing a flood fill operation to indicate we haven&amp;rsquo;t visited anywhere yet.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (c *Canvas) Init(width int, height int, blankChar byte) {
    c.contents = make([][]byte, width)
    for i := 0; i &amp;lt; width; i++ {
        c.contents[i] = make([]byte, height)
        for j := 0; j &amp;lt; height; j++ {
            c.contents[i][j] = blankChar
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Called like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;canvas := Canvas{}
canvas.Init(120, 120, &#39;_&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We take advantage of easy casting from &lt;code&gt;[]byte&lt;/code&gt; type to &lt;code&gt;string&lt;/code&gt; for our function to print the contents of the canvas:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (c *Canvas) Print() {
    for _, row := range c.contents {
        fmt.Println(string(row))
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this code set up, we can get into the &amp;ldquo;meat&amp;rdquo; of the flood fill algorithm.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Flood Fill&lt;/h2&gt;

&lt;p&gt;Instead of using pure recursion, we will instead have a &amp;ldquo;master&amp;rdquo; goroutine that forks off visits to other pixels/nodes in their own goroutines.  The child goroutines will report back their &amp;ldquo;findings&amp;rdquo; to the main goroutine, including what pixels to visit next if any.  Through the use of buffered and unbuffered goroutines, we will prevent too many visits from firing off at once, and the Go runtime scheduler will take care of juggling these activities which are running concurrently.&lt;/p&gt;

&lt;p&gt;The main goroutine looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (c *Canvas) FloodFill(x int, y int, color byte) {
    // If unbuffered, this channel will block when we go to send the
    // initial nodes to visit (at most 4).  Not cool man.
    toVisit := make(chan Node, 4)
    visitDone := make(chan bool)

    originalColor := c.contents[x][y]

    c.setVisitedMatrixToFalse()

    go c.floodFill(x, y, color, originalColor, toVisit, visitDone)
    remainingVisits := 1

    for {
        select {
        case nextVisit := &amp;lt;-toVisit:
            if !c.visited[nextVisit.X][nextVisit.Y] {
                c.visited[nextVisit.X][nextVisit.Y] = true
                remainingVisits++
                go c.floodFill(nextVisit.X, nextVisit.Y, color, originalColor, toVisit, visitDone)
            }
        case &amp;lt;-visitDone:
            remainingVisits--
        default:
            if remainingVisits == 0 {
                return
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To start, we create two channels.  One is called &lt;code&gt;toVisit&lt;/code&gt; and is the channel through which we send Nodes that we still want to visit (color, then check if they have neighbors we should color).  You may notice that this channel is buffered.  This is because if it is not buffered, then when we attempt to send &lt;code&gt;Node&lt;/code&gt;s to visit over it, it will block and the whole program will deadlock.  Since we know that we will &amp;ldquo;queue up&amp;rdquo; at most four &lt;code&gt;Node&lt;/code&gt;s into the channel (for this exercise we don&amp;rsquo;t fill pixels which are diagonally adjacent), that&amp;rsquo;s why we set our buffer size to that.  Theoretically however it will work with any buffer value greater than or equal to one.&lt;/p&gt;

&lt;p&gt;The other channel is called &lt;code&gt;visitDone&lt;/code&gt; and is used to indicate when a visit for a given node is finished.  We don&amp;rsquo;t care which one, since we just maintain a &amp;ldquo;one true counter&amp;rdquo; in our main routine (&lt;code&gt;remainingVisits&lt;/code&gt;) that tracks how many outstanding visits we have, and ensures that the function doesn&amp;rsquo;t return as long as there are visits outstanding.  Before I implemented this solution I was getting all kinds of frustrating race conditions where the &lt;code&gt;default&lt;/code&gt; block would sometimes get hit before any additional visits would get added, and so the program would exit prematurely.  If you have a better idea/solution to manage this, I&amp;rsquo;d love to hear!&lt;/p&gt;

&lt;p&gt;We also keep track of the color of the original pixel, since that&amp;rsquo;s a condition of coloring (the pixels should be adjacent and the same color as the original pixel).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;floodFill&lt;/code&gt; method that we spin off into auxilliary goroutines looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (c *Canvas) floodFill(x int, y int, color byte, originalColor byte, toVisit chan Node, visitDone chan bool) {
    c.contents[x][y] = color
    neighbors := c.getNeighbors(x, y)
    for _, neighbor := range neighbors {
        if neighbor.Color == originalColor {
            toVisit &amp;lt;- neighbor
        }
    }
    visitDone &amp;lt;- true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I don&amp;rsquo;t know that I&amp;rsquo;m crazy about having the actual pixel coloring in this method, since it involves mutable data that&amp;rsquo;s shared between threads, so I might move it into the main method eventually, but for example purposes it works okay.  This method is fairly terse and simply colors the pixel, then calls this method to get the neighbors of the current pixel (ensuring that we don&amp;rsquo;t run over the bounds of the slice):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (c *Canvas) getNeighbors(x int, y int) []Node {
    var (
        neighbors []Node
        color     byte
    )
    if x+1 &amp;lt; len(c.contents) {
        color = c.contents[x+1][y]
        neighbors = append(neighbors, Node{x + 1, y, color})
    }
    if x-1 &amp;gt;= 0 {
        color = c.contents[x-1][y]
        neighbors = append(neighbors, Node{x - 1, y, color})
    }
    if y+1 &amp;lt; len(c.contents[0]) {
        color = c.contents[x][y+1]
        neighbors = append(neighbors, Node{x, y + 1, color})
    }
    if y-1 &amp;gt;= 0 {
        color = c.contents[x][y-1]
        neighbors = append(neighbors, Node{x, y - 1, color})
    }
    return neighbors
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, we send the returned nodes over the &lt;code&gt;toVisit&lt;/code&gt; channel if their color matches the original pixel&amp;rsquo;s color, and we send &lt;code&gt;true&lt;/code&gt; across &lt;code&gt;visitDone&lt;/code&gt; channel to indicate we are done when that is all through (this decrements our counter in the main goroutine).&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s all!&lt;/p&gt;

&lt;p&gt;Check the sample output.&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;

&lt;pre&gt;
____________________
________//__________
________//_______---
__\\\\\\\\\\\\\\_---
________//_______---
________//_______---
________//_______---
_________________---
_________________---
_________________---
_________________---
_________________---
_________________---
_________________---
_________________---
_________________---
_________________---
_________________---
_________________---
_________________---
&lt;/pre&gt;

&lt;p&gt;After: (filled with &lt;code&gt;&#39;G&#39;&lt;/code&gt; char)&lt;/p&gt;

&lt;pre&gt;
GGGGGGGGGGGGGGGGGGGG
GGGGGGGG//GGGGGGGGGG
GGGGGGGG//GGGGGGG---
GG\\\\\\\\\\\\\\G---
GGGGGGGG//GGGGGGG---
GGGGGGGG//GGGGGGG---
GGGGGGGG//GGGGGGG---
GGGGGGGGGGGGGGGGG---
GGGGGGGGGGGGGGGGG---
GGGGGGGGGGGGGGGGG---
GGGGGGGGGGGGGGGGG---
GGGGGGGGGGGGGGGGG---
GGGGGGGGGGGGGGGGG---
GGGGGGGGGGGGGGGGG---
GGGGGGGGGGGGGGGGG---
GGGGGGGGGGGGGGGGG---
GGGGGGGGGGGGGGGGG---
GGGGGGGGGGGGGGGGG---
GGGGGGGGGGGGGGGGG---
GGGGGGGGGGGGGGGGG---
&lt;/pre&gt;

&lt;p&gt;It runs pretty satisfyingly quickly.  Wiki mentions a few alternative approaches that might work a little better (EDIT: it says that going line-by-line instead of pixel by pixel is an order of magnitude faster), but I like this one for its simplicity.&lt;/p&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;Conclude&lt;/h1&gt;

&lt;p&gt;The code is &lt;a href=&#34;https://github.com/nathanleclaire/golangfloodfill&#34;&gt;up on Github&lt;/a&gt; if you&amp;rsquo;re curious.  I&amp;rsquo;d love to hear about other possible approaches, especially ones that are better at taking advtange of Go&amp;rsquo;s concurrency features.  I considered using &lt;code&gt;sync.WaitGroup&lt;/code&gt; but this didn&amp;rsquo;t really seem like a good case to do so.&lt;/p&gt;

&lt;p&gt;Until next time, stay sassy Internet.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nathan&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Banging Your Head Against an AngularJS Issue?  Try This</title>
      <link>http://localhost:1313/posts/2014-01-31-banging-your-head-against-an-angularjs-issue-try-this</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/posts/2014-01-31-banging-your-head-against-an-angularjs-issue-try-this</guid>
      <description>

&lt;p&gt;{%img /images/scope-apply/frustration.jpg Have you been debugging something that seems trivial in Angular for so long that your face looks like this? %}&lt;/p&gt;

&lt;p&gt;As I&amp;rsquo;ve gotten a &lt;a href=&#34;http://nathanleclaire.com/blog/2014/01/04/5-smooth-angularjs-application-tips/&#34;&gt;little&lt;/a&gt; &lt;a href=&#34;http://nathanleclaire.com/blog/2014/01/11/dragging-and-dropping-images-from-one-browser-tab-to-another-in-angularjs/&#34;&gt;into&lt;/a&gt; &lt;a href=&#34;http://angularjs.org&#34;&gt;AngularJS&lt;/a&gt; I&amp;rsquo;ve been surprised by how often my assumptions about how things will work have turned out to be wrong.  When you start to form a basic mental model of how Angular works and you hit your first stumbling block where your model turns out to be incorrect it can be really, really, frustrating.  In particular I had one issue that kept cropping up so often I began trying it before running to Google for help if something wasn&amp;rsquo;t working the way I would have expected (all my views should just magically sync up with what&amp;rsquo;s on &lt;code&gt;$scope&lt;/code&gt;, right?).  This solution is to make sure &lt;code&gt;$scope.$apply&lt;/code&gt; is getting used in the proper manner when updates to &lt;code&gt;$scope&lt;/code&gt; are happening, especially if they are happening in unusual places e.g. inside of directives.  Since I don&amp;rsquo;t really like &amp;ldquo;magical&amp;rdquo; or knee-jerk fixes to problems I highly recommend Jim Hoskins&amp;rsquo;s article on &lt;code&gt;$scope.$apply&lt;/code&gt; which you can find &lt;a href=&#34;http://jimhoskins.com/2012/12/17/angularjs-and-apply.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Use &lt;code&gt;$scope.$apply&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;During your first foray into Angular you will probably not come across this as it is one of those hidden, quasi-leaky-abstraction sort of things that only becomes well known to you as you work on getting a non-trivial app off the ground.  After all, it&amp;rsquo;s not really needed for the &lt;a href=&#34;http://todomvc.com/architecture-examples/angularjs/#/&#34;&gt;todo-list app&lt;/a&gt; of yore but it becomes much more important when you are doing funny things like manipulating scope deep inside of directives and so on.  So, having been bit by the issue multiple times, I recommend trying a call to &lt;code&gt;$scope.$apply&lt;/code&gt; (either wrap the changes to &lt;code&gt;$scope&lt;/code&gt; properties inside a &lt;code&gt;$scope.apply&lt;/code&gt; callback, or call &lt;code&gt;$scope.$apply&lt;/code&gt; on its own after &lt;code&gt;$scope&lt;/code&gt; properties have been updated)  See the documentation &lt;a href=&#34;http://nathanleclaire.com/blog/2014/01/04/5-smooth-angularjs-application-tips/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The issue is around updating properties on &lt;code&gt;$scope&lt;/code&gt;, either in directives or in controllers, and not having the updated changes be reflected on the front-end in the manner which you expect (either they will not show up at all, or they will happen in an order which you do not anticipate, which will cause bugs).  This is because Angular has what is known as a digest-watch cycle where all of this gets figured out:&lt;/p&gt;

&lt;p&gt;{%img /images/scope-apply/digest-cycle.png %}&lt;/p&gt;

&lt;p&gt;As automagical as Angular is in some ways, it has no way of knowing when your property has been updated outside of Angular-land (and sometimes doesn&amp;rsquo;t even bother when it is updated &lt;em&gt;in&lt;/em&gt; Angular-land, as per the example that follows).  So it requires a call to &lt;code&gt;$scope.$apply&lt;/code&gt; to stay in sync.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Example&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s say you have a list of numbers displayed with &lt;code&gt;ng-repeat&lt;/code&gt; and you want to &lt;code&gt;shift&lt;/code&gt; one off the list when the user presses the right arrow key, and redisplay them one at a time if the user presses the left arrow key.  Our controller code (on first attempt) would look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;.controller(&#39;NumCtrl&#39;, function($scope) {
    var history = [];
    $scope.numbersDisplayed = [0,1,2,3,4,5];

    $scope.moveRight = function() {
        history.unshift($scope.numbersDisplayed.shift());
    };

    $scope.moveLeft = function() {
        $scope.numbersDisplayed.unshift(history.shift());
    };
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;re ignoring bounds-checking for the sake of simplicity in this demonstation.  Our directive, designated to watch for user input on the element where this is happening (will be &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; in our case since it is a simple little example), will look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;.directive(&#39;arrowListener&#39;, function() {
    return {
        restrict: &#39;A&#39;, // attribute
        scope: {
            moveRight: &#39;&amp;amp;&#39;, // bind to parent method
            moveLeft: &#39;&amp;amp;&#39;
        },
        link: function(scope, elm, attrs) {
            elm.bind(&#39;keydown&#39;, function(e) {
                if (e.keyCode === 39) {
                    scope.moveRight();
                }
                if (e.keyCode === 37) {
                    scope.moveLeft();
                }
            })
        }
    };
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you try the above code, you&amp;rsquo;ll notice that it doesn&amp;rsquo;t work.  The variable on &lt;code&gt;$scope&lt;/code&gt; gets changed correctly, but this change is not reflected in the view.  In order to make it work you have to change the controller code to :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;.controller(&#39;NumCtrl&#39;, function($scope) {
    var history = [];
    $scope.numbersDisplayed = [0,1,2,3,4,5];

    $scope.moveRight = function() {
        history.unshift($scope.numbersDisplayed.shift());
        $scope.$apply();
    };

    $scope.moveLeft = function() {
        $scope.numbersDisplayed.unshift(history.shift());
        $scope.$apply();
    };
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You could also invoke &lt;code&gt;scope.$apply&lt;/code&gt; in the directive itself.  To be honest, I&amp;rsquo;m not sure what the Angular gurus would consider best practice.  Perhaps the latter since it is more DRY.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;EDIT&lt;/em&gt;: I have received an email from a reader, Andrew Greenberg, that indicates the latter is indeed the way to go.  In fact, he points out a deeper flaw in my reasoning/approach:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[There&amp;rsquo;s a problem with your code] &amp;hellip; that can be the cause of significant bugs down the road, because it calls &lt;code&gt;$apply&lt;/code&gt; from a scope inside the controller.  This will fail when that function is called from inside an AngularJS &lt;code&gt;$digest&lt;/code&gt; cycle, for example, when the functions are called in any expression in the HTML (unless the directive is created in an isolate scope).&lt;/p&gt;

&lt;p&gt;As you know, Angular whines hard when &lt;code&gt;$apply&lt;/code&gt; is called inside an &lt;code&gt;$apply&lt;/code&gt; or &lt;code&gt;$digest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The better practice is to call &lt;code&gt;$apply&lt;/code&gt; only when you know you are outside of a &lt;code&gt;$digest&lt;/code&gt; loop, such as inside the directive link function.  That is, keep the &lt;code&gt;$apply&lt;/code&gt; out of a &lt;code&gt;$controller&lt;/code&gt;, which is accessible to the declarative code in HTML or in another controller — and do the &lt;code&gt;$apply&lt;/code&gt; in the directive link function, when you know you are outside of the &lt;code&gt;$digest&lt;/code&gt; loop (I think).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So there you have it- reasoning why you should call &lt;code&gt;$scope.$apply&lt;/code&gt; or &lt;code&gt;$scope.$digest&lt;/code&gt; in the link function of your directives, not in your controllers.  My code revised to meet these requirements would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;.directive(&#39;arrowListener&#39;, function() {
    return {
        restrict: &#39;A&#39;, // attribute
        scope: {
            moveRight: &#39;&amp;amp;&#39;, // bind to parent method
            moveLeft: &#39;&amp;amp;&#39;
        },
        link: function(scope, elm, attrs) {
            elm.bind(&#39;keydown&#39;, function(e) {
                if (e.keyCode === 39) {
                    scope.moveRight();
                }
                if (e.keyCode === 37) {
                    scope.moveLeft();
                }
                scope.$apply();
            })
        }
    };
})
.controller(&#39;NumCtrl&#39;, function($scope) {
    var history = [];
    $scope.numbersDisplayed = [0,1,2,3,4,5];

    $scope.moveRight = function() {
        history.unshift($scope.numbersDisplayed.shift());
    };

    $scope.moveLeft = function() {
        $scope.numbersDisplayed.unshift(history.shift());
    };
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Writing it out, this way looks a bit cleaner to me as well.&lt;/p&gt;

&lt;p&gt;A Plunker demo of these concepts in action:&lt;/p&gt;

&lt;iframe src=&#34;http://embed.plnkr.co/agbSSuA2Mwx5pAd8kZSw/preview&#34;&gt;&lt;/iframe&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This is one of those nasty issues I wish someone would have pointed out to me from the start.  So here you go, guys, hopefully you can get something out of the suffering I&amp;rsquo;ve gone through to develop an almost sixth-sense like awareness of when a &lt;code&gt;$scope.$apply&lt;/code&gt; will be needed.&lt;/p&gt;

&lt;p&gt;Until next week, stay sassy Internet.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nathan&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Double Your Talent Acquisition: Five Do&#39;s and Don&#39;ts For Technical Recruiters</title>
      <link>http://localhost:1313/posts/2014-03-08-five-dos-and-donts-for-technical-recruiters</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/posts/2014-03-08-five-dos-and-donts-for-technical-recruiters</guid>
      <description>

&lt;p&gt;{%img /images/recruiter/super-recruiter.jpeg %}&lt;/p&gt;

&lt;p&gt;Are you a technical recruiter?&lt;/p&gt;

&lt;p&gt;Is it starting to feel like a cold, cold, world out there?&lt;/p&gt;

&lt;p&gt;Like it or not, there are &lt;a href=&#34;http://techcrunch.com/2013/05/05/there-is-in-fact-a-tech-talent-shortage-and-there-always-will-be/&#34;&gt;a lot of companies competing for technical talent&lt;/a&gt; right now and it&amp;rsquo;s hard to differentiate yourself.  But you may be making mistakes that could be avoided, and overlooking things that could be used to help improve your conversion rate.  How would you like to source more talent, make your clients and recruits happier, and generally recruit like a boss?&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a developer that receives a fair share of attention from talent acquisition specialists, and I&amp;rsquo;m here to tell you about ten things you can do or stop doing to improve your success rate (from the other side, so you know it&amp;rsquo;s legit).&lt;/p&gt;

&lt;p&gt;I hope to help good recruiters source the talent they need to source, while making things a lot less irritating for the talent that gets spammed with endless offers to jump through administrative hoops and maybe get a new job offer.&lt;/p&gt;

&lt;p&gt;Here are Nate&amp;rsquo;s Do&amp;rsquo;s:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Hustle&lt;/li&gt;
&lt;li&gt;Flatter us&lt;/li&gt;
&lt;li&gt;Bribe us&lt;/li&gt;
&lt;li&gt;Get a technical person to contact candidates FIRST&lt;/li&gt;
&lt;li&gt;Cater to our laziness&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And here are Nate&amp;rsquo;s Don&amp;rsquo;ts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Message us or &amp;ldquo;connect&amp;rdquo; with us on LinkedIn&lt;/li&gt;
&lt;li&gt;Modify or botch our resume&lt;/li&gt;
&lt;li&gt;Act like what you&amp;rsquo;re selling is unqiue or indispensable&lt;/li&gt;
&lt;li&gt;Show up at our current place of employment&lt;/li&gt;
&lt;li&gt;Be clueless about technology&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let&amp;rsquo;s do this!&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Do&amp;rsquo;s&lt;/h1&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Hustle.&lt;/h2&gt;

&lt;p&gt;{%img /images/recruiter/hustle.png %}&lt;/p&gt;

&lt;p&gt;If you are recruiting you are most definitely selling.&lt;/p&gt;

&lt;p&gt;All of sales is a conversation.  It is about building a relationship, and it is about mutual fulfillment.  You need to get paid, and candidates need to have a good job.&lt;/p&gt;

&lt;p&gt;The worst way to sell something is this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Hey, uh, you need any X?&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;HELL NO!  I DO NOT NEED ANY X!  It immediately puts people on the defensive.  You&amp;rsquo;ve seen people botch these kinds of sales before, I guarantee it.  Whether they are selling Cutco knives, cable, or vacuum cleaners, you&amp;rsquo;ve seen someone try to peddle their wares this way and get shut down, hard.&lt;/p&gt;

&lt;p&gt;And what do they do after they get rejected?  They sulk away and never try again.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t be this guy.  Be the &lt;a href=&#34;http://www.amazon.com/gp/product/1591842158/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1591842158&amp;amp;linkCode=as2&amp;amp;tag=natlecwrionbu-20&#34;&gt;Ultimate Sales Machine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;{%img /images/recruiter/ultimate-sales-machine.jpeg %}&lt;/p&gt;

&lt;p&gt;Start a (two-way) conversation.  What are the needs of the people you are trying to recruit?  Who are they?  Where can you meet them in real life?&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say you want to hire PHP developers.  Where would you find such a rare creature?  Oh, I know!  On &lt;a href=&#34;http://arstechnica.com/civis/viewtopic.php?f=25&amp;amp;t=1172695&#34;&gt;LinkedIn&lt;/a&gt;, right?&lt;/p&gt;

&lt;p&gt;Wrong. Dead wrong. Every developer worth her salt is getting an endless parade of messages and contact requests on LinkedIn right now, and most of them aren&amp;rsquo;t worth digging into.  You might get lucky, but you probably won&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;Instead, look for PHP meetups in the area.  Alternatively, source at events such as hackathons and conventions, and take a legitimate interest in the lives of developers and their interests.  Most recruiters don&amp;rsquo;t seem to do this.  Intstead, they all stick to the same tired venues (career fairs, Dice, LinkedIn, etc.).&lt;/p&gt;

&lt;p&gt;This is the same reason why people pursuing mates are encouraged to go to bookstores, yoga classes, hiking groups and so on instead of bars and clubs.  The odds of meeting someone who is a good fit are just so much better.&lt;/p&gt;

&lt;p&gt;Because you are creating a true connection.  Because you are creating value.&lt;/p&gt;

&lt;p&gt;The truth is that your true competition isn&amp;rsquo;t other recruiters.  Most of them are pretty average at what they do.  Your competition is video games, the Internet, relationships, and all the other things that are more important to us than talking to you.&lt;/p&gt;

&lt;p&gt;Do yourself a favor and make it worth our while to talk to you.&lt;/p&gt;

&lt;p&gt;Hustle.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Flatter us.&lt;/h2&gt;

&lt;p&gt;{%img /images/recruiter/flattery.jpeg %}&lt;/p&gt;

&lt;p&gt;Are you mentioning specifics in your pitch about why you think the candidate would be a good fit, down to details such as &amp;ldquo;I really enjoyed &lt;a href=&#34;http://nathanleclaire.com/blog/2013/11/23/how-i-automated-finding-almost-anyones-email-address/&#34;&gt;your article on the Rapportive hack&lt;/a&gt;&amp;rdquo; or &amp;ldquo;Looks like you are a pretty active JavaScripter on Github.  We love active open source contributors!&amp;rdquo;?&lt;/p&gt;

&lt;p&gt;Many of the &lt;em&gt;best&lt;/em&gt; candidates have put stuff out there online for the world to see, because people who are great often love to share their greatness.  I would be willing to bet that 90% of recruiters do not flatter these guys and gals.  Perhaps they are simply too lazy or simple-minded.  They can&amp;rsquo;t see things from someone else&amp;rsquo;s perspective.&lt;/p&gt;

&lt;p&gt;Yet, they still expect people to endure the hassle of actually talking to them.&lt;/p&gt;

&lt;p&gt;Would you rather talk to someone who loves your work, and is familiar with it, or someone who is sending out the same spray-and-pray message to everyone in the area?  We are all human here, we love having our egos stroked.  And programmers have some of the biggest egos you&amp;rsquo;ll ever meet, which makes them especially vulnerable to this kind of flattery.&lt;/p&gt;

&lt;p&gt;So flatter us.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Bribe us.&lt;/h2&gt;

&lt;p&gt;{%img /images/recruiter/rubiks-cube.png %}&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not talking about huge stuff here.&lt;/p&gt;

&lt;p&gt;What I mean is, differentiate yourself by giving little gifts.  Know that the candidate you&amp;rsquo;re chasing loves coffee?  Send them a bag of beans or, better yet, take them out for a fancy Aeropress brew.  One time a recruiter dropped off a case of Red Bull at our office which, while violating my rule to not show up at our current place of employment (a major drag), at least showed that he knew where we were coming from a bit.&lt;/p&gt;

&lt;p&gt;Nothing gets a caffiene junkie&amp;rsquo;s attention better than free caffiene.&lt;/p&gt;

&lt;p&gt;Nothing gets a gamer&amp;rsquo;s attention like a Steam gift card (no matter how small).&lt;/p&gt;

&lt;p&gt;Carpet bomb big swaths of potential candidates with little trinkets and oddities if you can.&lt;/p&gt;

&lt;p&gt;Want some of the candidates you&amp;rsquo;re chasing to stare at your company&amp;rsquo;s logo for hours at a time?  Give them a branded Rubik&amp;rsquo;s cube.  Or give them a pen or mechanical pencil with your contact information - I never seem to be able to get enough pens. They always come in handy.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s the little things like this that will get candidates to start warming to you.  Look at it this way:  Let&amp;rsquo;s say you get a $1500 commission for each candidate that converts.  You spend $5 on gift cards for 5 candidates, and only one of those candidates converts.  You&amp;rsquo;re still $1475 ahead.&lt;/p&gt;

&lt;p&gt;Go ahead.  Bribe us.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Get a technical person to contact candidates FIRST.&lt;/h2&gt;

&lt;p&gt;I can&amp;rsquo;t seem to dig up the link, but I remember a case study from a start-up where they had technical people (VP Engineering, Lead Developer, Dev Manager etc.) contact candidates instead of recruiters.  This increased their response rate dramatically.&lt;/p&gt;

&lt;p&gt;This is not surprising to me.  Every time I receive an e-mail from a technical person, I&amp;rsquo;m way more inclined to respond because I feel like that person &amp;ldquo;gets&amp;rdquo; me.  I know that they will know what JavaScript and Python and MongoDB are.  I know that they have shared my pains and elations in the trenches working on a real-world technology project.  I can ask them what they think about e.g. unit testing and get a real answer.&lt;/p&gt;

&lt;p&gt;It is a lot more encouraging to hear from a technical person first, and then get handed off to HR / recruiting later.  So at least for the first e-mail, consider wrangling your friendly neighborhood developer into sending it.&lt;/p&gt;

&lt;p&gt;You probably don&amp;rsquo;t even have to convince them to write it themselves.  Just whip up a draft and have them run over it before sending it out.  If they are a good developer, they will get viscerally uncomfortable if they come across as sounding stupid and fix these parts for you.&lt;/p&gt;

&lt;p&gt;Get technical people to be the first point of contact for technical roles.&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Cater to our laziness&lt;/h2&gt;

&lt;p&gt;{%img /images/recruiter/lazy-cat.jpeg %}&lt;/p&gt;

&lt;p&gt;Remember that you&amp;rsquo;re fighting an uphill battle.  You have to actually persuade people to go through the (probably painful) process of interviewing at a company.  In doing this, they have to face something that is probably a great source of mental anguish for them (it is for most of us): the possibility of rejection.&lt;/p&gt;

&lt;p&gt;An interview is not a guaranteed offer.  It is an invitation to be rejected.  Therefore, the lazy person will avoid this unpleasantness altogether.  In order to go through the dog and pony show, they need a reason, and they need encouragement.&lt;/p&gt;

&lt;p&gt;They need to have a (probably powerful) incentive.  And every single roadblock, minor inconvinience or show-stopper they meet along the way is going to either chip away at that incentive, or destroy it completely.  They are going to be brutally apathetic towards you.&lt;/p&gt;

&lt;p&gt;Programmers especially are notorious for this.  Most of us decided to start doing what we do because we were sick of doing things manually, so we automated them instead.&lt;/p&gt;

&lt;p&gt;We are lazy.&lt;/p&gt;

&lt;p&gt;We may not respond to your emails right away, or at all.  We may not suggest a time to have a call.&lt;/p&gt;

&lt;p&gt;Instead of resenting this or trying to swim upstream against this natural way of things, use it to your advantage.&lt;/p&gt;

&lt;p&gt;Be persistent (but not pushy).  Ping us if we don&amp;rsquo;t e-mail you back over the course of a few days.  Don&amp;rsquo;t forget about us.&lt;/p&gt;

&lt;p&gt;Suggest a time to have a call.  They will correct you if it is no good.&lt;/p&gt;

&lt;p&gt;Instead of pestering them for a Word version of their resume, do the conversion yourself.&lt;/p&gt;

&lt;p&gt;All in all, just take the initiative and remember that the more work you make the candidate do, the less likely they are to convert.  They are busy and they are lazy.&lt;/p&gt;

&lt;p&gt;So cater to our laziness.&lt;/p&gt;

&lt;h1 id=&#34;toc_6&#34;&gt;Don&amp;rsquo;ts&lt;/h1&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;Message us or &amp;ldquo;connect&amp;rdquo; with us on LinkedIn&lt;/h2&gt;

&lt;p&gt;{%img /images/recruiter/linkedin.jpeg %}&lt;/p&gt;

&lt;p&gt;There may be some wiggle room here, and I know your gut reaction is probably vehemently against this, since it runs completely against everything you&amp;rsquo;ve probably been doing.&lt;/p&gt;

&lt;p&gt;But let me ask you this:  How&amp;rsquo;s it been working?  You have any numbers on what your actual conversion rate for candidates you attempt to recruit from LinkedIn?&lt;/p&gt;

&lt;p&gt;My guess is that it&amp;rsquo;s pretty abysmal.  Because it&amp;rsquo;s what everyone else is doing.  LinkedIn is a necessary evil that most of us use to maintain shallow business relationships.  For recruiters it looks like gold, since it&amp;rsquo;s a database of many possible candidates.&lt;/p&gt;

&lt;p&gt;But nothing beats an e-mail, and nothing gets ignored quicker than a LinkedIn message or a connect request from someone I don&amp;rsquo;t know.  Our e-mail inbox is where we all hang out all day, and it&amp;rsquo;s ever more personal than anything LinkedIn could ever hope to offer.  In fact, it&amp;rsquo;s why LinkedIn themselves spams your e-mail inbox so hard.  They know its power.  They&amp;rsquo;d like nothing more than to get their greedy little paws on all of your contact information.&lt;/p&gt;

&lt;p&gt;So if you can, send them an e-mail.  It&amp;rsquo;s usually not too hard to get ahold of someone&amp;rsquo;s email.  Github and personal sites are a good place to check, and a little Google-fu might do you good as well.  If these don&amp;rsquo;t yield anything, try to track it down through real people first.  Alternatively, get those people to make an introduction.&lt;/p&gt;

&lt;p&gt;You should only resort to LinkedIn tactics if you absolutely have to.  Nothing in life is free.&lt;/p&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;Modify or botch our resume&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; this advice goes beyond recruiters and into the realm of, say, consulting houses that are shopping around their candidates to prospective clients.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a geek.&lt;/p&gt;

&lt;p&gt;My resume is done in &lt;a href=&#34;http://stevehanov.ca/blog/index.php?id=56&#34;&gt;LaTeX&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I understand that PDF may not sometimes be the best format for your purposes, and don&amp;rsquo;t really mind if you port it to other formats, as long as it still looks nice.  I&amp;rsquo;m not super happy about it, since I much prefer the PDF version, but I don&amp;rsquo;t really mind.&lt;/p&gt;

&lt;p&gt;But God help you if you modify it.  You start getting into really dangerous territory, really fast.&lt;/p&gt;

&lt;p&gt;For starters, it could potentially be embarassing if you misrepresent the candidate.  They presumably put a lot of time and effort into the way they are presenting themselves professionally, and now you are mucking it all up.  Even seemingly mundane things could end up being very harmful later.  If the candidate finds out that you did this, they WILL hate you for life.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t modify even a single word on our resume.  Just don&amp;rsquo;t.&lt;/p&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;Act like what you&amp;rsquo;re selling is unique or indispensable&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re not talking to you because you&amp;rsquo;re unique or special or indispensable.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re talking to you because we&amp;rsquo;re possibly interested in something that you&amp;rsquo;re selling.&lt;/p&gt;

&lt;p&gt;And whatever it is that you&amp;rsquo;re selling, we could get it somewhere else.&lt;/p&gt;

&lt;p&gt;So don&amp;rsquo;t act like you&amp;rsquo;re God&amp;rsquo;s gift to job-seekers, or whatever, even if you work for a hot company that everyone wants to work at.  You will turn off far more candidates than you will impress with arrogance.  Instead, adopt an attitude that you are trying to come to a mutually beneficial arrangement.  Both parties can benefit, and both parties should be respectful of the other.  As mentioned earlier in this essay, getting a new job is a pain.  Do your best to alleviate this pain.&lt;/p&gt;

&lt;p&gt;Candidate can only talk at six?  That&amp;rsquo;s when you&amp;rsquo;re talking.&lt;/p&gt;

&lt;p&gt;The more you act entitled and indispensable, the worse your conversion rates will be.&lt;/p&gt;

&lt;h2 id=&#34;toc_10&#34;&gt;Show up at our current place of employment&lt;/h2&gt;

&lt;p&gt;I can&amp;rsquo;t even believe that this one needs to be said, but there have been a few instances with my current job alone that make me feel like there are some recruiters with screws loose in their heads.&lt;/p&gt;

&lt;p&gt;I already mentioned the recruiter that dropped off the Red Bull (he was actually looking to talk to a specific person employed there).  Recently, however, I had another run-in that was more dramatic.  Let me tell you a story.&lt;/p&gt;

&lt;p&gt;I was starting to get into my morning groove, sipping some coffee when I got a Skype message from Jill, our administrative assistant.&lt;/p&gt;

&lt;p&gt;JILL: &amp;ldquo;&lt;em&gt;[some recruiter I&amp;rsquo;d never heard of]&lt;/em&gt; from &lt;em&gt;[recruiting agency]&lt;/em&gt; is asking for you&amp;rdquo;&lt;/p&gt;

&lt;p&gt;ME: &amp;ldquo;Wait, like he&amp;rsquo;s literally here at the front desk?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;JILL: &amp;ldquo;He&amp;rsquo;s here, at the front desk&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I was going to ignore it, hoping he&amp;rsquo;d go away, when I got another message from Jill:&lt;/p&gt;

&lt;p&gt;JILL: &amp;ldquo;Please come save me&amp;rdquo;&lt;/p&gt;

&lt;p&gt;So, I left my desk had the flow of my morning interrupted to go talk to some random guy, who happened to have come across my profile on LinkedIn.&lt;/p&gt;

&lt;p&gt;I called him out for being rude and he scurried away, insisting that he was &amp;ldquo;trying to help our company recruit&amp;rdquo; and not trying to recruit me.  It left me pretty appalled that someone would show up and interrupt my day unprompted for their own purposes, whatever they may be.&lt;/p&gt;

&lt;p&gt;Honestly?  What the fuck, recruiters?&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t show up at someone&amp;rsquo;s current place of employment.&lt;/p&gt;

&lt;h2 id=&#34;toc_11&#34;&gt;Be clueless about technology&lt;/h2&gt;

&lt;p&gt;{%img /images/recruiter/clueless-recruiter.jpeg %}&lt;/p&gt;

&lt;p&gt;More than anything else, this will hurt your performance and get you all the worst kinds of candidates.&lt;/p&gt;

&lt;p&gt;How can you possibly hope to recruit people if you don&amp;rsquo;t understand what they do?&lt;/p&gt;

&lt;p&gt;If you think you don&amp;rsquo;t need to learn about technology to recruit technical candidates, then I honestly hope that you fail miserably.  You are doing a disservice to everyone involved and you are the reason that recruiters get a bad rap.&lt;/p&gt;

&lt;p&gt;For instance, if you need to recruit Java folks, know what Java is (and please for the love of God know the difference between Java and JavaScript).  Create a project in it.  Try to learn at least a little bit of the fundamentals.  If candidates are any good they will ask you questions about technical things.  Know what &lt;a href=&#34;http://www.eclipse.org/jetty/&#34;&gt;Jetty&lt;/a&gt;, &lt;a href=&#34;http://www.jboss.org/jbossas&#34;&gt;JBoss&lt;/a&gt;, and &lt;a href=&#34;https://code.google.com/p/mockito/&#34;&gt;Mockito&lt;/a&gt; are.&lt;/p&gt;

&lt;p&gt;Until you have this knowledge, you will not recruit people who are legitimately excited and enthusiastic to talk to you.&lt;/p&gt;

&lt;p&gt;You will recruit people who see you as a necessary evil.&lt;/p&gt;

&lt;p&gt;Is that what you want?&lt;/p&gt;

&lt;p&gt;If this intimidates you, just ask your friendly neighborhood developer to help.  Perhaps they can whiteboard some things out for you so that you understand them better, or walk you through basic programming stuff.  Many great developers LOVE teaching, and they will be excited that you want to know more about what they do.  Taking an interest in someone is one of the most sure-fire ways to make them like you.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t be clueless about technology.&lt;/p&gt;

&lt;h1 id=&#34;toc_12&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This was a long-winded article but I hope it makes the recruitment process a lot more comfortable for everyone.&lt;/p&gt;

&lt;p&gt;Please send me your crazy recruiter stories if you have them!  I&amp;rsquo;d love to hear.&lt;/p&gt;

&lt;p&gt;Stay sassy Internet, and double those acquisitions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nathan&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Fixing Cygwin&#39;s SSL issues with git clone / c_rehash bug</title>
      <link>http://localhost:1313/posts/2014-03-23-cygwin-git-clone-ssl-issue-c_rehash-openssl-not-found</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/posts/2014-03-23-cygwin-git-clone-ssl-issue-c_rehash-openssl-not-found</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;Cygwin&amp;rsquo;s git clone drama&lt;/h1&gt;

&lt;p&gt;{%img /images/cygwin-ssl/cygwin.png %}&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Oh, you.&lt;/h2&gt;

&lt;p&gt;When I am working on Windows for the various reasons which compel one to work on Windows I often use &lt;a href=&#34;http://www.cygwin.com&#34;&gt;Cygwin&lt;/a&gt; to provide UNIX-like functionality on the command line (cmd.exe leaves a lot to be desired).  Since a vital part of my workflow on any OS is &lt;a href=&#34;http://git-scm.com&#34;&gt;git&lt;/a&gt; I happily installed git using the Install.exe workflow that Cygwin provides.&lt;/p&gt;

&lt;p&gt;To my surprise (and, I&amp;rsquo;m not going to deny it, slight nerd-rage) when I attempted to &lt;code&gt;git clone&lt;/code&gt; a repository from Github I was greeted by an error message like this one:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/foo/bar
error: SSL certificate problem, verify that the CA cert is OK. Details:
error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK, so I have an SSL issue.  Running through the Setup.exe with Cygwin again and installing &lt;code&gt;ca-certificates&lt;/code&gt; and &lt;code&gt;openssl&lt;/code&gt; didn&amp;rsquo;t fix it, and eventually I came across &lt;a href=&#34;http://stackoverflow.com/questions/3777075/ssl-certificate-rejected-trying-to-access-github-over-https-behind-firewall&#34;&gt;this Stack Overflow post&lt;/a&gt; which described my exact issue.&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;On the hunt for solutions&lt;/h1&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;One proposed solution&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ git config --global http.sslVerify false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SERIOUSLY!?!?&lt;/p&gt;

&lt;p&gt;No way I&amp;rsquo;m going to turn off SSL just to try and workaround this issue.  I don&amp;rsquo;t like getting MITMed.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;A much better proposed solution&lt;/h2&gt;

&lt;p&gt;Also from Stack Overflow:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /usr/ssl/certs
$  curl http://curl.haxx.se/ca/cacert.pem | awk &#39;split_after==1{n++;split_after=0} /-----END CERTIFICATE-----/ {split_after=1} {print &amp;gt; &amp;quot;cert&amp;quot; n &amp;quot;.pem&amp;quot;}&#39;
$ c_rehash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK, this is headed in the right direction, I can tell.  I had to manually create the &lt;code&gt;/usr/ssl/certs&lt;/code&gt; directory (probably because I hadn&amp;rsquo;t installed OpenSSL yet when I tried this), but even after getting OpenSSL &lt;code&gt;c_rehash&lt;/code&gt; was giving me an error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ c_rehash
c_rehash: rehashing skipped (&#39;openssl&#39; program not available)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty odd, since just typing &lt;code&gt;openssl&lt;/code&gt; on the CLI clearly indicated that it was present.&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Debuggin&amp;rsquo; some Perl code&lt;/h2&gt;

&lt;p&gt;Nothing too fruitful was turning up on Google for this (the &lt;a href=&#34;http://koti.kapsi.fi/ptk/postfix/c_rehash.txt&#34;&gt;original program source&lt;/a&gt; was, though :P) so I dug into the program source (Perl) and found this bit at the top:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $openssl;

my $dir = &amp;quot;/usr/lib/ssl&amp;quot;;

if(defined $ENV{OPENSSL}) {
    $openssl = $ENV{OPENSSL};
} else {
    $openssl = &amp;quot;openssl&amp;quot;;
    $ENV{OPENSSL} = $openssl;
}

$ENV{PATH} .= &amp;quot;:$dir/bin&amp;quot;;

if(! -x $openssl) {
    my $found = 0;
    foreach (split /:/, $ENV{PATH}) {
        if(-x &amp;quot;$_/$openssl&amp;quot;) {
            $found = 1;
            last;
        }   
    }
    if($found == 0) {
        print STDERR &amp;quot;c_rehash: rehashing skipped (&#39;openssl&#39; program not available)\n&amp;quot;;
        exit 0;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sprinkling some liberal debugging statements into that yielded me the information that &lt;code&gt;c_rehash&lt;/code&gt; was finding the relevant directories (and consequently the &lt;code&gt;openssl&lt;/code&gt; binary) but the file wasn&amp;rsquo;t showing up as executable.  Some Googling turned up stuff like &lt;a href=&#34;http://cygwin.com/ml/cygwin/2007-05/msg00681.html&#34;&gt;this&lt;/a&gt;, which made me wonder&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;If &lt;em&gt;this&lt;/em&gt; solution would work&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ which openssl
/cygdrive/c/Program Files (x86)/Git/bin/openssl
$ chmod +x /cygdrive/c/Program\ Files\ \(x86\)/Git/bin/openssl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It did!  You have to run Cygwin as administrator to have the proper permissions though to change those file permissions though.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;c_rehash&lt;/code&gt; then went through without a hitch, Which finally allowed &lt;code&gt;git clone&lt;/code&gt; to work.&lt;/p&gt;

&lt;h1 id=&#34;toc_7&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Whew!  That was exhausting.  Time to do some programming to unwind :)&lt;/p&gt;

&lt;p&gt;Until next time, stay sassy Internet.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nathan&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Learn Node.js The Troll Way</title>
      <link>http://localhost:1313/posts/2013-02-06-learn-node-dot-js-the-troll-way</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/posts/2013-02-06-learn-node-dot-js-the-troll-way</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Server Side JavaScript&lt;/h2&gt;

&lt;p&gt;As many of you are probably aware, &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; is all the rage with the kids these days.  It&amp;rsquo;s so popular that users even have the nerve to &lt;a href=&#34;http://code.google.com/p/v8/issues/detail?id=847#c15&#34;&gt;gall Google developers&lt;/a&gt;, insisting that the V8 JavaScript engine is important for things outside of mere Chrome.  Node has rapidly been evolving and maturing into the new hotness of the web development community.  Its core is driven by the idea of asynchronous input and output,
a way to manage the latency inherent in developing applications for the web.  With Node, you gain the ability to write JavaScript which runs on the server-side of an application- and the somewhat eyebrow-raising ability to create a server within JavaScript itself.&lt;/p&gt;

&lt;p&gt;Throw in a sweet package manager for every sort of JS voodoo you can imagine (&lt;a href=&#34;https://npmjs.org/&#34;&gt;npm&lt;/a&gt;), and you&amp;rsquo;ve suddenly opened up the door to a whole new world of handy tools and tricks, accessible to many developers due to the ubiquitous nature of JavaScript on the modern web.  The V8 JavaScript engine on which it is based is has performed pretty well for a web-based language in &lt;a href=&#34;http://shootout.alioth.debian.org/u32/which-programming-languages-are-fastest.php&#34;&gt;benchmarks&lt;/a&gt;.  We all know that benchmarks are even worse dirty lies than statistics, so what I personally think is really cool about Node is that it mandates one to approach concurrency with a direct focus from the start of application development.  Surely there&amp;rsquo;s a lot to be said for not having to rip off and reinvent the wheel of horizontal scalability.  But I digress.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Screen Scraping With Node.js&lt;/h2&gt;

&lt;p&gt;{% img /images/skyrim-guard.jpeg Go cast your fancy JavaScript somewhere else! %}&lt;/p&gt;

&lt;p&gt;The purpose of this article is to give a quick flyby example, in which I will be demonstrating Node.js by constructing a screen-scraping bot to troll my brother on Reddit.  I had an idea to build an application which uses the Reddit API, to spam my brother&amp;rsquo;s account with Skyrim quotes/dialogue in comments for entertainment purposes.  If he ever were to reply, bewildered, my bot would ping back: &lt;em&gt;&amp;ldquo;Problem, theonewhoquestions?&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Naturally, in order to do this, I needed to gather the Skyrim intel (quotes) first.  Originally I set out to write the crawler in Python as I have some experience with the venerable &lt;a href=&#34;http://www.crummy.com/software/BeautifulSoup/&#34;&gt;BeautifulSoup&lt;/a&gt; Module.  But I was already using Node a bit as a result of Twitter&amp;rsquo;s Bootstrap framework, and I was curious to challenge myself to actually build something with it for fun and comprehensive learning.  So, I decided to investigate.&lt;/p&gt;

&lt;p&gt;Turns out there are a few modules that come in handy for a task like this in Node.
&lt;code&gt;javascript
    var jsdom = require(&#39;jsdom&#39;);
&lt;/code&gt;
This is the idiomatic way to import modules in Node.  The jsdom module for Node enables us to simulate a DOM environment which many of us familiar with (working with client side code) for use in our Node script.  And naturally, it&amp;rsquo;s as easy as one, two, callback!&lt;/p&gt;

&lt;p&gt;Since I am familiar with using jQuery to parse the DOM, I opted to use it to extract the quotes from &lt;a href=&#34;http://www.uesp.net/wiki/Skyrim:Guard&#34;&gt;this website&lt;/a&gt;, where they are contained within table cells ripe for the picking.  To do this with the jsdom module, you call the &lt;code&gt;jsdom.env&lt;/code&gt; method.  As arguments we pass in the address of the HTML we wish to parse.
``` javascript
    jsdom.env(&amp;lsquo;&lt;a href=&#34;http://www.uesp.net/wiki/Skyrim:Guard&#39;&#34;&gt;http://www.uesp.net/wiki/Skyrim:Guard&#39;&lt;/a&gt;,
      [ &amp;lsquo;&lt;a href=&#34;http://code.jquery.com/jquery.min.js&#39;&#34;&gt;http://code.jquery.com/jquery.min.js&#39;&lt;/a&gt; ],
      function(errors, window) {
        var $ = window.$;
        $ = stripTags($);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var $skyrim_quotes = $(&#39;tr td&#39;).filter( function(element, index, array) {
        if ( $(index).html().match(/^&amp;quot;.*&amp;quot;$/) ) {
          return true;
        } else {
          return false;
        }
    });

    $skyrim_quotes.each( function() {
      var $scopedElem = $(this);
      var content = $scopedElem.html().stripHTMLSpecialChars().stripDoubleQuotes();

      console.log( content );

    }); 
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;There&#39;s a lot going on here that merits explanation, so I will take a second to break down in more detail what is going on in this chunk of code.  We have an instance of the `jsdom` object so we can call the `env` method to bootstrap up a DOM to parse.  The first argument to this method (`&#39;http://www.uesp.net/wiki/Skyrim:Guard&#39;`) is the URL to query for the HTML to instantiate this DOM with.  You can also just pass in plain old HTML as a string if you happen to have some of that laying around in dire need of parsing.

The second argument to the `env` method is a list of scripts to be included in the virtual window (DOM).
``` javascript
    [ &#39;http://code.jquery.com/jquery.min.js&#39; ],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this instance and many of the examples given on the &lt;code&gt;jsdom&lt;/code&gt; &lt;a href=&#34;https://github.com/tmpvar/jsdom&#34;&gt;Github page&lt;/a&gt;, we include the jQuery library.  If one wanted to use Mootools or Underscore.js, I imagine that is also totally doable, although I have no anecdotal evidence to support this hypothesis.  For my purposes, jQuery was a comfortable and effective fit.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;third&lt;/em&gt; argument to the &lt;code&gt;jsdom.env&lt;/code&gt; method, and arguably the most critical, is a callback function to be executed once the response has been received from the server (or immediately, in the case of passing in your own HTML).&lt;br /&gt;
&lt;code&gt;javascript
      function(errors, window) {
        // ...
      }
&lt;/code&gt;
It takes two arguments:  The first is called &lt;code&gt;errors&lt;/code&gt; and is an list of errors which you can inspect if something in the &lt;code&gt;env&lt;/code&gt; method goes wonky (in the code I&amp;rsquo;ve presented here &lt;code&gt;errors&lt;/code&gt; is ignored, although you still need to have it in the definition of your callback function).  The second is called &lt;code&gt;window&lt;/code&gt; and it is the coup de grâce of what we are seeking: a bootstrapped, &amp;ldquo;invisible&amp;rdquo; DOM that our script can parse.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s worth pausing for a second here to think about why the &amp;ldquo;Node way&amp;rdquo; results in what may seem to some people to result in an expansive sea of callback spaghetti (if JavaScript didn&amp;rsquo;t already appear to you to be an expansive sea of said callback spaghetti).  Any time that Node encounters a situation which otherwise might block the execution of code (such as an HTTP GET request to an external service), it simply defines a callback function to be executed when that &lt;em&gt;event&lt;/em&gt; occurs (i.e. when your GET request is finished).&lt;/p&gt;

&lt;p&gt;But onward to the trolling we must progress!  The very first thing I do in this brave new callback where we will be doing our DOM parsing is define a few variables.
&lt;code&gt;javascript
    var $ = window.$;
    $ = stripTags($);
&lt;/code&gt;
&lt;code&gt;jsdom&lt;/code&gt; allows access to the jQuery object through the &lt;code&gt;window&lt;/code&gt; object, and as I would be accessing it often enough to justify a shorthand method of access, that is what &lt;code&gt;var $ = window.$;&lt;/code&gt; is all about.  So what&amp;rsquo;s with that &lt;code&gt;stripTags&lt;/code&gt; call?  Well, the values that I was after were plain text without any HTML inside, as said HTML in a Reddit comment might shatter the illusion that it could be a person typing said Skyrim quotes instead of a robot.  So, for example, some of the entries in the table cells have words &lt;em&gt;in italics&lt;/em&gt; and I needed to get rid of these tags.  Ergo, my &lt;code&gt;stripTags&lt;/code&gt; function.
``` javascript
    /* consumes jQuery object
       returns jQuery object */&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function stripTags($) {

  // Cleaning out anchor tags, italics, and one span which is a warning not
  // to edit for nice, readable quotes

  $(&#39;tr td a&#39;).contents().unwrap();
  $(&#39;tr td i&#39;).contents().unwrap();
  $(&#39;span&#39;).contents().unwrap();
  $(&#39;small&#39;).contents().unwrap();

  return $;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Using `unwrap()` on client-side code willy-nilly like this would more likely than not b0rk some critical piece of functionality in your app, but I only care about the data that I am scraping so it&#39;s not really relevant here.  It gets the job done, which is to turn quotes which in their raw form look like

&amp;lt;blockquote&amp;gt;&amp;quot;You here to see the &amp;amp;lt;a href=&amp;quot;/wiki/Skyrim:Igmund&amp;quot; title=&amp;quot;Skyrim:Igmund&amp;quot;&amp;amp;gt;Jarl&amp;amp;lt;/a&amp;amp;gt;? No sudden moves, understand?&amp;quot;&amp;lt;/blockquote&amp;gt;

into a nice clean version that looks like this:

&amp;lt;blockquote&amp;gt;&amp;quot;You here to see the Jarl? No sudden moves, understand?&amp;quot;&amp;lt;/blockquote&amp;gt;

Thanks to that `$(&#39;tr td a&#39;).contents().unwrap();` statement.  It&#39;s a little bit of extra work, but trolling is serious business, and well worth the investment.  And as I said before, applying these operations globally to the DOM on a large-scale project would be overkill, but for my purposes here it was grand.

The next step was the find the quotes themselves.  A simple little `$(&#39;tr td&#39;)` yielded very good results, mostly what I was looking for, but there happened to be a bit of extra flotsam and jetsam table cells which contained content I was not after at all.  So I needed some way to differentiate the Skyrim quotes from anything else that happened to be in a table cell which was not relevant to the task at hand.  Hm, surely I can come up with a regular expression to help with that?
``` javascript
    var $skyrim_quotes = $(&#39;tr td&#39;).filter( function(element, index, array) {
        if ( $(index).html().match(/^&amp;quot;.*&amp;quot;$/) ) {
          return true;
        } else {
          return false;
        }
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have the lovely jQuery method &lt;code&gt;filter&lt;/code&gt; being used to apply the simple regexp pattern &lt;code&gt;/^&amp;quot;.*&amp;quot;$/&lt;/code&gt; to our selection and returning only the elements that match.  This knocks out everything which does not adhere strictly to the &amp;ldquo;quote&amp;rdquo; pattern (string&amp;rsquo;s first and last character are a double quote - &lt;code&gt;&amp;quot;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Almost there now- still I needed to strip some HTML special characters such as &lt;code&gt;&amp;amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;amp;gt;&lt;/code&gt; to get them especially clean.  And, of course, to strip the double quotes for aesthetic purposes.  I decided to bring a gun to a knife fight and add methods to &lt;code&gt;String&lt;/code&gt;&amp;rsquo;s prototype.
``` javascript
    String.prototype.stripHTMLSpecialChars = function () {
      // There&amp;rsquo;s a few quirks in the soup
      var str = this.replace(/&amp;lt;/, &amp;ldquo;);
      str = str.replace(/&amp;gt;/, &amp;ldquo;);
      str = str.replace(/&amp;nbsp;[sic]/, &amp;lsquo;y&amp;rsquo;);
      return str;
    };&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;String.prototype.stripDoubleQuotes = function() {
  return this.slice(1, this.length - 1);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The solution for `stripDoubleQuotes()` feels a little bit kludgey, so I&#39;d be curious to hear if anyone else has a better idea (I&#39;m sure JavaScript is capable of sed-like string manipulation antics but this was this quickest way I could think of accomplishing the goal).  `stripHTMLSpecialChars()`&#39;s removal of these &amp;quot;quirks&amp;quot; was based on a quick grepping of the results I was getting back to see what HTML special characters were being returned.  Used in the `jsdom` callback, our &amp;quot;sanitizing&amp;quot; and printing to the console of these quotes looks like this:
``` javascript
    $skyrim_quotes.each( function() {
      var $scopedElem = $(this);
      var content = $scopedElem.html().stripHTMLSpecialChars().stripDoubleQuotes();
      console.log(content);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bravo!  Now we have our hot, fresh, Skyrim quotes, eager to troll unsuspecting brothers with.  I opted to stash these quotes in a database (sqlite3) so I didn&amp;rsquo;t have to ping the Skyrim wiki&amp;rsquo;s servers every time they were needed (and also to keep track of which ones had been used already).  I won&amp;rsquo;t go into a lot of gory details here about how working with a database in Node.js is, but suffice it to say for my purposes it was actually fairly straightforward.  Node has a handy &lt;code&gt;sqlite3&lt;/code&gt; module that made working with the database fairly simple.  As it turns out, JavaScript being single-threaded-async is quite handy for tasks like this because the thread isn&amp;rsquo;t going to block on the expensive IO operations.  If you want to pick on PHP, for instance, just note how long it takes a PHP application to make, say, 25 requests to external servers versus Node&amp;rsquo;s same attempt with concurrency.&lt;/p&gt;

&lt;p&gt;Stay tuned for the followup where I create the actual robot to talk to my brother, and if you&amp;rsquo;re keen feel free to &lt;a href=&#34;https://github.com/nathanleclaire/learnnodethetrollway&#34;&gt;check out the source&lt;/a&gt; on Github.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How To Get Banned From /r/javascript - Promote Original Content</title>
      <link>http://localhost:1313/posts/2014-01-31-how-to-get-banned-from-slash-r-slash-javascript-promote-original-content</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/posts/2014-01-31-how-to-get-banned-from-slash-r-slash-javascript-promote-original-content</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Good, The Bad, and The Ugly of Sails.js, Realtime JavaScript MVC Framework</title>
      <link>http://localhost:1313/posts/2013-12-28-the-good-the-bad-and-the-ugly-of-sails-dot-js-realtime-javascript-mvc-framework</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/posts/2013-12-28-the-good-the-bad-and-the-ugly-of-sails-dot-js-realtime-javascript-mvc-framework</guid>
      <description>

&lt;p&gt;Over the Christmas vacation time that I&amp;rsquo;ve been taking I&amp;rsquo;ve been finding myself drawn back to &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;, mostly for the promise of rapid web application development and not having to switch languages when changing from working on the server-side and the client-side.  As part of my interest in developing applications using &lt;a href=&#34;http://www.html5rocks.com/en/tutorials/websockets/basics/&#34;&gt;WebSockets&lt;/a&gt; for their real-time capabilities, I looked into &lt;a href=&#34;http://derbyjs.com/&#34;&gt;Derby&lt;/a&gt; and &lt;a href=&#34;https://www.meteor.com/&#34;&gt;Meteor&lt;/a&gt; and eventually I stumbled across &lt;a href=&#34;http://sailsjs.org/&#34;&gt;Sails.js&lt;/a&gt;, the new kid on the block.  It seemed very promising and addressed some issues that I had with Derby and with Meteor.  Namely, both of those frameworks seem very tightly coupled from the client to the server and I wanted something that would provide more flexibility while still allowing me to develop rapidly.  So, I decided to begin prototyping out my new side project in Sails and naturally I developed a variety of opinions to rant about.  Enjoy.&lt;/p&gt;

&lt;p&gt;{% img /images/sails/clint-eastwood.jpeg My face when developing. %}&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;The Good&lt;/h1&gt;

&lt;p&gt;{% img /images/sails/thegood.jpeg %}&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://sailsjs.org/#!&#34;&gt;Sails.js&lt;/a&gt; makes getting things started ridiculously quick.  You run &lt;code&gt;sails new myApp&lt;/code&gt; to create the application skeleton.  Then, to create a Controller and Model for some data that you&amp;rsquo;re going to be working with, you run &lt;code&gt;sails generate foo&lt;/code&gt; (&lt;code&gt;foo&lt;/code&gt; being the name of your model).  You configure the model really simply:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;module.exports = {
    adapter: &#39;sails-redis&#39;,
    attributes: {
        content: &#39;string&#39;,
        userName: &#39;string&#39;,
        userId: &#39;int&#39;,    // &amp;quot;foreign key&amp;quot;
        chatroomId: &#39;int&#39; // &amp;quot;foreign key&amp;quot;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sails uses &lt;a href=&#34;https://npmjs.org/package/waterline&#34;&gt;Waterline&lt;/a&gt; as its ORM, and it provides a lot of power for developing rapidly.  The &lt;code&gt;adapter&lt;/code&gt; field dictates where the data will be stored, and you can mix and match, so you can have some models stored in MySQL and others in Redis, for instance.  I think this is a really cool feature.  You can set validation, etc. on them.  You can write custom methods on your models to extract &amp;ldquo;higher-order&amp;rdquo; data from them.  Best of all, just having a model gets you a ton of routes (CRUD blueprints and REST endpionts) out of the box (and they &lt;a href=&#34;http://sailsjs.org/#!documentation/sockets&#34;&gt;all work with Websockets&lt;/a&gt;!):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Backbone Conventions
GET   :    /:controller                 =&amp;gt; findAll()
GET   :    /:controller/read/:id        =&amp;gt; find(id)
POST  :    /:controller/create          =&amp;gt; create()
POST  :    /:controller/create/:id      =&amp;gt; create(id)
PUT   :    /:controller/update/:id      =&amp;gt; update(id)
DELETE:    /:controller/destroy/:id     =&amp;gt; destroy(id)

# You can also explicitly state the action
GET   :    /:controller/find            =&amp;gt; findAll()
GET   :    /:controller/find/:id        =&amp;gt; find(id)
POST  :    /:controller/create          =&amp;gt; create(id)
PUT   :    /:controller/update/:id      =&amp;gt; update(id)
DELETE:    /:controller/destroy/:id     =&amp;gt; destroy(id)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, for instance, if you run &lt;code&gt;sails lift&lt;/code&gt; to start your app, hitting&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://localhost:1337/something/create?content=hello&amp;amp;userName=Nate&amp;amp;userId=1&amp;amp;chatroomId=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will add a new instance of the model to your datastore.  We did nothing manually to address this (so long &lt;code&gt;$_GET&lt;/code&gt; and &lt;code&gt;$_POST&lt;/code&gt;, it&amp;rsquo;s been&amp;hellip; okay).  And you can see everything that&amp;rsquo;s been added at &lt;code&gt;localhost:1337/something/&lt;/code&gt; without having to configure anything, althogh Sails makes it easy to change things around to your heart&amp;rsquo;s content by setting properties in the Controller and &lt;code&gt;config/routes.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Underneath the slick outer layer, Sails uses a lot of well-known and proven modules, most notably &lt;a href=&#34;http://expressjs.com/&#34;&gt;Express&lt;/a&gt;, and it makes it easy to reach to the underlying layer to configure things / do something specific/different (but does not awkwardly leak abstractions).  Additionally, serving of static assets never gave me any trouble and I just added new folders when I needed them.  Not having to worry about this was really nice when developing with &lt;a href=&#34;http://angularjs.org/&#34;&gt;Angular&lt;/a&gt;, which mandates a lot of client-side includes.&lt;/p&gt;

&lt;p&gt;In summary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Database-agnostic ORM that is simple, but powerful and flexible as well&lt;/li&gt;
&lt;li&gt;Developing routes / REST APIs is ridiculously fast - writing tiny amounts of code gets you a ton! (including WebSockets support)&lt;/li&gt;
&lt;li&gt;Lots of stuff &amp;ldquo;just works&amp;rdquo; without making you think about things too much, but Sails does not try to conceal with &amp;ldquo;magic&amp;rdquo;&lt;/li&gt;
&lt;li&gt;The Sails.js team has done a really good job of laying things out well to be extensible- and they have well-thought-out solutions that address many common issues e.g. &lt;a href=&#34;http://sailsjs.org/#!documentation/policies&#34;&gt;policies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;The Bad&lt;/h1&gt;

&lt;p&gt;{% img /images/sails/thebad.jpeg %}&lt;/p&gt;

&lt;p&gt;Sails is a young framework so sometimes issues come up that can be frustrating to address (since there are not that many users yet, therefore there are not that many resources on StackOverflow etc.).  For instace, when I wanted to start using Redis as a datastore for chat room comments, I tried running &lt;code&gt;npm install sails-redis&lt;/code&gt;.  This seemed to go off without a hitch but when I ran &lt;code&gt;sails lift&lt;/code&gt; I got an error indicating that the &lt;code&gt;sails-redis&lt;/code&gt; module could not be found.  It was very bizarre but then I tracked down &lt;a href=&#34;https://github.com/balderdashy/sails-redis/issues/3&#34;&gt;this Github issue&lt;/a&gt; which pointed out there was no source code in the npm package!!  I was able to install the package from GitHub but it was very frustrating to blow time on something like that when ostensibly the framework allows you to develop rapidly.&lt;/p&gt;

&lt;p&gt;For me personally (and I think &lt;a href=&#34;https://github.com/balderdashy/sails/issues/1239&#34;&gt;others share the sentiment&lt;/a&gt;) I think that generators should also provide you with unit test skeletons, and that Sails should address this concern a lot better.  If it&amp;rsquo;s going to be production-ready top-notch support for testing will be pretty critical.  I wouldn&amp;rsquo;t want to deploy an application that didn&amp;rsquo;t have at least some unit tests, especially for mission-critical parts of the app.  As it stands right now it&amp;rsquo;s not really clear how to test your Sails application.  We need a &lt;code&gt;sails test&lt;/code&gt; command and documentation in this regard!&lt;/p&gt;

&lt;p&gt;For a framework that touts performance as a major benefit, I find that &lt;code&gt;sails lift&lt;/code&gt; takes a pretty long time to start up (granted, it is doing a lot - if you run it with &lt;code&gt;--verbose&lt;/code&gt; option you can see all of the route binding etc. it is doing).  This would be okay if you only had to do it once, but every time you change things (models, controllers, routes, etc.) you have to stop and start &lt;code&gt;sails lift&lt;/code&gt;.  So, to have either code hot-swapping or a &lt;code&gt;sails lift&lt;/code&gt; that starts up lightning-fast would make Sails much more pleasant to use.  I&amp;rsquo;m curious if performance can be improved in this regard.&lt;/p&gt;

&lt;p&gt;The documentation, particularly when it came to using &lt;a href=&#34;http://sailsjs.org/#!documentation/sockets&#34;&gt;Sockets&lt;/a&gt;, was hard to understand as someone who is a newcomer to &lt;a href=&#34;http://socket.io&#34;&gt;socket.io&lt;/a&gt;.  Their included &lt;code&gt;app.js&lt;/code&gt; didn&amp;rsquo;t really clarify things too well, and so I had to rely on &lt;a href=&#34;http://net.tutsplus.com/tutorials/javascript-ajax/working-with-data-in-sails-js/&#34;&gt;this example from NetTuts&lt;/a&gt; to make sense of how to accomplish what I was trying to do.  So I think you could say that the documentation, though absolutely stellar in some areas, could use some bit of work.&lt;/p&gt;

&lt;p&gt;In summary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Since it is new, it can cause frustrating problems you will likely never run into with Django etc.&lt;/li&gt;
&lt;li&gt;In my opinion generators should also include tests (at least make it optional)&lt;/li&gt;
&lt;li&gt;Documentation is lacking in some ways&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sails lift&lt;/code&gt; takes longer than I&amp;rsquo;d like to start up and has to be restarted frequently&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;The Ugly&lt;/h1&gt;

&lt;p&gt;{% img /images/sails/theugly.jpeg %}&lt;/p&gt;

&lt;p&gt;At the time of writing, &lt;a href=&#34;https://travis-ci.org/balderdashy/sails&#34;&gt;their build is listed as not passing on TravisCI&lt;/a&gt;, and the sticker on their Github page says so.  That doesn&amp;rsquo;t exactly send the right kind of message you want to send with your project.  Now, be aware that I cloned the repository and ran all of the tests locally, and they all passed with Node &lt;code&gt;v0.10.24&lt;/code&gt; and &lt;code&gt;v0.11.9&lt;/code&gt;, but not with a previous version of &lt;code&gt;v0.10.*&lt;/code&gt; that I had (can&amp;rsquo;t remember which unfortunately).  So, perhaps it&amp;rsquo;s more of a TravisCI / versioning issue than a Sails issue, but I think that&amp;rsquo;s a big public-facing thing to overlook.&lt;/p&gt;

&lt;p&gt;Something that&amp;rsquo;s really unfortunate about &lt;a href=&#34;https://github.com/balderdashy/waterline&#34;&gt;Waterline&lt;/a&gt;, the aforementioned ORM that Sails uses, is that it does not support associations (relational data) at the moment.  This seems like a really huge issue / something that I would expect to be a huge cornerstone of any ORM to not have support for right away, and it was really frustrating to find out midway through starting to put together an app that has a lot of relational data.  That being said, they are &lt;a href=&#34;https://github.com/balderdashy/sails/issues/124&#34;&gt;aware of the issue&lt;/a&gt; and are working to fix it, but I really want my &lt;code&gt;JOIN&lt;/code&gt;s available for working with in the framework I&amp;rsquo;m using &lt;em&gt;now&lt;/em&gt;, without having to use an unstable/bleeding-edge pre-release version of Waterline.  In order to do so right now in Sails I have to use &lt;code&gt;Model.query&lt;/code&gt;, which is kind of awkward (plugging in raw SQL).  Having to code up things one way as a workaround and then go back and rip them out for official associations when they&amp;rsquo;re supported is really a turn off.    I kind of wonder if it&amp;rsquo;s not partially a result of NoSQL/MongoDB being very hot right now and developers not giving as much love to traditional relational things as they might have in the past.  Since it&amp;rsquo;s an area of interest for me I&amp;rsquo;d like to contribute but other than a few guidelines in &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; there&amp;rsquo;s not much communication from the core devs on this front.&lt;/p&gt;

&lt;p&gt;A lot of what is rough around the edges about Sails right now is summed up really well in this &lt;a href=&#34;https://github.com/balderdashy/sails/pull/1058#issuecomment-30498745&#34;&gt;Github pull request comment&lt;/a&gt; by &lt;a href=&#34;https://github.com/yoshuawuyts&#34;&gt;yoshuawuyts&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I know you&amp;rsquo;ve been very busy, but I feel I need to share this. As much as I&amp;rsquo;ve enjoyed Sails in the past, right now I feel very disconnected from it. For me the amount of outdated documentation, piling issues on the tracker and unclear direction make it hard to keep investing into Sails. The prolonged absence of core members like yourself and delayed responses on most issues make it hard to keep investing. If you want to lead Sails forward, I urge you to invest in clarity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;His suggestions for improvement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rigorous issue smackdown; close everything that isn&amp;rsquo;t relevant, combine duplicates into new issues.&lt;/li&gt;
&lt;li&gt;Create a roadmap; add all feature suggestions to the roadmap and close corresponding issues.&lt;/li&gt;
&lt;li&gt;Add code coverage via coveralls; it entices users to write more tests and fill up the bar.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And a very good point:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I don&amp;rsquo;t think you should prioritize getting new contributors in, I think they&amp;rsquo;ll come naturally once the points above have been addressed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After working with Sails for a week or so, I agree heartily with his take.&lt;/p&gt;

&lt;p&gt;In summary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build is broken on TravisCI at the time of writing&lt;/li&gt;
&lt;li&gt;No support for associations (though they are coming)&lt;/li&gt;
&lt;li&gt;Issues on Github are piling up without being addressed&lt;/li&gt;
&lt;li&gt;Devs have not been very responsive lately (ever?)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I don&amp;rsquo;t want the Sails team to feel like I&amp;rsquo;m ragging on them, they&amp;rsquo;ve done awesome work and I really feel like Sails has a great future if it can take care of some of the things I&amp;rsquo;ve brought up in the past two sections.  I know that when everything was running smoothly developing with Sails it was pure bliss on my end.&lt;/p&gt;

&lt;p&gt;For those readers interested or with a bunch of time on thier hands, it would be great to have people throw a bunch of pull requests Sails&amp;rsquo; way, since I sort of have a feeling that they are overwhelmed by the sheer scope of the project.  However, if the core developers don&amp;rsquo;t start piping up soon, it&amp;rsquo;s going to be hard to maintain interest / continue to invest my own valuable time and willpower into the project.  It has a ton of potential and in my opinion the vision, fully implemented and fleshed out, would be truly amazing.&lt;/p&gt;

&lt;p&gt;So that&amp;rsquo;s my take on Sails.js.  Happy New Year, I hope you enjoyed.  Until next time, stay sassy Internet.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nathan&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;EDIT:&lt;/em&gt; I absentmindedly pushed with a bunch of broken links.  Fixed now, sorry guys.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>