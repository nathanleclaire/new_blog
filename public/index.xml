<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on nathan leclaire </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:1313/index.xml</link>
    
    
    
    <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
    
    <item>
      <title>Why the async Library for Node.js is So Freaking Awesome</title>
      <link>http://localhost:1313/_posts/2014-01-31-why-the-async-library-for-node-dot-js-is-so-freaking-awesome</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/_posts/2014-01-31-why-the-async-library-for-node-dot-js-is-so-freaking-awesome</guid>
      <description></description>
    </item>
    
    <item>
      <title>Commit Every Day, Blog Every Week</title>
      <link>http://localhost:1313/_posts/2013-10-16-commit-every-day</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/_posts/2013-10-16-commit-every-day</guid>
      <description>

&lt;p&gt;It is with the greatest of pride that I am announcing today my newest initiative.  I am going to write at least one blog post every week for the next 52 weeks, and I am going to make at least one commit every day- preferably to Github, and most likely on my own personal projects, but bonus points would be given for committing to community projects.  This effort is more than a little inspired by Jennifer Dewalt&amp;rsquo;s impressive &lt;a href=&#34;http://jenniferdewalt.com/index.html&#34;&gt;180 websites in 180 days&lt;/a&gt; project.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Why Blog?&lt;/h1&gt;

&lt;p&gt;Far too long I&amp;rsquo;ve toiled away in silence when I could be putting my thoughts, experiences, and gleanings out on the web for all to share.  Many times I&amp;rsquo;ve felt the elation of working through a challenging programming issue and having no one to share my triumph with.  With blogging, I hope to alleviate that pain and become a more active member of the business and hacker communities.  I love writing.  Grammar, punctuation, and vocabulary have always come fairly naturally to me as an avid reader.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a well noted phenomenon, too, that teaching something to other people will help you get better at it.  This is also something that I hope will benefit me if I force myself to blog regularly.  For instance, lately I&amp;rsquo;ve been doing a lot of coding questions and brushing up on my Java/C/C++ (I learned them long ago, then got embarassingly out of practice) and I hope to solidify some of the core concepts by writing about them.&lt;/p&gt;

&lt;p&gt;Also, I&amp;rsquo;d be geeked to get featured on &lt;a href=&#34;https://news.ycombinator.com&#34;&gt;Hacker News&lt;/a&gt;, even if only a few people saw and they were their typical critical selves about it :D&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Why Commit?&lt;/h1&gt;

&lt;p&gt;{% img /images/git.png Because it&amp;rsquo;s a joy? %}&lt;/p&gt;

&lt;p&gt;I love open source and everything about it.  I&amp;rsquo;ve learned so much from reading the source code to things like &lt;a href=&#34;https://github.com/coopernurse/gorp&#34;&gt;gorp&lt;/a&gt; and the Golang libraries that I feel compelled to give back in some way.  At first I will start small with my own projects, but soon I intend to veer into other open source projects as a way of sharpening my coding chops and paying it forward to the community that, in many ways, made me who I am today.  One learns the hard way how frustrating it is when you can&amp;rsquo;t fork, modify, or browse the source code of the software that you are using or the website you are accessing.  Working in the proprietary world makes that very clear.&lt;/p&gt;

&lt;p&gt;Linux, for instance, is a project for which I have the utmost respect, and the awesomeness of it continues to blow my mind to this day.  The ideals and spirit it embodies are something that I can really get behind, and the &amp;ldquo;Bazaar&amp;rdquo; nature of the operating system makes for a foundation that leads to a development environment that&amp;rsquo;s unparalleled (not to mention performs great on a server).  I defy any contenders to make an honest argument in favor of &lt;code&gt;homebrew&lt;/code&gt; over &lt;code&gt;apt-get&lt;/code&gt;, for instance.  Don&amp;rsquo;t get me wrong- I love &lt;code&gt;homebrew&lt;/code&gt; (also notably &lt;a href=&#34;https://github.com/mxcl/homebrew&#34;&gt;open source&lt;/a&gt;!)- but it&amp;rsquo;s clear that Linux package management is on a whole &amp;lsquo;nother playing field, and that starts from the ground up.  That can only be explained by the community and attitudes that insist &amp;ldquo;If you&amp;rsquo;re not satisfied, fork it yourself&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Last but not least, seeing my Github commit-tile graph lack so much green (although I know I am committing to closed source software at my day job) makes me kind of sad.&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Why Do Them With Such Fierce Regularity?&lt;/h1&gt;

&lt;p&gt;{% img /images/jerryseinfeld.jpeg It worked for him. %}&lt;/p&gt;

&lt;p&gt;Everyone by now is most likely aware (if you&amp;rsquo;re not, you&amp;rsquo;re about to be) of the &lt;a href=&#34;http://dontbreakthechain.com&#34;&gt;Jerry Seinfeld Self-Improvement Program&lt;/a&gt;.  Essentially, it is a self-improvement technique attributed to Jerry Seinfeld where you pick a goal and make small steps every day towards meeting that goal.  Jerry Seinfeld wanted to become a better comedian, so he made it a goal to come up with a good joke every day and and marked the day off on his calender with a big black &amp;ldquo;X&amp;rdquo;.  The chain of &amp;ldquo;X&amp;rdquo;es served to reinforce his sense of making progress, and also as a commitment to continue forward in spite of the possibility (or reality) of failure and disappointment.  I find that kind of tenacity extremely admirable, and I think it will help me hone various skills in a variety of ways.&lt;/p&gt;

&lt;p&gt;Thanks for tuning in and I&amp;rsquo;ll catch you next week, where I promise there will be much more code involved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Build a Linked List For Each Layer in a Binary Tree</title>
      <link>http://localhost:1313/_posts/2014-03-01-build-a-linked-list-for-each-layer-in-a-binary-tree</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/_posts/2014-03-01-build-a-linked-list-for-each-layer-in-a-binary-tree</guid>
      <description>

&lt;p&gt;{%img /images/linkedListTree/binary_tree.png %}&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been going through problems in &lt;a href=&#34;http://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/098478280X&#34;&gt;Cracking the Coding Interview&lt;/a&gt; to keep my chops strong and for giggles and this one took a little bit of wrangling for me to get:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given a binary search tree, design an algorithm which creates a linked list of all the
nodes at each depth (i e , if you have a tree with depth D, you’ll have D linked lists)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So a binary tree such as :&lt;/p&gt;

&lt;pre&gt;
       (1)
      /   \
     /     \
   (2)     (3)
  /  \     / \
(4)  (5) (6) (7)
&lt;/pre&gt;

&lt;p&gt;Will return linked lists:&lt;/p&gt;

&lt;pre&gt;
(1) =&gt; NULL
(2) =&gt; (3) =&gt; NULL
(4) =&gt; (5) =&gt; (6) =&gt; (7) =&gt; NULL
&lt;/pre&gt;

&lt;p&gt;I wrote up my solution to this in Python, and I&amp;rsquo;m going to share it with you to study and critique.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Solution&lt;/h1&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;The Linked List Implementation&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;ve ever seen or written a linked list implementation before, you&amp;rsquo;ll probably realize there&amp;rsquo;s nothing particularly brilliant or innovative about this one.  Just a good old-fashioned, simple singly linked list.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class LinkedList:
    next = None
    val = None
 
    def __init__(self, val):
        self.val = val
 
    def add(self, val):
        if self.next == None:
            self.next = LinkedList(val)
        else:
            self.next.add(val)
 
    def __str__(self):
        return &amp;quot;({val}) &amp;quot;.format(val=self.val) + str(self.next)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;ll = LinkedList(1)
ll.add(2)
ll.add(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;The Binary Tree Implementation&lt;/h2&gt;

&lt;p&gt;The binary tree implementation is similarly from scratch, and simlarly simple.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class BinaryTree:
    val = None
    left = None
    right = None
    
    def __init__(self, val):
        self.val = val
 
    def __str__(self):
        return &amp;quot;&amp;lt;Binary Tree (val is {val}). \n\tleft is {left} \n\tright is {right}&amp;gt;&amp;quot;.format(val=self.val, left=self.left, right=self.right)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No methods, I do all of the tree manipulation by hand.  This works okay for problems of this (considerably small) scale.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;The Algorithm&lt;/h2&gt;

&lt;p&gt;The algorithm that I came up with is actually slightly different than what is listed as the solution in the book, and depends a bit of idiosyncracies of Python that aren&amp;rsquo;t in Java (which all of the solutions from the book are written in).  Namely, it uses optional arguments to avoid wrapper methods and it uses a dictionary instead of a &lt;code&gt;ArrayList&amp;lt;LinkedList&amp;lt;BinaryTree&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I also differ from the solution in the book in that I grab the depth of the tree once and use that to determine the linked list&amp;rsquo;s index, which is slightly less efficient than the solution that they provide.  If I&amp;rsquo;m not mistaken, however, the asymptotic complexity is still the same (&lt;code&gt;O(n)&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;My depth function is exactly what you&amp;rsquo;d expect (recursive):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def depth(tree):
    if tree == None:
        return 0
    if tree.left == None and tree.right == None:
        return 1
    else:
        depthLeft = 1+depth(tree.left)
        depthRight = 1+depth(tree.right)
        if depthLeft &amp;gt; depthRight:
            return depthLeft
        else:
            return depthRight
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My &lt;code&gt;tree_to_linked_lists&lt;/code&gt; function does a &lt;a href=&#34;http://en.wikipedia.org/wiki/Tree_traversal#Pre-order&#34;&gt;pre-order traversal&lt;/a&gt;, adding nodes to their corresponding linked list (based on depth) in the dictionary &lt;code&gt;lists&lt;/code&gt; as the tree is traversed.  &lt;code&gt;lists&lt;/code&gt; is passed into, and returned from (in its mutated state), each call to &lt;code&gt;tree_to_linked_lists&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def tree_to_linked_lists(tree, lists={}, d=None):
    if d == None:
        d = depth(tree)
    if lists.get(d) == None:
        lists[d] = LinkedList(tree.val)
    else:
        lists[d].add(tree.val)
        if d == 1:
            return lists
    if tree.left != None:
        lists = tree_to_linked_lists(tree.left, lists, d-1)
    if tree.right != None:
        lists = tree_to_linked_lists(tree.right, lists, d-1)
    return lists
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This produces a result that is sort of in reverse order compared to the solution provided by the book, but it still satisfies the problem description to provide a collection of linked lists.&lt;/p&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;You can find the entirety of the code &lt;a href=&#34;https://gist.github.com/nathanleclaire/9292861&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I need to be better at data structures and algorithms.  They are fun.&lt;/p&gt;

&lt;p&gt;Until next time, stay sassy Internet.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nathan&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How To Get Banned From /r/javascript - Promote Original Content</title>
      <link>http://localhost:1313/_posts/2014-01-31-how-to-get-banned-from-slash-r-slash-javascript-promote-original-content</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/_posts/2014-01-31-how-to-get-banned-from-slash-r-slash-javascript-promote-original-content</guid>
      <description></description>
    </item>
    
    <item>
      <title>How I Automated &#34;Finding Almost Anyone&#39;s Email Address&#34;</title>
      <link>http://localhost:1313/_posts/2013-11-23-how-i-automated-finding-almost-anyones-email-address</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/_posts/2013-11-23-how-i-automated-finding-almost-anyones-email-address</guid>
      <description>

&lt;p&gt;{% img /images/autorap/demo-fast.gif A demo, complete with colors. %}&lt;/p&gt;

&lt;p&gt;&lt;em&gt;EDIT:  The original article author, Rob Ousbey, has popped up on various social media sites to remind everyone to use this tool/knowledge responsibly.  I agree.  Please be responsible.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Not too long ago I came across an article on &lt;a href=&#34;https://news.ycombinator.com&#34;&gt;Hacker News&lt;/a&gt; called &amp;ldquo;&lt;a href=&#34;http://www.startupmoon.com/how-i-got-meetings-at-twitter-linkedin-and-github-using-cold-emails/&#34;&gt;The cold emails that got me meetings at Twitter, LinkedIn and GitHub&lt;/a&gt;&amp;rdquo;.  It&amp;rsquo;s by a woman named Iris Shoor who is a co-founder of a startup called &lt;a href=&#34;http://www.takipi.com/&#34;&gt;Takipi&lt;/a&gt;.  In the article she describes how she used a certain technique originally presented &lt;a href=&#34;http://www.distilled.net/blog/miscellaneous/find-almost-anybodys-email-address/&#34;&gt;here&lt;/a&gt; to obtain access to the emails of decision makers at tech companies and cold email them to glean meetings which resulted in sales of her product.  Both of the articles are engaging reads and I highly recommend them, especially if you are interested in &amp;ldquo;growth hacking&amp;rdquo;, or &amp;ldquo;sales and marketing&amp;rdquo; if you insist on using boring non-buzzwords.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;How Does It Work?&lt;/h1&gt;

&lt;p&gt;In the original &amp;ldquo;How To Find Almost Anyone&amp;rsquo;s Email Address&amp;rdquo; article, Rob Ousbey presents a Google Doc spreadsheet that will generate a large number of possible emails for someone based on their name and the domain name of the company they work for.  &lt;a href=&#34;http://bit.ly/name2email&#34;&gt;Go ahead, try it out&lt;/a&gt;.  Many peoples&amp;rsquo; emails are something along the lines of &lt;em&gt;[firstname].[lastname]@[company].com&lt;/em&gt;, so there&amp;rsquo;s a high likelihood that their email will be in the list of generated possibilities.&lt;/p&gt;

&lt;p&gt;Then, users are encouraged to exhaustively test each possibility in their Gmail account using the &lt;a href=&#34;https://rapportive.com/&#34;&gt;Rapportive&lt;/a&gt; Chrome extension until they come across a &amp;lsquo;hit&amp;rsquo; (although a little bit of creative Googling will sometimes yield the desired result for you in less time).&lt;/p&gt;

&lt;p&gt;When trying this out for the first time on a recruiter I was interested in contacting, I found myself clicking the generated permutations in succession with a looming disbelief that this trick would actually work.  Then, suddenly, Rapportive lit up with their portrait and social media info and I felt a funny buzzing sensation in my head as the possibilities swirled around in it.&lt;/p&gt;

&lt;p&gt;{% img /images/autorap/larry.png I feel funny about this. %}&lt;/p&gt;

&lt;p&gt;However, doing it this way was exhausting and tedious, as it required a lot of focus and time.  My programmer instincts revved up and I became convinced that I could automate the process.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Automating It&lt;/h1&gt;

&lt;p&gt;I won&amp;rsquo;t be publishing my full source code because this has so much potential for abuse, but I will talk a little bit here about how I accomplished automating this.  I chose to reach for my old friend Python to write the script to automate this process.  I wanted to get things done quickly and easily and Python proved to be a great boon here, even providing the excellent &lt;code&gt;argparse&lt;/code&gt; module to make the script much more usable from the command line.&lt;/p&gt;

&lt;p&gt;{% img /images/autorap/copy-as-curl.jpeg Useful Developer Tools are useful. %}&lt;/p&gt;

&lt;p&gt;First, I got an example cURL request using Chrome&amp;rsquo;s handy developer tools.&lt;/p&gt;

&lt;p&gt;Then, I called the &amp;ldquo;secret&amp;rdquo; Rapportive API using &lt;code&gt;pycurl&lt;/code&gt;.  There&amp;rsquo;s a few fields that can be used to identify whether a response has come back for the suggested user, and we use that to determine whether the user, and consequently their email address, has been found.  We also check it against the returned full name to ensure that we haven&amp;rsquo;t gotten back a false positive (for example, Rapportive may return something for &amp;ldquo;larry@google.com&amp;rdquo;, but it may not be the Larry we are looking for).  Outputting all of the emails we try to the terminal, we color the bunk addresses red, the &amp;ldquo;false positive&amp;rdquo; emails yellow, and the successful return results green.  Like good Internet citizens, we wait for a specified interval in between calls to the Rapportive server (2 seconds in the demo at the top of this page).  Upon finding the email for the person we&amp;rsquo;re looking for, the program exits.&lt;/p&gt;

&lt;p&gt;The Rapportive API is surprisingly flexible on what you send it as far as HTTP headers goes, seeming to rely mostly on the &lt;code&gt;X-Session-Token&lt;/code&gt; header for user authentication.&lt;/p&gt;

&lt;p&gt;The main loop in Python looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;if __name__ == &#39;__main__&#39;:
    args = argument_handler.handle_args()   
    rap_client = RapportiveClient(args.name, verbose=args.verbose)
    permutator = Permutator(args.name, args.domain) 
    permutations = permutator.get_permutations()

    for permutation in permutations:
        output = permutation 
        rap_client.perform(permutation)
        if args.should_color:
            output = colorer.color(permutation, rap_client)
        if not args.quiet: 
            print output 
            if rap_client.was_user_found() and rap_client.name_match():
                sys.exit(0)
        else:
            if rap_client.was_user_found():
                print output
                sys.exit(0) 
        time.sleep(args.wait_interval)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Rapportive is a subsidiary of LinkedIn and LinkedIn has been catching a lot of heat lately for everything from their &lt;a href=&#34;http://engineering.linkedin.com/mobile/linkedin-intro-doing-impossible-ios&#34;&gt;iOS MITM hack&lt;/a&gt; to their &lt;a href=&#34;http://blog.linkedin.com/2012/06/06/linkedin-member-passwords-compromised/&#34;&gt;notorious password breach&lt;/a&gt;.  They&amp;rsquo;re a popular company to love to hate.  However, I think their tools have as much potential for cool stuff as they do for abuse.  Honestly, I&amp;rsquo;m surprised that the trick described in this article is not more well-known.  I haven&amp;rsquo;t cold emailed anyone whose address I have obtained this way, but if I needed to do so I&amp;rsquo;d be very pleased to have this tool at my disposal.&lt;/p&gt;

&lt;p&gt;Cheers and I&amp;rsquo;ll see you next week.&lt;/p&gt;

&lt;p&gt;Nathan&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Speed Up Your Workflow By Running PHPUnit Tests Inside of Vim</title>
      <link>http://localhost:1313/_posts/2014-01-20-speed-up-your-workflow-by-running-phpunit-tests-inside-of-vim</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/_posts/2014-01-20-speed-up-your-workflow-by-running-phpunit-tests-inside-of-vim</guid>
      <description>

&lt;p&gt;{%img /images/vim-phpunit/phpunitdemo.gif No more CTRL Z for me. %}&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re a dev that cares about nice, clean, working code you should probably be writing unit tests.  I&amp;rsquo;ve discussed unit testing in &lt;a href=&#34;http://angularjs.org&#34;&gt;AngularJS&lt;/a&gt; a bit in &lt;a href=&#34;http://nathanleclaire.com/blog/2013/12/13/how-to-unit-test-controllers-in-angularjs-without-setting-your-hair-on-fire/&#34;&gt;one of my previous posts&lt;/a&gt;, but what if you are working on the server side with one of the &lt;a href=&#34;http://langpop.com/&#34;&gt;most wildly popular web application languages of all time&lt;/a&gt;?  That&amp;rsquo;s right folks, I&amp;rsquo;m talking about &lt;a href=&#34;http://php.net/&#34;&gt;PHP&lt;/a&gt; and whether you love it or hate it if you are working with it there&amp;rsquo;s a damn good chance that you are unit testing it with the venerable &lt;a href=&#34;http://phpunit.de/&#34;&gt;PHPUnit&lt;/a&gt; (if you&amp;rsquo;re not unit testing at all, you&amp;rsquo;re on the naughty list).  At the time of writing, this is what I do at my day job (my night job is as a costumed crusader fighting crime in the mean streets of &lt;a href=&#34;http://www.a2gov.org/Pages/default.aspx&#34;&gt;Ann Arbor, Michigan&lt;/a&gt;.  For a long time the unit testing part of my development workflow in PHP went something like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Be editing a PHP file and the file that tests it inside of &lt;code&gt;vim&lt;/code&gt; over &lt;code&gt;ssh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Change something in the test or the class that is likely to break the test, or add new tests&lt;/li&gt;
&lt;li&gt;Pop out of &lt;code&gt;vim&lt;/code&gt; using &lt;code&gt;CTRL+Z&lt;/code&gt; to suspend the process, and run the test on the command line using &lt;code&gt;phpunit --colors FileTest.php&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Note the results of the test.&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;fg&lt;/code&gt; to get back into &lt;code&gt;vim&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Change the files to correspond &lt;em&gt;OR&lt;/em&gt; Wait, what was the thing that was off again?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GOTO 1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Needless to say it&amp;rsquo;s a little exhausting, especially on those days where your brain&amp;rsquo;s moving slower than your fingers and you just can&amp;rsquo;t seem to inject enough coffee into your system.  But if your workflow is like this, you might be excited to find out that there is a better way.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Let&amp;rsquo;s Write Some VimScript&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;And when you gaze long into an abyss the abyss also gazes into you.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikiquote.org/wiki/Friedrich_Nietzsche&#34;&gt;Friedrich Nietzsche&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you&amp;rsquo;re a &lt;code&gt;vim&lt;/code&gt; poweruser, or even just a regular user, your first impulse towards solving this problem might be to execute commands using &lt;code&gt;:!phpunit @%&lt;/code&gt;.  In case you&amp;rsquo;re not familiar with this syntax, you just learned that you can preface commands with &lt;code&gt;!&lt;/code&gt; (bang) to run them in the shell and that &lt;code&gt;@%&lt;/code&gt; refers to the file opened in the current buffer.  This could work pretty well (and does) in a lot of cases, however it has a few disadvantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You have to type out the whole sequence every time, which is really annoying even if you are a fast typer and it adds a second or two onto your &amp;ldquo;writecode-runtest-repeat&amp;rdquo; cycle each time that really begins to add up quickly&lt;/li&gt;
&lt;li&gt;You can&amp;rsquo;t see the results inside a &lt;code&gt;vim&lt;/code&gt; buffer and manipulate them side-by-side with the test and code under test.  You could theoretically use &lt;code&gt;screen&lt;/code&gt; for this, but I&amp;rsquo;ve always run into issues getting &lt;code&gt;screen&lt;/code&gt; to work perfectly with my &lt;code&gt;vim&lt;/code&gt; setup&lt;/li&gt;
&lt;li&gt;In my use case (not sure if this is universal), PHPUnit is finnicky about &lt;em&gt;where&lt;/em&gt; you run the tests from, and for a variety of reasons I don&amp;rsquo;t like to &lt;code&gt;:cd&lt;/code&gt; away from the home directory of the project I&amp;rsquo;m working on very often (not to mention that&amp;rsquo;s an extra step in the cycle).  &lt;code&gt;:set autochdir&lt;/code&gt; would fix this, but for large projects I&amp;rsquo;m not often a fan of &lt;code&gt;autochdir&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You could also try to look for a plugin, but who wants yet &lt;em&gt;another&lt;/em&gt; &lt;code&gt;vim&lt;/code&gt; plugin / coloring theme / whatever to juggle?&lt;/p&gt;

&lt;p&gt;So what&amp;rsquo;s a unit testing junkie to do?  We have to dig into VimScript to automate this.  Hoo boy.  But have no fear, thanks to &lt;a href=&#34;http://stevelosh.com/&#34;&gt;Steve Losh&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;http://learnvimscriptthehardway.stevelosh.com/&#34;&gt;Learn VimScript the Hard Way&lt;/a&gt; I&amp;rsquo;ve figured out a great solution for you.&lt;/p&gt;

&lt;p&gt;Put this code inside of your &lt;code&gt;.vimrc&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function! RunPHPUnitTest()
    cd %:p:h
    let result = system(&amp;quot;phpunit &amp;quot; . bufname(&amp;quot;%&amp;quot;))
    split __PHPUnit_Result__
    normal! ggdG
    setlocal buftype=nofile
    call append(0, split(result, &#39;\v\n&#39;))
    cd -
endfunction

nnoremap &amp;lt;leader&amp;gt;u :call RunPHPUnitTest()&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will remap the keyboard shortcut &lt;code&gt;&amp;lt;leader&amp;gt;u&lt;/code&gt; (run in normal mode) to run &lt;code&gt;phpunit&lt;/code&gt; on the file you&amp;rsquo;re currently editing (hopefully a test, or else there will be no result) in the directory where it is based, and spit out the results into a new window.  In case you&amp;rsquo;re unfamiliar, the &lt;code&gt;&amp;lt;leader&amp;gt;&lt;/code&gt; key in &lt;code&gt;vim&lt;/code&gt; is &lt;code&gt;&#39;\&#39;&lt;/code&gt; by default, but frequently it gets remapped to other keys (mine is mapped to &lt;code&gt;&#39;,&#39;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;I really like this shortcut since it allows me to look at the test results side by side with the files I&amp;rsquo;m working on.  This code generates a new test result window each time you run it, so you have to &lt;code&gt;:q&lt;/code&gt; out of old ones manually.  This has never bothered me &lt;em&gt;too&lt;/em&gt; much, but if you know of a way to change it so that it kills old windows automatically I&amp;rsquo;d love to hear from you.&lt;/p&gt;

&lt;p&gt;If you have a file with a lot of test methods in it, &lt;code&gt;vim&lt;/code&gt; will be somewhat awkardly locked up for a minute waiting for the results, which it will spit out all at once when it is finished instead of in real-time like when you run &lt;code&gt;phpunit&lt;/code&gt; on the command line, but at this time &lt;code&gt;vim&lt;/code&gt; does not support streaming input buffers as far as I am aware.  So it&amp;rsquo;s something that has to be lived with if you want to use the functionality this way.  If you know of a workaround for this, you should &lt;a href=&#34;mailto:nathanleclaire@gmail.com&#34;&gt;let me know&lt;/a&gt;.  Or, you can use the next tip to execute just a few tests at a time.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;But Can We Do Better?&lt;/h1&gt;

&lt;p&gt;Sure, we can always do better.  I really like using phpunit with the &lt;code&gt;--filter&lt;/code&gt; option, since it allows you to focus on only running the tests you are interested in, instead of the whole kit and kaboodle.  This speeds things up really significantly.  How can we include this in our little VimScript function?&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll pass a parameter to our &lt;code&gt;RunPHPUnitTest()&lt;/code&gt; function to indicate whether we want to do a &lt;code&gt;--filter&lt;/code&gt; run or not, and if so we will yank the current word to use as the argument for the &lt;code&gt;--filter&lt;/code&gt; parameter.  So, in our use case, if our vim cursor is hovering over the name of the function we want to run in the test file (as in &lt;code&gt;function testWhatever()&lt;/code&gt;), and we press &lt;code&gt;&amp;lt;leader&amp;gt;f&lt;/code&gt;, it will run PHPUnit just for that test.  Revised, the code in our &lt;code&gt;.vimrc&lt;/code&gt; file looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function! RunPHPUnitTest(filter)
    cd %:p:h
    if a:filter
        normal! T yw
        let result = system(&amp;quot;phpunit --filter &amp;quot; . @&amp;quot; . &amp;quot; &amp;quot; . bufname(&amp;quot;%&amp;quot;))
    else
        let result = system(&amp;quot;phpunit &amp;quot; . bufname(&amp;quot;%&amp;quot;))
    endif
    split __PHPUnit_Result__
    normal! ggdG
    setlocal buftype=nofile
    call append(0, split(result, &#39;\v\n&#39;))
    cd -
endfunction

nnoremap &amp;lt;leader&amp;gt;u :call RunPHPUnitTest(0)&amp;lt;cr&amp;gt;
nnoremap &amp;lt;leader&amp;gt;f :call RunPHPUnitTest(1)&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In action:&lt;/p&gt;

&lt;p&gt;{%img /images/vim-phpunit/phpunitdemofilter.gif So much faster, especially in big files. %}&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;d rather script my editor in Python.  JUST KIDDING.  Kind of.&lt;/p&gt;

&lt;p&gt;Until next week, stay sassy Internet.  And keep that code coverage strong.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nathan&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Three Elements That Sum To Zero</title>
      <link>http://localhost:1313/_posts/2013-10-22-three-elements-that-sum-to-zero</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/_posts/2013-10-22-three-elements-that-sum-to-zero</guid>
      <description>

&lt;p&gt;There&amp;rsquo;s an interview question (for developers) that recently I&amp;rsquo;ve been asking (if they have already proven they can &lt;a href=&#34;http://www.codinghorror.com/blog/2007/02/why-cant-programmers-program.html&#34;&gt;FizzBuzz&lt;/a&gt;) which goes a little something like this:&lt;/p&gt;

&lt;blockquote&gt;Given a collection of integers, return the indices of any three elements which sum to zero.  For instance, if you are given &lt;code&gt;{-1, 6, 8, 9, 10, -100, 78, 0, 1}&lt;/code&gt;, you could return &lt;code&gt;{0, 7, 8}&lt;/code&gt; because &lt;code&gt;-1 + 1 + 0 == 0&lt;/code&gt;.  You can&#39;t use the same index twice, and if there is no match you should return &lt;code&gt;{-1, -1, -1}&lt;/code&gt;.&lt;/blockquote&gt;

&lt;p&gt;I first heard this question in an interview with a San Francisco-based startup, and it has since become sort of a workhorse interview question around the office.  As it turns out, this question has the potential to &lt;a href=&#34;http://xkcd.com/356/&#34;&gt;nerd snipe&lt;/a&gt; developers pretty effectively.  I know, because I coded up the naive solution first before deciding that it wasn&amp;rsquo;t good enough, and that I wanted to write it a faster way.  Combining this with my recent revival of interest in C++ (I learned it long ago but have been mostly working with scripting languages lately) proved to be an interesting experience.  This is the story of one man (me), and his quest to write code to efficiently solve this problem.  In my solutions I use the &lt;code&gt;std::vector&lt;/code&gt; class, as I also used this as an opportunity to refresh some STL knowledge, but in the article I use the words &amp;ldquo;array&amp;rdquo; and &amp;ldquo;vector&amp;rdquo; interchangably (these solutions could also be implemented with arrays, there is nothing special about using vectors in this case).&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Solving Things Naively&lt;/h1&gt;

&lt;p&gt;The obvious way to do this is with brute force.  Starting with the zeroeth, first, and second elements of the collection, compare every possible combination of three elements to see if they sum to zero.  Sample code (&lt;code&gt;using namespace std;&lt;/code&gt; is implied):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;vector&amp;lt;int&amp;gt; three_indices_that_sum_to_zero_naive(vector&amp;lt;int&amp;gt; v)
{
    // O(n ** 3) time complexity in average case
    int i, j, k, n;
    n = v.size();
    for(i = 0; i &amp;lt; n-2; i++)
    {
        for(j = i+1; j &amp;lt; n-1; j++)
        {
            for(k = j+1; k &amp;lt; n; k++)
            {
                if ((v.at(i) + v.at(j) + v.at(k)) == 0)
                {
                    return three_vec(i, j, k);
                }
            }
        }   
    }
    return three_vec(-1, -1, -1); 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;three_vec&lt;/code&gt; is a utility method that I use to return a vector of three integers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;vector&amp;lt;int&amp;gt; three_vec(int i, int j, int k)
{
    int arr[] = {i, j, k};
    vector&amp;lt;int&amp;gt; indices (arr, arr + sizeof(arr) / sizeof(arr[0]));
    return indices;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the obvious way to do the problem at first glance, and it has the advantage of simplicity and readability (a competent developer looking at the code should be able to figure it out fairly quickly).  However, as noted in the comments for the function defined, it runs with a time complexity of O(&lt;em&gt;n&lt;sup&gt;3&lt;/sup&gt;&lt;/em&gt;).  Can we do better?&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Solving Things Suavely&lt;/h1&gt;

&lt;p&gt;Of course we can, or else I wouldn&amp;rsquo;t be writing this article!  Reaching into our algorithmic bag of tricks, we begin to ask ourselves: Is there anything we can do to this otherwise unordered vector of integers that would make it easier for us to get what we&amp;rsquo;re after?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;ldquo;Hm,&amp;rdquo;&lt;/em&gt; you say to yourself.  &lt;em&gt;&amp;ldquo;We could trying sorting it.  This will run in O(n log n) time but it will allow us to find what we are looking for much more quickly.&amp;rdquo;&lt;/em&gt;   But wait- sorting the vector will change the place of the elements, and consequently their index, which is what we are after.  Therefore, we must rely on an additional (simple) data structure if we are going to take this approach:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;typedef struct index_value_pair {
    int index;
    int value;
} index_value_pair;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can make a new array and sort that based on &lt;code&gt;index_value_pair&lt;/code&gt;&amp;rsquo;s &lt;code&gt;value&lt;/code&gt; element:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;/* Utility Function to create an index_value_pair */
index_value_pair make_index_value_pair(int index, int value)
{
    index_value_pair ivp;
    ivp.index = index;
    ivp.value = value;
    return ivp;
}

vector&amp;lt;int&amp;gt; three_indices_that_sum_to_zero_suave(vector&amp;lt;int&amp;gt; v)
{
    int i, j, k, n, sum;
    n = v.size();
    vector&amp;lt;index_value_pair&amp;gt; value_index_vec;
    for (i = 0; i &amp;lt; n; i++) 
    {
        value_index_vec.push_back(make_index_value_pair(i, v.at(i)));
    }
    sort(value_index_vec.begin(), value_index_vec.end(), suave_comp);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, we can work our way forwards from the beginning of the array starting with the zeroeth and first elements (let&amp;rsquo;s call them the &lt;code&gt;i&lt;/code&gt;th and &lt;code&gt;j&lt;/code&gt;th), and &lt;em&gt;backwards&lt;/em&gt; from the end of the array with the third (the &lt;code&gt;k&lt;/code&gt;th).  &lt;code&gt;i&lt;/code&gt; will go to &lt;code&gt;n-2&lt;/code&gt; and start off an inner loop where &lt;code&gt;j = i + 1&lt;/code&gt;.  In the inner loop, if the sum of the elements is positive, we decrement &lt;code&gt;k&lt;/code&gt; because we need a smaller sum (closer to zero).  If the sum of the elements is negative, we increment &lt;code&gt;j&lt;/code&gt; because we need a larger sum (also closer to zero).  If the elements sum to zero, great!  We have our match.  If &lt;code&gt;j&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt; meet, we go on to the next loop.  This process shaves a whole multiple of &lt;code&gt;n&lt;/code&gt; comparisons off our algorithm&amp;rsquo;s runtime and allows us to do things in O(&lt;em&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/em&gt;) time.&lt;/p&gt;

&lt;p&gt;You can intuitively grasp why this is faster by asking yourself how many comparisons it would take to find the elements that sum to zero with this array (sorted) and this algorithm:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{-10, -8, -6, 0, 3, 5, 18}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;versus this one (same elements, different order) with brute force:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{-6, -8, 0, 3, 10, -8, 18}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Therefore the whole function looks like this and runs with O(&lt;em&gt;n log n + n&lt;sup&gt;2&lt;/sup&gt;&lt;/em&gt;) time complexity including the sort.  O(&lt;em&gt;n &lt;sup&gt;2&lt;/sup&gt;&lt;/em&gt;) is asymptotically larger than O(&lt;em&gt;n log n&lt;/em&gt;), so this time complexity resolves to O(&lt;em&gt;n &lt;sup&gt;2&lt;/sup&gt;&lt;/em&gt;) (&lt;em&gt;editor&amp;rsquo;s note&lt;/em&gt;: thanks to Reddit user Olathe for pointing this out).  This should outperform the O(&lt;em&gt;n&lt;sup&gt;3&lt;/sup&gt;&lt;/em&gt;) algorithm in most cases:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;vector&amp;lt;int&amp;gt; three_indices_that_sum_to_zero_suave(vector&amp;lt;int&amp;gt; v)
{
    int i, j, k, n, sum;
    n = v.size();
    vector&amp;lt;index_value_pair&amp;gt; value_index_vec;
    for (i = 0; i &amp;lt; n; i++) 
    {
        value_index_vec.push_back(make_index_value_pair(i, v.at(i)));
    }
    // print_value_index_vec(value_index_vec);
    sort(value_index_vec.begin(), value_index_vec.end(), suave_comp);
    for (i = 0; i &amp;lt; n-2; i++)
    {
        j = i+1;
        k = n-1;
        while (k &amp;gt; j)
        {
            sum = sum_from_value_index_vec(value_index_vec, i, j, k);
            if (sum == 0)
            {
                return three_vec(value_index_vec.at(i).index, value_index_vec.at(j).index, value_index_vec.at(k).index);   
            }

            if (sum &amp;gt; 0)
            {
                k--;
            }
            else
            {
                j++;
            }

        }
    }
    return three_vec(-1, -1, -1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Interestingly, with the first few benchmarks I ran, the naive version was outperforming the efficient version, and I couldn&amp;rsquo;t quite figure out why (the first command line argument indicates how many random elements to generate in our test array- in other words, &lt;code&gt;N&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./indices_sum_to_zero 100000
Initializing...

Using naive...
Performance: 0 ticks
Naive : {0, 1, 77}
Using suave...
The elements: -100 0 100
Performance: 10000 ticks
Suave : {73045, 48974, 3270}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How could this be?  My carefully crafted algorithm was getting stomped by an algorithm I knew to be inferior.  After generating and poking around at a few callgrind files attempting to track down the issue, I suddenly realized that it was right in front of my eyes, in two constant definitions I had made and forgotten about early on:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static int LOWERBOUND = -100;
static int UPPERBOUND = 100;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These settings were used to specify the range of the pseudorandom integers I was using to test the algorithms with, and when they were so close together the naive algorithm was outperforming the &amp;ldquo;suave&amp;rdquo; one because the additional overhead of sorting was so costly.&lt;/p&gt;

&lt;p&gt;What if we change the bounds to be &lt;code&gt;{-10000000, 10000000}&lt;/code&gt;?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./indices_sum_to_zero 100000
Initializing...

Using naive...
Performance: 70000 ticks
Naive : {0, 539, 31774}
Using suave...
Performance: 10000 ticks
Suave : {78891, 33850, 54525}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Much closer to what we expect!  For smaller values of N, and upper/lower bounds that are closer together, the naive version seems to perform better.  As the range and value of N gets larger, the &amp;ldquo;suave&amp;rdquo; algorithm begins to get more appealing.  I&amp;rsquo;d be curious to see a more rigorous numerical analysis of why this is.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/nathanleclaire/algorithms_and_data_structures/blob/master/indices_sum_to_zero/indices_sum_to_zero.cc&#34;&gt;code on github&lt;/a&gt; if you&amp;rsquo;re so inclined.  Cheers, and I&amp;rsquo;ll see you next week!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;EDIT&lt;/em&gt; : Based on some feedback from Reddit I have revised a few things, notably:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There was a bug in the implementation of &lt;code&gt;three_vec&lt;/code&gt; that caused the returned value to be the same for suave and naive versions (fixed in &lt;a href=&#34;https://github.com/nathanleclaire/algorithms_and_data_structures/commit/794993e01b1e0fa6154c722c4d74009b02cdef45&#34;&gt;794993e01b1e0fa6154c722c4d74009b02cdef45&lt;/a&gt; )&lt;/li&gt;
&lt;li&gt;Constant definition is now done with &lt;code&gt;static const&lt;/code&gt; instead of &lt;code&gt;#define&lt;/code&gt; statements&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://localhost:1313/about</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/about</guid>
      <description>&lt;p&gt;{%img /images/naaaate.jpg %}&lt;/p&gt;

&lt;p&gt;Hi there!&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m Nathan LeClaire and I &amp;lt;3 technology.  When I was 14 or so I started to learn programming on a TI-83+ calculator so I could do algebra problems more quickly.  This, coupled with a reading of Michael Crichton&amp;rsquo;s excellent book &lt;a href=&#34;http://www.amazon.com/gp/product/0061703087/ref=as_li_tf_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0061703087&amp;amp;linkCode=as2&amp;amp;tag=natlecwrionbu-20&#34;&gt;Prey&lt;/a&gt; that ignited an interest in studying computational systems which mimicked biology, led me on a path where I began to learn C++, Python, Linux and more.  To this day, the very notion of AI and systems such as artificial neural networks (especically given how much data is available in the modern age!) is fascinating to me.&lt;/p&gt;

&lt;p&gt;I programmed on and off for a few years after taking in more in high school, mostly about Java, and eventually majored in Philosophy for college.  I love analyzing arguments and discussions of great philosophical thinkers all the way from Plato to Leibniz to Dennett.  Studying philosophy made me a better thinker and communciator as I realized that no line of argument was perfect.&lt;/p&gt;

&lt;p&gt;When I graduated from college, began interning at &lt;a href=&#34;http://21cparks.org&#34;&gt;21st Century Parks&lt;/a&gt; and I stumbled across a rekindled enjoyment of programing and technology.  When I started maintaining their website and the website of my band &lt;a href=&#34;http://funnybonesbeats.org&#34;&gt;Funny Bones&lt;/a&gt;, I knew I was onto something.  Thus began my career in technology.&lt;/p&gt;

&lt;p&gt;I continue to experiment with exciting new technologies like &lt;a href=&#34;http://golang.org&#34;&gt;Go&lt;/a&gt; and &lt;a href=&#34;http://angularjs.org&#34;&gt;AngularJS&lt;/a&gt; in my free time, as well as writing about them, computer science, and some old favorites such as Python in my blog.&lt;/p&gt;

&lt;p&gt;Areas of interest for me in computing include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scalability &amp;amp; Distributed Systems&lt;/li&gt;
&lt;li&gt;Machine Learning, Artificial Neural Nets, Genetic Algorithms/Programming etc.&lt;/li&gt;
&lt;li&gt;Security (reverse engineering exploits and network vulnerabilities)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Though I am currently employed I am always interested in talking about other opportunities, particularly involving the interests listed above and in the following cities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New York, NY&lt;/li&gt;
&lt;li&gt;San Francisco, CA&lt;/li&gt;
&lt;li&gt;Portland, OR&lt;/li&gt;
&lt;li&gt;Denver, CO&lt;/li&gt;
&lt;li&gt;Austin, TX&lt;/li&gt;
&lt;li&gt;Berlin, Germany&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I enjoy getting e-mail, you should &lt;a href=&#34;mailto:nathanleclaire@gmail.com&#34;&gt;send me one&lt;/a&gt;.  Thanks for visiting!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Number One Dev Killer</title>
      <link>http://localhost:1313/_posts/2014-02-08-the-number-one-dev-killer</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/_posts/2014-02-08-the-number-one-dev-killer</guid>
      <description>

&lt;p&gt;{%img /images/dev-killer/rage.gif One of those days? %}&lt;/p&gt;

&lt;p&gt;I frequently find myself fascinated by modern technology.  I mean, we went from computers that are the size of buildings to computers of equivalent power that fit in your pocket in ~50 years (I&amp;rsquo;ll leave you to decide if it&amp;rsquo;s sad or not that we use them mostly to look at pictures of cats and argue on the Internet).  A pretty impressive feat if you ask me, especially considering that 50 years is just about nothing in geographic terms.&lt;/p&gt;

&lt;p&gt;What always fascinates me the most, however, is people and how they interact with (and create!!) new technology.  Especially being immersed in developer culture, I&amp;rsquo;ve start to see the same patterns over and over again and begun learning what makes some projects (especially when people are working in isolation) fail to get traction, and what makes some projects so wildly successful.  So today I&amp;rsquo;m going to write about a story to demonstrate a point about the thing which is, in my opinion, a huge killer of developer productivity.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;A Story About Mailing Lists&lt;/h1&gt;

&lt;p&gt;Do you recognize this guy?&lt;/p&gt;

&lt;p&gt;{%img /images/dev-killer/mailchimp.jpg %}&lt;/p&gt;

&lt;p&gt;Probably at least looks familiar, right?  It&amp;rsquo;s the &lt;a href=&#34;http://mailchimp.com&#34;&gt;MailChimp&lt;/a&gt; monkey.  How about this guy?&lt;/p&gt;

&lt;p&gt;{%img /images/dev-killer/hermes.jpg %}&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s &lt;a href=&#34;http://en.wikipedia.org/Hermes&#34;&gt;Hermes&lt;/a&gt;, the Greek god of communication.  But unless you&amp;rsquo;re a theology buff, Freddie the MailChimp mascot was probably a lot more meaningful to you in a modern context than Hermes.  So what?  Let me tell you a story to explain what I&amp;rsquo;ll be getting at.&lt;/p&gt;

&lt;p&gt;Now that I&amp;rsquo;ve started getting some traffic to my blog, and received a variety of emails from readers, I wanted to get a mailing list up.  You know, nothing fancy, just an email that I send out every once in a while to give people a chance to catch up with what I&amp;rsquo;ve been writing about this week.  So what do I do?&lt;/p&gt;

&lt;p&gt;I could use &lt;a href=&#34;http://mailchimp.com&#34;&gt;MailChimp&lt;/a&gt;, a rock-solid and proven standby that is good enough for people like &lt;a href=&#34;http://andrewchen.co&#34;&gt;Andrew Chen&lt;/a&gt; and &lt;a href=&#34;http://www.kalzumeus.com&#34;&gt;Patrick McKenzie&lt;/a&gt; and obviously should be good enough for me.  But what did I do?  Like a &amp;ldquo;good&amp;rdquo; hacker, I started writing my own (In addition to just wanting a cool project, for some reason I was embarassed about the possibility of people know that I use MailChimp.  I don&amp;rsquo;t know why, I guess I just have some kind of weird DIY fetish).  It was going to be called &lt;a href=&#34;http://github.com/nathanleclaire/hermes&#34;&gt;Hermes&lt;/a&gt;, written in Express/Node.js, and I was totally stoked.  Mostly because now I was going to attempt to re-invent MailChimp instead of doing more important, but less sexy, things with my time.&lt;/p&gt;

&lt;p&gt;I got about this far (I&amp;rsquo;m skipping over some boilerplate):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;function sendSingleMail(subject, to) {
    getSignupEmailTemplate({
        to: to
    }, function(html) {
        mailgun.sendRaw(&amp;quot;Nathan LeClaire &amp;lt;nathan.leclaire@gmail.com&amp;gt;&amp;quot;, [to.email],
            &#39;From: nathan.leclaire@gmail.com&#39; +
            &#39;\nTo: &#39; + to.email +
            &#39;\nContent-Type: text/html; charset=utf-8&#39; +
            &#39;\nSubject: &#39; + subject + &#39;\n\n&#39; +
            html,
            function(err) {
                if (err) console.log(&amp;quot;there was an email error&amp;quot;, err);
                else console.log(&amp;quot;successfully sent email to &amp;quot; + to.email);
            }
        );
    });
}

function getSignupEmailTemplate(context, callback) {
    var tmpl = jade.renderFile(&amp;quot;views/signup-email.jade&amp;quot;, context, function(err, html) {
        if (err) {
            console.log(&amp;quot;error rendering jade template&amp;quot;);
        } else {
            callback(html);
        }
    });
}

function main(conn) {
    var subscribers = r.db(&amp;quot;hermes&amp;quot;).table(&amp;quot;subscriber&amp;quot;);
    app.post(&amp;quot;/email_signup&amp;quot;, function(req, res) {
        var email = req.body.email;
        subscribers.insert({
            email: email,
            name: &amp;quot;&amp;quot;,
            subscriptionConfirmed: false
        }).run(conn, function(err, result) {
            if (err) {
                console.log(&amp;quot;[ERROR] failed to insert email from someone... &amp;quot;, err);
                res.json({
                    success: false
                });
            } else {
                sendSingleMail(&amp;quot;Hi! I hear you&#39;d like to subscribe to my blog.&amp;quot;, {
                    email: email
                });
                res.json({
                    success: true
                });
            }
        });
    });

    app.listen(3001);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before I started to say to myself: &amp;ldquo;Nate, are you being reasonable or are you just being cheap?  And why are you doing this instead of working on other, more low-hanging fruit to make your blog and side-projects more successful?  &lt;a href=&#34;http://github.com/nathanleclaire/checkforbrokenlinks&#34;&gt;Check For Broken Links&lt;/a&gt; &lt;em&gt;still&lt;/em&gt; hasn&amp;rsquo;t ever been deployed!&amp;rdquo;&lt;sup id=&#34;foot1return&#34;&gt;&lt;a href=&#34;#foot1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.  Though the Check For Broken Links comment was a low blow, I knew I was right.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Enlightenment&lt;/h1&gt;

&lt;p&gt;So I bit the bullet and used MailChimp instead.  You can see the results of my &amp;ldquo;labor&amp;rdquo; in the left sidebar of my blog, and I&amp;rsquo;m actually ecstatic I decided to go with them instead of writing my own mail management system.&lt;/p&gt;

&lt;p&gt;Why?  Because all of the time I saved by going the MailChimp route, instead of creating something original but inferior, allowed me to spend more time doing other, more valuable things.  For that matter, the influx of reader emails that I was anticipating and hoping for hasn&amp;rsquo;t really materialized, and at the time of writing I have all of two people on my mailing list :D (myself and my girlfriend- though I&amp;rsquo;m working on improving this).  I&amp;rsquo;m glad to have one less (giant) thing on my todo list, and I don&amp;rsquo;t feel like a failure since I didn&amp;rsquo;t waste a bunch of time on something that isn&amp;rsquo;t paying dividends right away (though I think it will in the future).  And I get all of the niceness, including analytics and a crazy awesome Web UI, for the small price of a MailChimp logo on my signup form.  Sign me up!&lt;/p&gt;

&lt;p&gt;Coming back to the Freddie the Chimp vs. Hermes comparison- Why use an untrusted brand / sketchy open source product when you can use a battle-hardened old friend?&lt;/p&gt;

&lt;p&gt;The point that I&amp;rsquo;m getting at, if you haven&amp;rsquo;t guessed it already, is that developers (as I did in this case) oftentimes get their potential productivity murdered, hard, by &lt;a href=&#34;http://en.wikipedia.org/wiki/Not_invented_here&#34;&gt;Not Invented Here Syndrome&lt;/a&gt;.  Who among us has met the stubbornly anti-framework programmers that always insist they could do a better job themselves, even with the absurd wealth of (oftentimes free) tools available for development nowadays?  How many client-side JavaScript MV* frameworks exist because their creators weren&amp;rsquo;t satisfied with simply improving existing solutions?  I know it&amp;rsquo;s an easy target, but allow me to list a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://angularjs.org&#34;&gt;Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://backbonejs.org&#34;&gt;Backbone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://meteor.com/&#34;&gt;Meteor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://facebook.github.io/react/&#34;&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://twitter.github.io/flight/&#34;&gt;Flight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fahad19.github.com/singool/&#34;&gt;Singool.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://knockoutjs.com/&#34;&gt;Knockout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sammyjs.org/&#34;&gt;Sammy.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://emberjs.com/&#34;&gt;Ember.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/petermichaux/maria&#34;&gt;Maria&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://terrifically.org/composer/&#34;&gt;Terrific Composer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rivetsjs.com/&#34;&gt;Rivets.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bruth.github.com/synapse/docs/&#34;&gt;Synapse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ractivejs.org/&#34;&gt;Ractive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;{%img /images/dev-killer/incredulous.gif %}&lt;/p&gt;

&lt;p&gt;Yeah.&lt;/p&gt;

&lt;p&gt;Though he is speaking to a slightly different context, I feel that Keith Perhac breaks the issue down nicely in this &lt;a href=&#34;http://www.kalzumeus.com/2012/05/18/kalzumeus-podcast-ep-2-with-amy-hoy-pricing-products-and-passion/&#34;&gt;Kalzumeus Software Podcast&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;And really, I think there’s also a… so, this is not just the Hacker News crowd, this is not just the Slashdot crowd, this is not just the techie crowd, there are a lot of people. I think the naysayers are the people who have more time than money, is honestly what it comes down to.&lt;/p&gt;

&lt;p&gt;Because, honestly, if I had a ton of time, if I was working a nine-to-five job, had a set number of hours a day I worked at a fixed income, at that, and I needed time-tracking software, I would probably write my own on the weekend because I have more time than I have money at that point.&lt;/p&gt;

&lt;p&gt;For someone who’s trying to run or start their own business, they suddenly have more money than they have time. Not that they’re making tons of money but because their time is much more valuable because there are so many other things they could be doing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This seems to be the gospel truth right here.  People can and should be focusing less on reinventing the wheel, and more on their core value proposition.&lt;/p&gt;

&lt;p&gt;Note that I&amp;rsquo;m mostly talking about things in the context of individual developers working by themselves, or in coordination with fairly small teams, not in large cutting-edge organizations such as the type discussed in &lt;a href=&#34;http://www.joelonsoftware.com/articles/fog0000000007.html&#34;&gt;this article by Joel Spolsky&lt;/a&gt;, where he makes an argument in favor of &amp;ldquo;Not Invented Here Syndrome&amp;rdquo;.  I agree with many of the points he makes here (no off-the-shelf web server will ever be as crazy fast as Google&amp;rsquo;s and that&amp;rsquo;s their business advantage), but I also feel like making an argument in favor of NIH is kind of dangerous.  Not that Joel has an obligation to look out for everyone&amp;rsquo;s best interests or anything, but I&amp;rsquo;d be shocked if he&amp;rsquo;d never come across a business situation where a company was investing waaaay too many resources into reinventing the wheel when they could have just bit the bullet.  This is, after all, the man who invented Wasabi, a specialized dialect of Visual Basic roasted hilariously in this post by his &lt;a href=&#34;http://www.codinghorror.com/blog/2006/09/has-joel-spolsky-jumped-the-shark.html&#34;&gt;future business partner Jeff Atwood&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;FogBugz is written in Wasabi, a very advanced, functional-programming dialect of Basic with closures and lambdas and Rails-like active records that can be compiled down to VBScript, JavaScript, PHP4 or PHP5. Wasabi is a private, in-house language written by one of our best developers that is optimized specifically for developing FogBugz; the Wasabi compiler itself is written in C#.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It may have worked for Fog Creek, but a lot of weird technical decisions have ended up working out for people (like &lt;a href=&#34;http://www.hhvm.com/blog/&#34;&gt;transpiling PHP to C++&lt;/a&gt;).  Would you want to maintain &lt;em&gt;that&lt;/em&gt; codebase?&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;The Flipside&lt;/h1&gt;

&lt;p&gt;The flipside of this, of course, is equally poisionous, and I am going to describe a type of person that you and I both know to illustrate this point.  I think if you are involved in the technology community pretty heavily you will perhaps find this person eerily familiar.&lt;/p&gt;

&lt;p&gt;This type of person is passionate about technology.  In fact, they are so passionate about it that they become convinced that it is a panacea for every problem they might possibly encounter.  They put more importance on theoretical wanking and &amp;ldquo;purity&amp;rdquo; than on execution and delivery, and they jump from framework to framework without ever putting in any actual mental elbow grease.  They are a perennial &amp;ldquo;Hello Worlder&amp;rdquo;, always chasing after the hot new thing.&lt;/p&gt;

&lt;p&gt;They probably mock the PHP or Rails programmers who are too busy getting stuff done to hear or care.  They may have a passion for exploration and learning, which is good, but they lack wisdom and insight.  Often this can be the same kind of person who may be interested in starting their own company, but lacks the practical depth to find something that has good product/market fit.  Instead they may try to solve problems that nobody has, or let the technology choice dictate the business direction instead of the other way around.&lt;/p&gt;

&lt;p&gt;I have been this person on and off.  It&amp;rsquo;s no more fun them than it is to be around them.  I think one should shy away from being this guy, as much as one should shy away from being a NIHSer.  In my opinion, you should keep an open mind about things and not let your ego get in the way of being a developer who&amp;rsquo;s genuinely enjoyable to be on a team with.  Spoiler alert:  you are not right 100% of the time.&lt;/p&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Go forth and hack, sisters and brothers.  Just put some thought into using the right tool for the right job, and getting things done FAST instead of learning the newest hotness (which may cause you more headaches than it prevents).  There&amp;rsquo;s nothing wrong with a box running MySQL as its only database, or using just jQuery on your front end if that&amp;rsquo;s all you need, or developing an iOS app instead of an HTML5 one written with PhoneGap and AngularJS.  Let the tool fit the situation, and get things done (especially if you&amp;rsquo;re starting a company).&lt;/p&gt;

&lt;p&gt;Until next week, stay sassy Internet!  Oh, and subscribe to my mailing list already.  You&amp;rsquo;re killing me over here.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nathan&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span id=&#34;foot1&#34;&gt;&lt;a href=&#34;#foot1return&#34;&gt;(1)&lt;/a&gt;&lt;/span&gt; : It&amp;rsquo;s kind of like my &amp;ldquo;&lt;a href=&#34;http://en.wikipedia.org/wiki/Chinese_Democracy&#34;&gt;Chinese Democracy&lt;/a&gt;&amp;rdquo;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Don&#39;t Fear Directives In AngularJS</title>
      <link>http://localhost:1313/_posts/2013-12-07-dont-fear-directives-in-angular-js</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/_posts/2013-12-07-dont-fear-directives-in-angular-js</guid>
      <description>

&lt;p&gt;{% img /images/directivefear/anghero.jpeg Superheroic. %}&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Direct what?&lt;/h1&gt;

&lt;p&gt;As I mentioned in &lt;a href=&#34;http://nathanleclaire.com/blog/2013/11/30/fear-and-loathing-with-golang-and-angular-dot-js/&#34;&gt;last week&amp;rsquo;s article&lt;/a&gt; I have been working with &lt;a href=&#34;http://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt; for personal projects lately.  This was largely the result of me, approximately six or seven months ago, feeling like I was missing out on the new hotness by not knowing a client-side MV* framework.  I looked around at a lot of options, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://backbonejs.org/&#34;&gt;Backbone.js&lt;/a&gt; (A crowd favorite, with rock-solid online support/documentation/tutorials)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://emberjs.com/&#34;&gt;Ember.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://knockoutjs.com/&#34;&gt;Knockout.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ultimately I fell into learning Angular for a variety of reasons.  Partially it was because I went to a &amp;ldquo;Coffee Shop Coders&amp;rdquo; presentation where the presenter (&lt;a href=&#34;http://www.tauruscolvin.com/&#34;&gt;Taurus Colvin&lt;/a&gt; - a very friendly dude) explained the basics and impressed me with the possibilities the framework offers.  Maybe it was because I tried to bootstrap a simple Ember project and couldn&amp;rsquo;t get anything working.  I don&amp;rsquo;t know if it was the documentation, the learning curve, my own shortcomings, or all three, but something about Ember didn&amp;rsquo;t click with me.  My choice of Angular was also at least somewhat because I was seduced by &lt;a href=&#34;http://yeoman.io/&#34;&gt;Yeoman&lt;/a&gt; (which, at the time of writing, uses an Angular generator in its usage example) around the time I attempted my first Angular app.  It was a foray which went down in flames, largely because I was so hesitant to make my own directives and services.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;$scope Creep&lt;/h1&gt;

&lt;p&gt;One day after I had started getting interested in Angular I mentioned to a coworker that I was developing an app with the framework.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Oh yeah,&amp;rdquo; he said, &amp;ldquo;I watched a presentation about making directives - seems to be where the real power of it is.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Since I knew that the funny attributes Angular introduces such as &lt;code&gt;ng-show&lt;/code&gt;, &lt;code&gt;ng-class&lt;/code&gt;, and &lt;code&gt;ng-repeat&lt;/code&gt; were directives, I had a feeling he was onto something.  However, I was a little bit too timid to actually tackle making my own.  After all, directives were something that smart people made, not me.  I&amp;rsquo;d have to understand that difficult link/compile stuff, right?  Remember, this was April of 2013 and, though it seems silly to say since at the time of writing only eight months have passed, the quality of documentation, tutorials, and examples for AngularJS was not as good as it is today.  I think &lt;a href=&#34;http://egghead.io&#34;&gt;egghead.io&lt;/a&gt; (an excellent Angular resource if you&amp;rsquo;re not aware) was just getting off the ground, but I certianly hadn&amp;rsquo;t heard of it.&lt;/p&gt;

&lt;p&gt;Less so through concious decision and more so through my own hesitance to learn something I was irrationally afraid of, I began slipping into the trap of creating a tangled mess that stuffed everything possible into &lt;code&gt;$scope&lt;/code&gt;, used &lt;code&gt;ng-include&lt;/code&gt; when I could have used directives, and relied on &lt;code&gt;$broadcast&lt;/code&gt;ing down from &lt;code&gt;$rootScope&lt;/code&gt; when I could have used services.&lt;/p&gt;

&lt;p&gt;I was a fool.&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;How Not To Fear The Directive&lt;/h1&gt;

&lt;p&gt;If I could go back and stop myself from making a whole bunch of mistakes in that app, I would have started with explaining that a directive is just a simple little reusable component for describing the way HTML should behave.  The Angular docs try to harp on this but inevitably they make it seem obtuse and complicated.  &lt;em&gt;Note:  Though they could be better I don&amp;rsquo;t think it&amp;rsquo;s cool to hate on the Angular docs.  They&amp;rsquo;ve gotten way better even in the short time I&amp;rsquo;ve been using the framework.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In my opinion it&amp;rsquo;s a very useful tool because it allows you to encapsulate functionality in a semantic way that will (hopefully) make sense to anyone looking at your markup, and keep your functionality well &amp;ldquo;chunked&amp;rdquo; so that you can keep track of what is happening where instead of dealing with things mutating globally (which most of us hopefully know by now is bad news).&lt;/p&gt;

&lt;p&gt;Ever had this happen with jQuery? You need to do some JavaScript magic with a particular element on the page, and so you give it some arbitrary &lt;code&gt;id&lt;/code&gt; so you can access it with &lt;code&gt;$(&#39;element#id&#39;)&lt;/code&gt;.  Now you get to write a bunch of JavaScript that listens for the relevant events, checks the element&amp;rsquo;s state to see that it is congruent with our expectations, modify its class to change how it is displayed, and so on.  It starts out as a few simple functions using a very powerful tool that soon grows into a complicated mess of callbacks, weird looking selectors, and re-render functions.  It may be strewn across several files with no rhyme or reason.&lt;/p&gt;

&lt;p&gt;Not only is it no fun, it makes it very hard for your designer friends to look at your markup and know what the expected behavior for that HTML is.  So, Angular provides us with directives, which are actually pretty simple to create.  So don&amp;rsquo;t be scared of them like I was.  You just have to create an Angular app:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;var myApp = angular.module(&#39;myApp&#39;, []);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then attach a simple directive:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;myApp.directive(&#39;myDirective&#39;, function() {
    return {
        restrict: &#39;E&#39;,
        template: &#39;&amp;lt;h1&amp;gt;I made a directive!&amp;lt;/h1&amp;gt;&#39;
    };
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s all, you just created a directive!  Now, when you go looking around for some examples of directives online, it&amp;rsquo;s easy to get lost in all of the Angular-specific jargon like linking functions, the &amp;ldquo;restrict&amp;rdquo; property, scope hierarchies and so on.  But I highly recommend that you try not to panic, and realize that there is meaning behind all of the weird symbols and abbreviations you see.  For instance, in the definition for the directive above, I define a &lt;code&gt;restrict: &#39;E&#39;&lt;/code&gt; setting.  What the heck does that mean?&lt;/p&gt;

&lt;p&gt;Well, what it means is, &amp;ldquo;restrict the usage of this directive to only Elements&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;So, you can use it in HTML like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;&amp;lt;body ng-app=&amp;quot;myApp&amp;quot;&amp;gt;
    &amp;lt;myDirective&amp;gt;&amp;lt;/myDirective&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But not like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;&amp;lt;body ng-app=&amp;quot;myApp&amp;quot;&amp;gt;
    &amp;lt;span my-directive&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Angular &amp;ldquo;normalizes&amp;rdquo; the &lt;code&gt;hyphen-usage-attribute&lt;/code&gt; to &lt;code&gt;camelCase&lt;/code&gt; as part of their normalization process for directives - see the &lt;a href=&#34;http://docs.angularjs.org/guide/directive&#34;&gt;documentation&lt;/a&gt;).&lt;/p&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;Why is it useful?&lt;/h1&gt;

&lt;p&gt;So, other than providing a convenient way to make little repeatable bits of HTML that have their own names, why is this useful?&lt;/p&gt;

&lt;p&gt;Well, by default every directive inherits the parent scope but it is also possible for a directive to have its own &lt;a href=&#34;http://www.thinkster.io/pick/KnxWvHUW64/angularjs-understanding-isolate-scope&#34;&gt;isolate scope&lt;/a&gt;.  What this means is, it can have its own little properties that it sets on its own unique &lt;code&gt;$scope&lt;/code&gt; that won&amp;rsquo;t mess around with any of the other properties that you are setting in the rest of your app.  Especially if you are going to use the component in multiple places, or have it in a &lt;code&gt;ng-repeat&lt;/code&gt;, this is incredibly useful.  It allows you to break things down into much more modular components than using some giant &lt;code&gt;BigBallOfMudController&lt;/code&gt; (or several &lt;code&gt;BigBallOfMudController&lt;/code&gt;s) to control the state of your app (which is usually the essence of what ends up happening in the &amp;ldquo;traditional jQuery&amp;rdquo; mess described above).  Instead, each directive is responsible for its own data and it works on it in isolation from the other directives.  In Angular this antipattern would look something like having a big array of objects in a central Controller, and updating individual properties of those objects in that controller instead of having a directive to modularize that kind of operation.&lt;/p&gt;

&lt;p&gt;Check out this example, where I created a &lt;code&gt;gear&lt;/code&gt; directive using &lt;a href=&#34;http://fontawesome.io/&#34;&gt;Font Awesome&lt;/a&gt;&amp;rsquo;s spinning gear icon.  The end result is a lot more flexible than an attempt at creating this using jQuery, or vanilla JavaScript.  Each gear keeps track of whether it is currently spinning or not in the new shared scope automagically created by the ngRepeat directive, so they spin or remain stationary indepent of each other.  However, they are all influenced equally by the &lt;code&gt;ng-model&lt;/code&gt; properties of the parent scope.&lt;/p&gt;

&lt;p&gt;Writing a &lt;code&gt;link&lt;/code&gt; function provides even more power and flexibility, but that&amp;rsquo;s a little outside the scope of this article.  Perhaps another time.&lt;/p&gt;

&lt;iframe src=&#34;http://embed.plnkr.co/i2StmWcxKNZCQb0YtYp0/preview&#34;&gt;&lt;/iframe&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Enjoy your directives, kids, and never ever be scared of them.  &lt;a href=&#34;http://misko.hevery.com/&#34;&gt;Miško&lt;/a&gt;&amp;rsquo;s been up late at night so you can experience HTML as it could have been.&lt;/p&gt;

&lt;p&gt;On a more serious/philosophical note, I wanted to close with a thought that I have that creating your own directives reminds me a bit of &lt;a href=&#34;http://en.wikipedia.org/wiki/Metcalfe&#39;s_law&#34;&gt;Metcalfe&amp;rsquo;s Law&lt;/a&gt; (by analogy of course).  Each directive that gets created increases the power and usefulness of all the other directives.  An Angular in which &lt;code&gt;ng-repeat&lt;/code&gt; exists, for instance, is so much more powerful than one in which it doesn&amp;rsquo;t.  So, remember that they can be stacked and it makes your webapp that much better.&lt;/p&gt;

&lt;p&gt;Until next time, stay sassy Internet.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;Nathan&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The (JavaScript) Question I Bombed In An Interview With a Y Combinator Startup</title>
      <link>http://localhost:1313/_posts/2013-11-16-the-javascript-question-i-bombed-in-an-interview-with-a-y-combinator-startup</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/_posts/2013-11-16-the-javascript-question-i-bombed-in-an-interview-with-a-y-combinator-startup</guid>
      <description>

&lt;p&gt;About a year and a half ago, I was on the hunt for my first &amp;ldquo;real&amp;rdquo; job.  I knew that I wanted to be a &amp;ldquo;web developer&amp;rdquo; (whatever &lt;em&gt;that&lt;/em&gt; entails) but I had no idea where to begin.  I knew just a smidge of PHP.  I was developing websites in Classic ASP at my current internship, but I knew that was an antiquidated technology which was unlikely to help me in the modern job market.  As I had recently begun stomping around &lt;a href=&#34;https://news.ycombinator.com&#34;&gt;Hacker News&lt;/a&gt;, I noticed that they had a &amp;ldquo;jobs&amp;rdquo; section in their header.  So I looked into things, saw that a few companies were hiring, and sent a few e-mails to companies that looked nice.&lt;/p&gt;

&lt;p&gt;{% img /images/y-comb/y-combinator-logo.gif To hack and start things up. %}&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;The Hunt&lt;/h1&gt;

&lt;p&gt;A few e-mailed me back and I managed to set up a phone screen with a company that does next-level web analytics.  Going into the interview I was filled with a mixture of apprehension and excitement.  After all, I knew that Silicon Valley was where the action was at, and I had no idea what kind of intricate or crazy questions they might ask me.  They had listed in their description a desire for strong JavaScript skills, which was appealing to me as I was rapidly learning to enjoy developing in this weird little language created by Brendan Eich.  &lt;em&gt;&amp;ldquo;I know jQuery pretty well,&amp;rdquo;&lt;/em&gt;, I thought- &lt;em&gt;&amp;ldquo;What could possibly go wrong?&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The developer who did my screen was pretty courteous and eased me into things a bit by talking about my background and experience.  I sheepishly admitted that I had studied philosophy in college, not computer science, and he put my concerns at ease by telling me that their founder had never finished college.  That made me feel better about things, since part of the reason I love technology so much is that it is so meritocratic.&lt;/p&gt;

&lt;p&gt;So, without further ado, we began to investigate a coding problem.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;The Problem&lt;/h1&gt;

&lt;p&gt;INTERVIEWER: You&amp;rsquo;re familiar with jQuery, right?&lt;/p&gt;

&lt;p&gt;ME:  Yes, I&amp;rsquo;ve used it at work.  I like JavaScript.&lt;/p&gt;

&lt;p&gt;INTERVIEWER: Great.  So, you&amp;rsquo;re familiar with something like this, right?  Let&amp;rsquo;s say you have a textbox and you want to make a call to the server to get some data every time the user does some typing, if you wanted to make autocomplete suggestions, for example&amp;hellip; &lt;em&gt;(begins typing into a shared/remote codepad)&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;$(document).ready(function() {
    $(&#39;input&#39;).keypress(function() {
        $.ajax({
            // Call the server for some goodness...
        });
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ME: Oh yes, I see.  When the user presses down a key on the element, we will make a call.&lt;/p&gt;

&lt;p&gt;INTERVIEWER: So, you may be able to guess, that there is a problem with this code.  It is very inefficient.  If you type a string with 30 characters into the text box, the server gets called 30 times.  Not good, we are having all kinds of issues with scalability so we can&amp;rsquo;t afford to be writing code like this.&lt;/p&gt;

&lt;p&gt;DEMO:&lt;/p&gt;

&lt;p&gt;&lt;input id=&#34;myBox1&#34; type=&#34;text&#34; placeholder=&#34;Type some stuff in me!&#34; style=&#34;width: 30%;&#34; /&gt; &lt;strong&gt;Called Server &lt;span id=&#34;called_times1&#34;&gt;0&lt;/span&gt; times&amp;hellip;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;
$(document).ready(function() {
    $(&#39;#myBox1&#39;).keypress(function() {
        if (!this.count)
            this.count = 0;
        this.count++;
        $(&#39;#called_times1&#39;).html(this.count);
    });
});
&lt;/p&gt;

&lt;p&gt;ME: I see.&lt;/p&gt;

&lt;p&gt;INTERVIEWER: So we only want to call the server after the user has been typing, then stops typing for 200 milliseconds.  That will give it the illusion of being instantaneous while saving a lot of load on our servers and a lot of ajax handling in the JavaScript.  How would we do that?&lt;/p&gt;

&lt;p&gt;ME:  Uh&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;What Really Happened&lt;/h1&gt;

&lt;p&gt;ME:  I think I would use&amp;hellip; Um&amp;hellip;&lt;/p&gt;

&lt;p&gt;INTERVIEWER:  Well, do you know what a closure is?&lt;/p&gt;

&lt;p&gt;ME:  Yeah!  Closures.  I&amp;rsquo;ve heard of those.&lt;/p&gt;

&lt;p&gt;INTERVIEWER: What about &lt;code&gt;window.setTimeout&lt;/code&gt; ?  Do you know about that?&lt;/p&gt;

&lt;p&gt;ME:  I think that&amp;rsquo;s JavaScript&amp;rsquo;s version of a &lt;code&gt;sleep&lt;/code&gt; function?&lt;/p&gt;

&lt;p&gt;INTERVIEWER:  Kind of&amp;hellip;&lt;/p&gt;

&lt;p&gt;ME:  I think I would&amp;hellip; &lt;em&gt;typing awkwardly and struggling for 30 seconds&lt;/em&gt;  I guess I&amp;rsquo;m not sure.&lt;/p&gt;

&lt;p&gt;INTERVIEWER:  I appreciate your time but perhaps this isn&amp;rsquo;t a good fit.&lt;/p&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;What Should Have Happened&lt;/h1&gt;

&lt;p&gt;ME:  Hm, that&amp;rsquo;s an interesting problem.  So, if we use &lt;code&gt;window.setTimeout&lt;/code&gt; we can delay the call for 200 milliseconds.&lt;/p&gt;

&lt;p&gt;INTERVIEWER:  Right.&lt;/p&gt;

&lt;p&gt;ME:  But that&amp;rsquo;s not going to help us in the case where the user is typing fast, or even just normal speed.  So we need a way to interrupt the timeout if the user keeps typing.&lt;/p&gt;

&lt;p&gt;INTERVIEWER:  Exactly.&lt;/p&gt;

&lt;p&gt;ME:  So, I know that when you call &lt;code&gt;window.setTimeout&lt;/code&gt;, you get back an ID that uniquely references the timeout.  And you can use it to cancel the timeout if need be!  So we should just store the timeout ID in the &lt;code&gt;keypress&lt;/code&gt; function closure, and if the user triggers a keypress event again before the timeout function triggers, we&amp;rsquo;ll just cancel it and set a new one!&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;EDIT:&lt;/em&gt; Some commenters have pointed out that due to the fact that &lt;code&gt;this&lt;/code&gt; in jQuery callbacks refers to the DOM node in question, not the function closure, the ID is actually being stored as a property of the DOM node.  They are correct.)&lt;/p&gt;

&lt;p&gt;INTERVIEWER:  Sounds great!  What would that look like in code?&lt;/p&gt;

&lt;p&gt;ME:  It&amp;rsquo;d look a little something like this&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;$(document).ready(function() {
    $(&#39;input&#39;).keypress(function() {
        if (this.timeoutId) 
            window.clearTimeout(this.timeoutId);
        this.timeoutId = window.setTimeout(function () {
            $.ajax({
                // do some stuff
            });
        }, 200);
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;INTERVIEWER:  Clever.&lt;/p&gt;

&lt;p&gt;ME:  I try.&lt;/p&gt;

&lt;p&gt;DEMO:&lt;/p&gt;

&lt;p&gt;&lt;input id=&#34;myBox2&#34; type=&#34;text&#34; placeholder=&#34;Type some stuff in me!&#34; style=&#34;width: 30%;&#34; /&gt; &lt;strong&gt;Called Server &lt;span id=&#34;called_times2&#34;&gt;0&lt;/span&gt; times&amp;hellip;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;
$(document).ready(function() {
    $(&#39;#myBox2&#39;).keypress(function() {
        if (!this.count)
            this.count = 0;
        if (this.timeoutId)
            window.clearTimeout(this.timeoutId);
        var that = this;
        this.timeoutId = window.setTimeout(function() {
            that.count++;
            $(&#39;#called_times2&#39;).html(that.count);
        }, 200);
    });
});
&lt;/p&gt;

&lt;p&gt;INTERVIEWER:  Now on to the next question&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I bombed this interview but I learned something from it.  I know I could go in more confident and capable today.  It just goes to show you that not every setback in life has to be a bad thing.  Someday in the future I would like to work with Y Combinator or a Y Combinator-based startup, largely because I think there&amp;rsquo;s so much opportunity for learning and growth.&lt;/p&gt;

&lt;p&gt;Thanks for reading and I&amp;rsquo;ll catch you next week,&lt;/p&gt;

&lt;p&gt;Nathan&lt;/p&gt;

&lt;p&gt;&lt;em&gt;EDIT&lt;/em&gt;: Some commenters have pointed out my misuse of &lt;code&gt;clearInterval&lt;/code&gt; as opposed to &lt;code&gt;clearTimeout&lt;/code&gt;.  It turns out that this (mostly) works to clear timeouts, but is clearly not correct (it&amp;rsquo;s meant to be used with &lt;code&gt;window.setInterval&lt;/code&gt;).  I have fixed this now.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5 AngularJS Antipatterns &amp; Pitfalls</title>
      <link>http://localhost:1313/_posts/2014-04-19-5-angularjs-antipatterns-and-pitfalls</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/_posts/2014-04-19-5-angularjs-antipatterns-and-pitfalls</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;The Angular Jungle&lt;/h1&gt;

&lt;p&gt;{%img /images/angular-antipatterns/jungle.jpg %}&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://angularjs.org&#34;&gt;AngularJS&lt;/a&gt; is a big JavaScript framework and it gives you just enough rope to hang yourself with.  I&amp;rsquo;ve written a lot about it in this blog and really hope that I have made a noteworthy impact on improving the general availability of resources.  I&amp;rsquo;ve been working on a project using AngularJS at my dayjob lately and noticed some antipatterns and pitfalls that people fall into when they are new to Angular (myself included, so they&amp;rsquo;re based on my own sweat and blood learning the framework) and I&amp;rsquo;ve consolidated some of them here for you to peruse.  Hopefully I&amp;rsquo;ll save you some pain.&lt;/p&gt;

&lt;p&gt;They are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Not having a dot in your &lt;code&gt;ng-model&lt;/code&gt; (or other places you need it!)&lt;/li&gt;
&lt;li&gt;Extreme overuse of event broadcasting and listening (&lt;code&gt;$emit&lt;/code&gt;, &lt;code&gt;$broadcast&lt;/code&gt;, &lt;code&gt;$on&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Too much stuff in controllers&lt;/li&gt;
&lt;li&gt;Misunderstanding or misusing isolate scope&lt;/li&gt;
&lt;li&gt;Using the outside world instead of doing things the Angular way&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;1. Not having a dot in your &lt;code&gt;ng-model&lt;/code&gt; (or other places you need it!)&lt;/h1&gt;

&lt;p&gt;{%img /images/angular-antipatterns/george.jpg %}&lt;/p&gt;

&lt;p&gt;Angular&amp;rsquo;s &lt;a href=&#34;https://docs.angularjs.org/guide/directive&#34;&gt;directives&lt;/a&gt; provide fantastic flexibility and an amazing way to write HTML that describes its interactive behavior in a clean and clear fashion.  They provide a way to create &lt;a href=&#34;https://egghead.io/lessons/angularjs-understanding-isolate-scope&#34;&gt;isolate scope&lt;/a&gt; to promote reusability and creating a directive that uses this looks something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;angular.module(&#39;myApp&#39;).directive(&#39;myDir&#39;, function () {
  return  {
    restrict: &#39;E&#39;,
    scope: {
      aProperty: &#39;=&#39;,
      bProperty: &#39;&amp;amp;&#39;
    },
    // and so on...
  };
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above definition &lt;code&gt;aProperty&lt;/code&gt; gets passed in through an attribute (normalized to &lt;code&gt;a-property&lt;/code&gt;) and creates a two-way data binding between the parent scope and the child scope.  That means if you change one, the other will be updated to match it and vice versa.  However, because of the way that JavaScript&amp;rsquo;s prototypal inheritance works, sometimes this may not work &amp;ldquo;magically&amp;rdquo; as you would expect.  I will dicuss a particular situation with &lt;code&gt;ng-model&lt;/code&gt; here but know that understanding how this all ties together will save you lots of tears due to &lt;code&gt;ng-switch&lt;/code&gt;, &lt;code&gt;ng-repeat&lt;/code&gt;, etc. creating their own scopes (and &amp;ldquo;shadow&amp;rdquo; properties in the prototype chain) that throw off the way you might be expecting things to work.&lt;/p&gt;

&lt;p&gt;In particular, when you have an &lt;code&gt;ng-model&lt;/code&gt; bound to a property on &lt;code&gt;$scope&lt;/code&gt; which was originally passed in using &lt;code&gt;=&lt;/code&gt; in your child directive:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Whenever you have ng-model there’s gotta be a dot in there somewhere. If you don’t have a dot, you’re doing it wrong.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Words from the mouth of Miško himself.&lt;/p&gt;

&lt;p&gt;This is because &lt;em&gt;primitives&lt;/em&gt; (String, Number, etc.) passed in to a child scope create their own &amp;ldquo;shadow&amp;rdquo; property in the child scope, which hides the original property on the parent scope due to the way that JavaScript prototypes work (the prototype chain will not need to be consulted to determine the value of &lt;code&gt;foo&lt;/code&gt; if &lt;code&gt;foo&lt;/code&gt; is not an &lt;code&gt;Object&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt;).  If they are bound using &lt;code&gt;=&lt;/code&gt; and they are objects, however, &lt;code&gt;foo.bar&lt;/code&gt; &lt;em&gt;will&lt;/em&gt; be bound correctly to the original property in the parent scope.&lt;/p&gt;

&lt;p&gt;Understanding this will save you soooo much pain.  Seriously, if you&amp;rsquo;re serious about Angular at all, take the time to read the offical article I link at the end of this section.  Then read it again.&lt;/p&gt;

&lt;p&gt;I suspect that a misunderstanding of this (communicating effectively from scope to scope up and down the prototype chain) is at least partially what contributes to people digging themselves further and further into a hole by misusing event broadcasting/emitting/listening and isoalte scope, as detailed later on in this article.  When things spiral out of control in this manner, it can really be pure torture.  You&amp;rsquo;re fighting against the framework, and nobody wins in that battle, least of all the people who have to maintain your code.&lt;/p&gt;

&lt;p&gt;The point is, most people new to Angular (and even people who have been doing it for a while) expect this to work :&lt;/p&gt;

&lt;p&gt;{% raw %}
```
&lt;p&gt; You have {{dollars}} dollars &lt;/p&gt;
&lt;crazy-awesome-widget ng-repeat=&#34;account in accounts&#34; info=&#34;dollars&#34;&gt;
&lt;/crazy-awesome-widget&gt;&lt;/p&gt;

&lt;p&gt;
angular.module(&amp;lsquo;dotDemo&amp;rsquo;).controller(&amp;lsquo;OuterCtrl&amp;rsquo;, function($scope) {
  $scope.dollars = 5;
  $scope.accounts = [&amp;ldquo;Tom&amp;rdquo;, &amp;ldquo;Bobby&amp;rdquo;, &amp;ldquo;Sally&amp;rdquo;];
});
angular.module(&amp;lsquo;dotDemo&amp;rsquo;).directive(&amp;lsquo;crazyAwesomeWidget&amp;rsquo;, function() {
  return {
    restrict: &amp;lsquo;E&amp;rsquo;,
    template: &amp;lsquo;&lt;input type=&#34;text&#34; ng-model=&#34;info&#34; /&gt;&amp;rsquo;,
    scope: {
      info: &amp;lsquo;=&amp;rsquo;
    }
  };
});

```
{% endraw %}&lt;/p&gt;

&lt;p&gt;Can you spot the bug?  If you&amp;rsquo;ve been paying attention, you should be able to pick it out easily.&lt;/p&gt;

&lt;iframe src=&#34;http://embed.plnkr.co/ii8xZoOIRcWw4LlNMayf/preview&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Come on, intone it with me.  &lt;em&gt;I need a dot. I need a dot. I need a dot.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the above code the input boxes won&amp;rsquo;t update the property in the parent scope.  The prototype chain creates a new property &lt;code&gt;info&lt;/code&gt; which is unique to the child scope instead of bound to the parent scope.  It won&amp;rsquo;t work this way.  You need an object.  The code should look like this instead:&lt;/p&gt;

&lt;p&gt;{% raw %}
```
&lt;p&gt; You have {{customerData.dollars}} dollars &lt;/p&gt;
&lt;crazy-awesome-widget ng-repeat=&#34;account in accounts&#34; info=&#34;customerData&#34;&gt;
&lt;/crazy-awesome-widget&gt;&lt;/p&gt;

&lt;p&gt;
angular.module(&amp;lsquo;dotDemo&amp;rsquo;).controller(&amp;lsquo;OuterCtrl&amp;rsquo;, function($scope) {
  $scope.customerData = {
    dollars: 5
  };
  $scope.accounts = [&amp;ldquo;Tom&amp;rdquo;, &amp;ldquo;Bobby&amp;rdquo;, &amp;ldquo;Sally&amp;rdquo;];
});
angular.module(&amp;lsquo;dotDemo&amp;rsquo;).directive(&amp;lsquo;crazyAwesomeWidget&amp;rsquo;, function() {
  return {
    restrict: &amp;lsquo;E&amp;rsquo;,
    template: &amp;lsquo;&lt;input type=&#34;text&#34; ng-model=&#34;info.dollars&#34; /&gt;&amp;rsquo;,
    scope: {
      info: &amp;lsquo;=&amp;rsquo;
    }
  };
});

```
{% endraw %}&lt;/p&gt;

&lt;iframe src=&#34;http://embed.plnkr.co/IVkqcNVhwQXd1zQ9nZQ2/preview&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Boom, synchronization from parent scope =&amp;gt; isolated child scopes and back again.&lt;/p&gt;

&lt;p&gt;Big shout out to Reddit user &lt;a href=&#34;http://www.reddit.com/user/Commentares&#34;&gt;Commentares&lt;/a&gt; who caught a flaw in the original implementation of my first example in the first draft of this article.&lt;/p&gt;

&lt;p&gt;See for reference:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jimhoskins.com/2012/12/14/nested-scopes-in-angularjs.html&#34;&gt;This excellent article by Jim Hoskins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular.js/wiki/Understanding-Scopes&#34;&gt;This aforementioned Angular documentation gettin&amp;rsquo; mad deep about scopes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;2. Extreme overuse of event broadcasting and listening (&lt;code&gt;$emit&lt;/code&gt;, &lt;code&gt;$broadcast&lt;/code&gt;, &lt;code&gt;$on&lt;/code&gt;)&lt;/h1&gt;

&lt;p&gt;Everybody loves to hate on GOTOs.  Poor little GOTOs.  All they ever wanted to do was help control program execution flow and branching, and they get the Rodney Dangerfield treatment.  They&amp;rsquo;re reviled with that sort of knee-jerk reaction that only programmers can revile something with.  You know the type.  They&amp;rsquo;re the ones who got burned by &lt;code&gt;git rebase&lt;/code&gt; one time (it was their own fault) and spend way too much effort and energy spreading FUD about rebases.  But I digress.  My point is, there&amp;rsquo;s this Angular antipattern I&amp;rsquo;ve seen and fallen into, where &lt;code&gt;$scope.$emit&lt;/code&gt; and &lt;code&gt;$scope.$broadcast&lt;/code&gt; have become the new GOTO.  Except that it&amp;rsquo;s shiny and new and Angular-ey, so everybody gives it a pass.  &lt;code&gt;$scope.$watch&lt;/code&gt; can kind of be abused in the same way, but the others are slightly easier to pick on.&lt;/p&gt;

&lt;p&gt;I really feel that you should keep manual event broadcasting and catching out of your code if possible.  It doesn&amp;rsquo;t usually do a whole lot of good and confuses the hell out of the people who have to maintain your code (including you!).  The problem is thus:  Let&amp;rsquo;s say you have something going wacky in a &lt;code&gt;$scope.$on&lt;/code&gt;.  You set a breakpoint in the defined callback function that runs when that &lt;code&gt;$scope.$on&lt;/code&gt; catches its defined event.  OK, now what?  You have no idea where that event came from or what its intended purpose is, and if it&amp;rsquo;s wreaking all sorts of unintended havoc you&amp;rsquo;re in big trouble.  Usually this can be avoided by careful use of services and proper scope inheritance.&lt;/p&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;3. Too much stuff in controllers&lt;/h1&gt;

&lt;p&gt;It&amp;rsquo;s unfortunate that I have to point this one out, but as I&amp;rsquo;ve personally fallen into this pitfall especially when first getting started with Angular, I suppose I can give people a free pass on making this mistake once or twice.  After that, however, they should definitely learn.&lt;/p&gt;

&lt;p&gt;Your controllers should be lean.  Say it with me.&lt;/p&gt;

&lt;p&gt;My controllers should be lean.&lt;/p&gt;

&lt;p&gt;My controllers should be lean.&lt;/p&gt;

&lt;p&gt;My controllers &lt;em&gt;are&lt;/em&gt; lean.&lt;/p&gt;

&lt;p&gt;This means that absolutely everything which can be stripped out of them, should be.  They exist to coordinate the delicate dance between your other resources (services and directives).&lt;/p&gt;

&lt;p&gt;For instance, I came across a line introduced in one of our controllers that looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;body&#39;).attr(&#39;data-state&#39;, &#39;someNewState&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was my reaction upon finding this code in this controller:&lt;/p&gt;

&lt;p&gt;{%img /images/angular-antipatterns/hulk.gif %}&lt;/p&gt;

&lt;p&gt;Note:  My actual reaction was way more passive aggressive (wrote about it in my &lt;em&gt;blog&lt;/em&gt;!  Showed that guy).&lt;/p&gt;

&lt;p&gt;In Angular, DOM manipulation is done inside directives.  NOT controllers.  DOM manipulation is done inside directives.  Every aspiring Angular programmer should have this branded into his or her brain.&lt;/p&gt;

&lt;p&gt;Other common things that slip into controllers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ajax (sometimes disguised in a half-baked abstraction) - this should be done in services&lt;/li&gt;
&lt;li&gt;Tangled mess of event handling as discussed in last section&lt;/li&gt;
&lt;li&gt;Things that are basically service or factory logic, but eh I&amp;rsquo;m too lazy to move this code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don&amp;rsquo;t do it.  If you keep your controllers lean and small they will reward you with readability and ease of debugging.  If you let them spiral out of control you will be punished unceremoniously.&lt;/p&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;4. Misunderstanding or misusing isolate scope&lt;/h1&gt;

&lt;p&gt;Isolate scope is really nice.  It prevents directives from just accessing / modifying the parent scope willy-nilly, opening the door to all kinds of bugs associated with global-ish scope, and promotes reusability.  But it&amp;rsquo;s important to realize that this is the point of isolate scope.  Consequently, if you&amp;rsquo;re passing a bunch of properties into your directive&amp;rsquo;s &lt;code&gt;$scope&lt;/code&gt;, and then cascading them downwards through a variety of child scopes, you are probably doing something wrong.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve seen this a bit.  If you are passing a bunch of information down to your directive&amp;rsquo;s scope, either it should be inheriting by default (in which case you don&amp;rsquo;t want isolate scope), or you should bundle the properties that you can together in an object or two to keep the &lt;code&gt;scope&lt;/code&gt; definition nice and clean and promote readability of the HTML.&lt;/p&gt;

&lt;h1 id=&#34;toc_5&#34;&gt;5. Using the outside world instead of doing things the Angular way&lt;/h1&gt;

&lt;p&gt;{%img /images/angular-antipatterns/but-computers.png Aren&amp;rsquo;t we all nowadays? %}&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s really tempting, especially when first learning Angular, and directives in particular, to just write jQuery code like we always have that happens to be wrapped in an Angular directive.  While this is still probably better than rolling with no framework at all and creating a tangled mess, it indicates a basic ungrok of the Angular way.&lt;/p&gt;

&lt;p&gt;Things should be done in Angular, when they can.  Angular provides so much niceness in the form of built-in directives, services (&lt;code&gt;$window&lt;/code&gt;, &lt;code&gt;$timeout&lt;/code&gt;, &lt;code&gt;$http&lt;/code&gt; et al. wrap these things for you so you don&amp;rsquo;t have to worry about accidentally interfering with Angular&amp;rsquo;s internals!) that we should only reach for custom solutions when we have to (and believe me, you will - just think carefully before doing so).  Just wrapping jQuery code in a directive doesn&amp;rsquo;t do us any good, and creates complications when we need to start doing stuff like chucking &lt;code&gt;$scope.$apply&lt;/code&gt; into things.  So think things through, and do them the Angular way.&lt;/p&gt;

&lt;p&gt;Likewise dependencies that you had before (modules you are relying on etc.) should be refactored into e.g. factories for increased ease of use and testability.  If you have the time to use Angular into your project, you have the time to do this too.  Angular will reward you with layers of increased richness.&lt;/p&gt;

&lt;h1 id=&#34;toc_6&#34;&gt;Fin&lt;/h1&gt;

&lt;p&gt;I really hope that this article helps people avoid these bad behaviors, or at least see them when they come across them and refactor them into something better.&lt;/p&gt;

&lt;p&gt;Until next time, stay sassy Internet.  And &lt;a href=&#34;http://nathanleclaire.com&#34;&gt;consider subscribing to my mailing list&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nate&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Want to Work With Databases In Golang?  Let&#39;s Try Some gorp.</title>
      <link>http://localhost:1313/_posts/2013-11-04-want-to-work-with-databases-in-golang-lets-try-some-gorp</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/_posts/2013-11-04-want-to-work-with-databases-in-golang-lets-try-some-gorp</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;Google&amp;rsquo;s Go&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/&#34;&gt;Go&lt;/a&gt; is a new programming language released by &lt;a href=&#34;http://www.google.com&#34;&gt;Google&lt;/a&gt;.  It has an excellent pedigree (see &lt;a href=&#34;http://en.wikipedia.org/wiki/Rob_Pike&#34;&gt;Rob Pike&lt;/a&gt; and &lt;a href=&#34;http://en.wikipedia.org/wiki/Ken_Thompson_%28computer_programmer%29&#34;&gt;Ken Thompson&lt;/a&gt;) and it brings a lot of interesting things to the table as a programming tool. Go has been the subject of rave reviews as well as controversy.  As Google is a web company it&amp;rsquo;s no surprise that Go seems hard-wired from the start to be used in the context of the modern web and the standard libaries include everything from &lt;a href=&#34;http://golang.org/pkg/net/http/&#34;&gt;HTTP servers&lt;/a&gt; to &lt;a href=&#34;http://golang.org/pkg/html/template/&#34;&gt;a templating system&lt;/a&gt; to address these ends.  A lot of companies and hobbyist hackers seem to enjoy Go as a utility language that replaces components which used to be written in Python or Perl (with Go offering better performance).&lt;/p&gt;

&lt;p&gt;Its supporters emphasize its &lt;a href=&#34;http://benchmarksgame.alioth.debian.org/u64q/benchmark.php?test=all&amp;amp;lang=go&amp;amp;lang2=yarv&amp;amp;data=u64q&#34;&gt;performance&lt;/a&gt;, nifty approach to concurrency (it&amp;rsquo;s &lt;a href=&#34;http://golang.org/doc/effective_go.html#concurrency&#34;&gt;built right in&lt;/a&gt;), and fast compile times as advantages.  Some of its detractors dislike its lack of exceptions and generics, but the purpose of this article is not to address these concerns, which have already been discussed &lt;em&gt;ad nauseum&lt;/em&gt;.  Instead, this article will talk about and examine the &lt;code&gt;gorp&lt;/code&gt; library.&lt;/p&gt;

&lt;p&gt;{% img /images/gorp/gorp.jpeg Eh? %}&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t actually mean GOOD OLD RAISINS &amp;amp; PEANUTS, of course- I mean &lt;a href=&#34;https://github.com/coopernurse/gorp&#34;&gt;gorp&lt;/a&gt;, an &amp;ldquo;ORM-ish library for Go&amp;rdquo;.  What is it, and how does it work its funny magic?&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;ORM-ish?&lt;/h1&gt;

&lt;p&gt;The README.md from &lt;code&gt;gorp&lt;/code&gt;&amp;rsquo;s repository is just too great an introduction to not quote, check it out:&lt;/p&gt;

&lt;blockquote&gt;
I hesitate to call gorp an ORM. Go doesn&#39;t really have objects, at least not in the classic Smalltalk/Java sense. There goes the &#34;O&#34;. gorp doesn&#39;t know anything about the relationships between your structs (at least not yet). So the &#34;R&#34; is questionable too (but I use it in the name because, well, it seemed more clever).

The &#34;M&#34; is alive and well. Given some Go structs and a database, gorp should remove a fair amount of boilerplate busy-work from your code.

I hope that gorp saves you time, minimizes the drudgery of getting data in and out of your database, and helps your code focus on algorithms, not infrastructure.
&lt;/blockquote&gt;

&lt;p&gt;When I was looking into &lt;a href=&#34;http://www.github.com/robfig/revel&#34;&gt;Revel&lt;/a&gt; as a possibility for a Go web application framework, I found myself frustrated by its lack of a database solution.  Persistence is just such a key aspect of web applications, and something that we&amp;rsquo;re so accustomed to letting frameworks take care of for us (a la Rails and Django) that it was hard to believe a large framework like Revel didn&amp;rsquo;t even want to touch the problem- especially since &lt;a href=&#34;http://www.playframework.com/documentation/1.2.1/model&#34;&gt;Play&lt;/a&gt;, a large source of inspiration, provides such functionality.  Revel is awesome in a lot of other ways, like its code hotswap feature, but for now at least it is &amp;ldquo;bring-your-own-ORM&amp;rdquo; (or other database solution).&lt;/p&gt;

&lt;p&gt;So I set off to look into this funny &lt;code&gt;gorp&lt;/code&gt; business.  As it turns out, &lt;code&gt;gorp&lt;/code&gt; is pretty straightforward and powerful.  At the time of writing, &lt;code&gt;gorp&lt;/code&gt; can be used with MySQL, Sqlite3, and PostgreSQL (although there are some known issues that cause different drivers to behave slightly differently).&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Creating Tables&lt;/h1&gt;

&lt;p&gt;The basic use case for &lt;code&gt;gorp&lt;/code&gt; is to define some structs and then register them with an instance of &lt;code&gt;gorp&lt;/code&gt;&amp;rsquo;s &lt;code&gt;DbMap&lt;/code&gt; structure.  This structure is responsible for generating the raw SQL to perform basic database operations on a table that will mirror your custom defined structure.  &lt;code&gt;gorp&lt;/code&gt; can easily create that table for you in the first place.  Check it out:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;type Person struct {
    Id      int64    
    Created int64
    Updated int64
    FName   string
    LName   string
}

// connect to db using standard Go database/sql API
// use whatever database/sql driver you wish
db, err := sql.Open(&amp;quot;mymysql&amp;quot;, &amp;quot;tcp:localhost:3306*mydb/myuser/mypassword&amp;quot;)

// construct a gorp DbMap
dbmap := &amp;amp;gorp.DbMap{Db: db, Dialect: gorp.MySQLDialect{&amp;quot;InnoDB&amp;quot;, &amp;quot;UTF8&amp;quot;}}

table := dbmap.AddTable(Person{}).SetKeys(true, &amp;quot;Id&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use &lt;code&gt;AddTableWithName&lt;/code&gt; if you don&amp;rsquo;t want the table name to be the same as the structure type&amp;rsquo;s name (in fact, &lt;code&gt;AddTable&lt;/code&gt; calls &lt;code&gt;AddTableWithName&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;table := dbmap.AddTableWithName(Person{}, &amp;quot;People&amp;quot;).SetKeys(true, &amp;quot;Id&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can imagine, being able to easily create and drop tables like this is useful for unit tests.&lt;/p&gt;

&lt;p&gt;You can use structure field tags if you want to change the name of the columns in the actual SQL (let&amp;rsquo;s say your team has a convention to have only lowercase column names, but all members of a Go struct must be uppercase).  Additionally you can tell &lt;code&gt;gorp&lt;/code&gt; to ignore fields completely with &lt;code&gt;db:&amp;quot;-&amp;quot;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;type Person struct {
    Id       int64                        `id`
    Created  int64                        `created`
    Updated  int64                        `modified`
    FName    string                       `firstName`
    LName    string                       `lastName`
    Comments *SomeNonPersistentStructure  `db:&amp;quot;-&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A seemingly undocumented feature is that you can set the size of the table columns manually.  If you don&amp;rsquo;t, &lt;code&gt;gorp&lt;/code&gt; will automatically figure something out for you that may be a bit too large or too small.  For example, &lt;code&gt;gorp&lt;/code&gt; turns this structure definition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// A Thing is a post (link submission or a comment)
type Thing struct {
    Id            int64
    Username      string
    Href          string
    Upvotes       int64
    Downvotes     int64
    Description   string
    ParentThingId int64
    Created       int64
    Updated       int64
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;into this (with default behavior / MySQL driver):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+---------------+--------------+------+-----+---------+-------+
| Field         | Type         | Null | Key | Default | Extra |
+---------------+--------------+------+-----+---------+-------+
| Id            | bigint(20)   | YES  |     | NULL    |       |
| Username      | varchar(255) | YES  |     | NULL    |       |
| Href          | varchar(255) | YES  |     | NULL    |       |
| Upvotes       | bigint(20)   | YES  |     | NULL    |       |
| Downvotes     | bigint(20)   | YES  |     | NULL    |       |
| Description   | varchar(255) | YES  |     | NULL    |       |
| ParentThingId | bigint(20)   | NO   | PRI | NULL    |       |
| Created       | bigint(20)   | YES  |     | NULL    |       |
| Updated       | bigint(20)   | YES  |     | NULL    |       |
+---------------+--------------+------+-----+---------+-------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you call &lt;code&gt;gorp.DbMap.AddTableWithName&lt;/code&gt;, it returns you a pointer to a &lt;code&gt;TableMap&lt;/code&gt; struct that you can use to set the size of the columns.  So you think 255 characters is a bit long for a username?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;t1 := dbmap.AddTable(Person{}).SetKeys(true, &amp;quot;Id&amp;quot;)
t1.ColMap(&amp;quot;Username&amp;quot;).SetMaxSize(25)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The things you learn from reading the unit tests (and digging in the &lt;a href=&#34;https://github.com/robfig/revel/blob/master/samples/booking/app/controllers/gorp.go&#34;&gt;Revel examples&lt;/a&gt;), huh?&lt;/p&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;CRUD&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at what CRUD (Create-Read-Update-Delete) looks like using &lt;code&gt;gorp&lt;/code&gt;-mapped structures.&lt;/p&gt;

&lt;p&gt;Inserting a new row is simple (note that you have to declare the structs as pointers so that optional callback hooks can operate on your actual data instead of copies):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;person := &amp;amp;Person{
    Created: time.Now().UnixNow(), 
    Updated: time.Now().UnixNow(),
    FName: &amp;quot;Joe&amp;quot;,
    LName: &amp;quot;Smith&amp;quot;
}
err := dbmap.Insert(person)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Want to select by primary key?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;primaryKey := 1
p1, err := dbmap.Get(Person{}, primaryKey)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How about selecting by arbitrary (non-primary-key) fields?  You can use &lt;code&gt;dbm.Select&lt;/code&gt; to get a slice, or &lt;code&gt;dbm.SelectOne&lt;/code&gt; to populate the slice or structure with the revelant data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;var ids []int64
_, err := dbmap.Select(&amp;amp;ids, &amp;quot;select id from Person&amp;quot;)

lname = &amp;quot;LeClaire&amp;quot;
var person Person
err := dbmap.SelectOne(&amp;amp;person, &amp;quot;select * from Person where LName=?&amp;quot;, lname)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Update and delete work similarly :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;// count is the # of rows updated / deleted
person.FName = &amp;quot;Nate&amp;quot; 
count, err := dbmap.Update(person)

// or just delete it 
count, err := dbmap.Delete(person)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;How does it do all of this crazy voodoo?&lt;/h1&gt;

&lt;p&gt;Obviously gorp is really cool, and useful.  So how does it work?&lt;/p&gt;

&lt;p&gt;{% img /images/gorp/use-the-source-luke.jpeg Best way to learn. %}&lt;/p&gt;

&lt;p&gt;I had no idea, but I remembered the words of Jeff Atwood and other wise folks and cracked open the &lt;a href=&#34;https://github.com/coopernurse/gorp/blob/master/gorp.go&#34;&gt;source code on github&lt;/a&gt;.  Reading the unit tests also proved useful in understanding how &lt;code&gt;gorp&lt;/code&gt; should be used (one of the virtues of meticulously tested code - it documents).&lt;/p&gt;

&lt;p&gt;Immediately upon cracking open the definition of &lt;code&gt;DbMap.AddTable&lt;/code&gt; and &lt;code&gt;DbMap.AddTableWithName&lt;/code&gt;, I had one of those &amp;ldquo;aha&amp;rdquo; moments that programmers know so well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;// AddTableWithName has the same behavior as AddTable, but sets
// table.TableName to name.
func (m *DbMap) AddTableWithName(i interface{}, name string) *TableMap {
        t := reflect.TypeOf(i)
        if name == &amp;quot;&amp;quot; {
                name = t.Name()
        }

        // check if we have a table for this type already
        // if so, update the name and return the existing pointer
        for i := range m.tables {
                table := m.tables[i]
                if table.gotype == t {
                        table.TableName = name
                        return table
                }
        }

        tmap := &amp;amp;TableMap{gotype: t, TableName: name, dbmap: m}
        tmap.columns, tmap.version = readStructColumns(t)
        m.tables = append(m.tables, tmap)

        return tmap
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, it uses reflection!  Go&amp;rsquo;s &lt;a href=&#34;http://golang.org/pkg/reflect/&#34;&gt;reflect&lt;/a&gt; package is what powers this manipulation and mapping of structure metadata (I wasn&amp;rsquo;t aware Go was capable of reflection when I started using &lt;code&gt;gorp&lt;/code&gt;, so it was a bit of a surprise to find this out).&lt;/p&gt;

&lt;p&gt;Suddenly everything became clearer to me and I feel like the code for &lt;code&gt;AddTableWithName&lt;/code&gt; is fairly self-explanatory if you are familiar with the usage of the library.  The first part of the method deals with naming the table (user defined or based on the name of the structure).  The middle section checks to see if the table already is in existence and if so it updates the name (consequently, we can set up a table for a structure with one name, then change the table name later on if we want).  Lastly, it adds the table if it doesn&amp;rsquo;t exist and returns a pointer to the &lt;code&gt;TableMap&lt;/code&gt; structure (we discussed this structure briefly earlier).&lt;/p&gt;

&lt;p&gt;The code for the &lt;code&gt;readStructColumns&lt;/code&gt; internal method that you see called near the end of the method is pretty cool as well, it powers &lt;code&gt;gorp&lt;/code&gt;&amp;rsquo;s ability to deal with struct embedding (a pretty cool feature of the libary IMO).  I won&amp;rsquo;t reproduce it here, but if you are curious &lt;a href=&#34;https://github.com/coopernurse/gorp/blob/master/gorp.go&#34;&gt;go check it out&lt;/a&gt;!&lt;/p&gt;

&lt;h1 id=&#34;toc_5&#34;&gt;The future&lt;/h1&gt;

&lt;p&gt;Alas, we developers are never easy to please forever.  Here I will note some things that may become issues for users of &lt;code&gt;gorp&lt;/code&gt;, and hopefully get the ball rolling on conversation about directions for &lt;code&gt;gorp&lt;/code&gt;&amp;rsquo;s future development.&lt;/p&gt;

&lt;p&gt;Support for &lt;code&gt;TEXT&lt;/code&gt; columns (and maybe other, &amp;ldquo;weirder&amp;rdquo; column types like PostgreSQL&amp;rsquo;s &lt;a href=&#34;http://www.postgresql.org/docs/9.2/static/datatype-json.html&#34;&gt;json data type&lt;/a&gt;) seems like something that will be needed to really bring &lt;code&gt;gorp&lt;/code&gt; into the limelight as a robust and mature tool (see &lt;a href=&#34;https://github.com/coopernurse/gorp/issues/34&#34;&gt;this issue&lt;/a&gt; on github, where someone brings up &lt;code&gt;TEXT&lt;/code&gt; specifically).  A &lt;code&gt;VARCHAR&lt;/code&gt; column arguably would be inappropriate for storing the content of a Reddit comment or a blog post, for example.  I&amp;rsquo;d be curious how the maintainers are interested in handling this- getting into defining custom data types with &lt;code&gt;gorp&lt;/code&gt; (e.g. &lt;code&gt;gorp.Text&lt;/code&gt;) might be dicey, for instance, or it could prove to be a robust solution.  In the long run, it&amp;rsquo;s worth considering how much of &lt;code&gt;gorp&lt;/code&gt;&amp;rsquo;s flexibility and power comes from its ability to discern those kinds of things with minimal input from the user, and how much of that we&amp;rsquo;re willing to give up to have a VERY robust database / ORM-ish solution for Golang.&lt;/p&gt;

&lt;p&gt;Other tough nuts to crack with &lt;code&gt;gorp&lt;/code&gt; (Golang&amp;rsquo;s strict/static typing, which is definitely one of its advantages in some ways, is partially what makes some of these so challenging) :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Handling relational data&lt;/li&gt;
&lt;li&gt;Joins (the existing solution looks pretty workable, but feels a bit stiff - admittedly I haven&amp;rsquo;t tried it though)&lt;/li&gt;
&lt;li&gt;Data migrations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any ideas?&lt;/p&gt;

&lt;p&gt;Also, not to be &amp;ldquo;that guy&amp;rdquo;, but it could probably stand to be broken up into a few different files (one for each of the different structures, for instance) instead of one large &lt;code&gt;gorp.go&lt;/code&gt; file.&lt;/p&gt;

&lt;h1 id=&#34;toc_6&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;gorp&lt;/code&gt; is a very cool, if still young, tool / library.  I find it to be a good combination of abstraction and practicality.  What do you think?&lt;/p&gt;

&lt;p&gt;Thanks for reading, I&amp;rsquo;ll see you next week.&lt;/p&gt;

&lt;p&gt;Nate&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learn Node.js The Troll Way</title>
      <link>http://localhost:1313/_posts/2013-02-06-learn-node-dot-js-the-troll-way</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/_posts/2013-02-06-learn-node-dot-js-the-troll-way</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Server Side JavaScript&lt;/h2&gt;

&lt;p&gt;As many of you are probably aware, &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; is all the rage with the kids these days.  It&amp;rsquo;s so popular that users even have the nerve to &lt;a href=&#34;http://code.google.com/p/v8/issues/detail?id=847#c15&#34;&gt;gall Google developers&lt;/a&gt;, insisting that the V8 JavaScript engine is important for things outside of mere Chrome.  Node has rapidly been evolving and maturing into the new hotness of the web development community.  Its core is driven by the idea of asynchronous input and output,
a way to manage the latency inherent in developing applications for the web.  With Node, you gain the ability to write JavaScript which runs on the server-side of an application- and the somewhat eyebrow-raising ability to create a server within JavaScript itself.&lt;/p&gt;

&lt;p&gt;Throw in a sweet package manager for every sort of JS voodoo you can imagine (&lt;a href=&#34;https://npmjs.org/&#34;&gt;npm&lt;/a&gt;), and you&amp;rsquo;ve suddenly opened up the door to a whole new world of handy tools and tricks, accessible to many developers due to the ubiquitous nature of JavaScript on the modern web.  The V8 JavaScript engine on which it is based is has performed pretty well for a web-based language in &lt;a href=&#34;http://shootout.alioth.debian.org/u32/which-programming-languages-are-fastest.php&#34;&gt;benchmarks&lt;/a&gt;.  We all know that benchmarks are even worse dirty lies than statistics, so what I personally think is really cool about Node is that it mandates one to approach concurrency with a direct focus from the start of application development.  Surely there&amp;rsquo;s a lot to be said for not having to rip off and reinvent the wheel of horizontal scalability.  But I digress.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Screen Scraping With Node.js&lt;/h2&gt;

&lt;p&gt;{% img /images/skyrim-guard.jpeg Go cast your fancy JavaScript somewhere else! %}&lt;/p&gt;

&lt;p&gt;The purpose of this article is to give a quick flyby example, in which I will be demonstrating Node.js by constructing a screen-scraping bot to troll my brother on Reddit.  I had an idea to build an application which uses the Reddit API, to spam my brother&amp;rsquo;s account with Skyrim quotes/dialogue in comments for entertainment purposes.  If he ever were to reply, bewildered, my bot would ping back: &lt;em&gt;&amp;ldquo;Problem, theonewhoquestions?&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Naturally, in order to do this, I needed to gather the Skyrim intel (quotes) first.  Originally I set out to write the crawler in Python as I have some experience with the venerable &lt;a href=&#34;http://www.crummy.com/software/BeautifulSoup/&#34;&gt;BeautifulSoup&lt;/a&gt; Module.  But I was already using Node a bit as a result of Twitter&amp;rsquo;s Bootstrap framework, and I was curious to challenge myself to actually build something with it for fun and comprehensive learning.  So, I decided to investigate.&lt;/p&gt;

&lt;p&gt;Turns out there are a few modules that come in handy for a task like this in Node.
&lt;code&gt;javascript
    var jsdom = require(&#39;jsdom&#39;);
&lt;/code&gt;
This is the idiomatic way to import modules in Node.  The jsdom module for Node enables us to simulate a DOM environment which many of us familiar with (working with client side code) for use in our Node script.  And naturally, it&amp;rsquo;s as easy as one, two, callback!&lt;/p&gt;

&lt;p&gt;Since I am familiar with using jQuery to parse the DOM, I opted to use it to extract the quotes from &lt;a href=&#34;http://www.uesp.net/wiki/Skyrim:Guard&#34;&gt;this website&lt;/a&gt;, where they are contained within table cells ripe for the picking.  To do this with the jsdom module, you call the &lt;code&gt;jsdom.env&lt;/code&gt; method.  As arguments we pass in the address of the HTML we wish to parse.
``` javascript
    jsdom.env(&amp;lsquo;&lt;a href=&#34;http://www.uesp.net/wiki/Skyrim:Guard&#39;&#34;&gt;http://www.uesp.net/wiki/Skyrim:Guard&#39;&lt;/a&gt;,
      [ &amp;lsquo;&lt;a href=&#34;http://code.jquery.com/jquery.min.js&#39;&#34;&gt;http://code.jquery.com/jquery.min.js&#39;&lt;/a&gt; ],
      function(errors, window) {
        var $ = window.$;
        $ = stripTags($);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var $skyrim_quotes = $(&#39;tr td&#39;).filter( function(element, index, array) {
        if ( $(index).html().match(/^&amp;quot;.*&amp;quot;$/) ) {
          return true;
        } else {
          return false;
        }
    });

    $skyrim_quotes.each( function() {
      var $scopedElem = $(this);
      var content = $scopedElem.html().stripHTMLSpecialChars().stripDoubleQuotes();

      console.log( content );

    }); 
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;There&#39;s a lot going on here that merits explanation, so I will take a second to break down in more detail what is going on in this chunk of code.  We have an instance of the `jsdom` object so we can call the `env` method to bootstrap up a DOM to parse.  The first argument to this method (`&#39;http://www.uesp.net/wiki/Skyrim:Guard&#39;`) is the URL to query for the HTML to instantiate this DOM with.  You can also just pass in plain old HTML as a string if you happen to have some of that laying around in dire need of parsing.

The second argument to the `env` method is a list of scripts to be included in the virtual window (DOM).
``` javascript
    [ &#39;http://code.jquery.com/jquery.min.js&#39; ],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this instance and many of the examples given on the &lt;code&gt;jsdom&lt;/code&gt; &lt;a href=&#34;https://github.com/tmpvar/jsdom&#34;&gt;Github page&lt;/a&gt;, we include the jQuery library.  If one wanted to use Mootools or Underscore.js, I imagine that is also totally doable, although I have no anecdotal evidence to support this hypothesis.  For my purposes, jQuery was a comfortable and effective fit.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;third&lt;/em&gt; argument to the &lt;code&gt;jsdom.env&lt;/code&gt; method, and arguably the most critical, is a callback function to be executed once the response has been received from the server (or immediately, in the case of passing in your own HTML).&lt;br /&gt;
&lt;code&gt;javascript
      function(errors, window) {
        // ...
      }
&lt;/code&gt;
It takes two arguments:  The first is called &lt;code&gt;errors&lt;/code&gt; and is an list of errors which you can inspect if something in the &lt;code&gt;env&lt;/code&gt; method goes wonky (in the code I&amp;rsquo;ve presented here &lt;code&gt;errors&lt;/code&gt; is ignored, although you still need to have it in the definition of your callback function).  The second is called &lt;code&gt;window&lt;/code&gt; and it is the coup de grâce of what we are seeking: a bootstrapped, &amp;ldquo;invisible&amp;rdquo; DOM that our script can parse.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s worth pausing for a second here to think about why the &amp;ldquo;Node way&amp;rdquo; results in what may seem to some people to result in an expansive sea of callback spaghetti (if JavaScript didn&amp;rsquo;t already appear to you to be an expansive sea of said callback spaghetti).  Any time that Node encounters a situation which otherwise might block the execution of code (such as an HTTP GET request to an external service), it simply defines a callback function to be executed when that &lt;em&gt;event&lt;/em&gt; occurs (i.e. when your GET request is finished).&lt;/p&gt;

&lt;p&gt;But onward to the trolling we must progress!  The very first thing I do in this brave new callback where we will be doing our DOM parsing is define a few variables.
&lt;code&gt;javascript
    var $ = window.$;
    $ = stripTags($);
&lt;/code&gt;
&lt;code&gt;jsdom&lt;/code&gt; allows access to the jQuery object through the &lt;code&gt;window&lt;/code&gt; object, and as I would be accessing it often enough to justify a shorthand method of access, that is what &lt;code&gt;var $ = window.$;&lt;/code&gt; is all about.  So what&amp;rsquo;s with that &lt;code&gt;stripTags&lt;/code&gt; call?  Well, the values that I was after were plain text without any HTML inside, as said HTML in a Reddit comment might shatter the illusion that it could be a person typing said Skyrim quotes instead of a robot.  So, for example, some of the entries in the table cells have words &lt;em&gt;in italics&lt;/em&gt; and I needed to get rid of these tags.  Ergo, my &lt;code&gt;stripTags&lt;/code&gt; function.
``` javascript
    /* consumes jQuery object
       returns jQuery object */&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function stripTags($) {

  // Cleaning out anchor tags, italics, and one span which is a warning not
  // to edit for nice, readable quotes

  $(&#39;tr td a&#39;).contents().unwrap();
  $(&#39;tr td i&#39;).contents().unwrap();
  $(&#39;span&#39;).contents().unwrap();
  $(&#39;small&#39;).contents().unwrap();

  return $;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Using `unwrap()` on client-side code willy-nilly like this would more likely than not b0rk some critical piece of functionality in your app, but I only care about the data that I am scraping so it&#39;s not really relevant here.  It gets the job done, which is to turn quotes which in their raw form look like

&amp;lt;blockquote&amp;gt;&amp;quot;You here to see the &amp;amp;lt;a href=&amp;quot;/wiki/Skyrim:Igmund&amp;quot; title=&amp;quot;Skyrim:Igmund&amp;quot;&amp;amp;gt;Jarl&amp;amp;lt;/a&amp;amp;gt;? No sudden moves, understand?&amp;quot;&amp;lt;/blockquote&amp;gt;

into a nice clean version that looks like this:

&amp;lt;blockquote&amp;gt;&amp;quot;You here to see the Jarl? No sudden moves, understand?&amp;quot;&amp;lt;/blockquote&amp;gt;

Thanks to that `$(&#39;tr td a&#39;).contents().unwrap();` statement.  It&#39;s a little bit of extra work, but trolling is serious business, and well worth the investment.  And as I said before, applying these operations globally to the DOM on a large-scale project would be overkill, but for my purposes here it was grand.

The next step was the find the quotes themselves.  A simple little `$(&#39;tr td&#39;)` yielded very good results, mostly what I was looking for, but there happened to be a bit of extra flotsam and jetsam table cells which contained content I was not after at all.  So I needed some way to differentiate the Skyrim quotes from anything else that happened to be in a table cell which was not relevant to the task at hand.  Hm, surely I can come up with a regular expression to help with that?
``` javascript
    var $skyrim_quotes = $(&#39;tr td&#39;).filter( function(element, index, array) {
        if ( $(index).html().match(/^&amp;quot;.*&amp;quot;$/) ) {
          return true;
        } else {
          return false;
        }
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have the lovely jQuery method &lt;code&gt;filter&lt;/code&gt; being used to apply the simple regexp pattern &lt;code&gt;/^&amp;quot;.*&amp;quot;$/&lt;/code&gt; to our selection and returning only the elements that match.  This knocks out everything which does not adhere strictly to the &amp;ldquo;quote&amp;rdquo; pattern (string&amp;rsquo;s first and last character are a double quote - &lt;code&gt;&amp;quot;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Almost there now- still I needed to strip some HTML special characters such as &lt;code&gt;&amp;amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;amp;gt;&lt;/code&gt; to get them especially clean.  And, of course, to strip the double quotes for aesthetic purposes.  I decided to bring a gun to a knife fight and add methods to &lt;code&gt;String&lt;/code&gt;&amp;rsquo;s prototype.
``` javascript
    String.prototype.stripHTMLSpecialChars = function () {
      // There&amp;rsquo;s a few quirks in the soup
      var str = this.replace(/&amp;lt;/, &amp;ldquo;);
      str = str.replace(/&amp;gt;/, &amp;ldquo;);
      str = str.replace(/&amp;nbsp;[sic]/, &amp;lsquo;y&amp;rsquo;);
      return str;
    };&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;String.prototype.stripDoubleQuotes = function() {
  return this.slice(1, this.length - 1);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The solution for `stripDoubleQuotes()` feels a little bit kludgey, so I&#39;d be curious to hear if anyone else has a better idea (I&#39;m sure JavaScript is capable of sed-like string manipulation antics but this was this quickest way I could think of accomplishing the goal).  `stripHTMLSpecialChars()`&#39;s removal of these &amp;quot;quirks&amp;quot; was based on a quick grepping of the results I was getting back to see what HTML special characters were being returned.  Used in the `jsdom` callback, our &amp;quot;sanitizing&amp;quot; and printing to the console of these quotes looks like this:
``` javascript
    $skyrim_quotes.each( function() {
      var $scopedElem = $(this);
      var content = $scopedElem.html().stripHTMLSpecialChars().stripDoubleQuotes();
      console.log(content);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bravo!  Now we have our hot, fresh, Skyrim quotes, eager to troll unsuspecting brothers with.  I opted to stash these quotes in a database (sqlite3) so I didn&amp;rsquo;t have to ping the Skyrim wiki&amp;rsquo;s servers every time they were needed (and also to keep track of which ones had been used already).  I won&amp;rsquo;t go into a lot of gory details here about how working with a database in Node.js is, but suffice it to say for my purposes it was actually fairly straightforward.  Node has a handy &lt;code&gt;sqlite3&lt;/code&gt; module that made working with the database fairly simple.  As it turns out, JavaScript being single-threaded-async is quite handy for tasks like this because the thread isn&amp;rsquo;t going to block on the expensive IO operations.  If you want to pick on PHP, for instance, just note how long it takes a PHP application to make, say, 25 requests to external servers versus Node&amp;rsquo;s same attempt with concurrency.&lt;/p&gt;

&lt;p&gt;Stay tuned for the followup where I create the actual robot to talk to my brother, and if you&amp;rsquo;re keen feel free to &lt;a href=&#34;https://github.com/nathanleclaire/learnnodethetrollway&#34;&gt;check out the source&lt;/a&gt; on Github.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Double Your Talent Acquisition: Five Do&#39;s and Don&#39;ts For Technical Recruiters</title>
      <link>http://localhost:1313/_posts/2014-03-08-five-dos-and-donts-for-technical-recruiters</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/_posts/2014-03-08-five-dos-and-donts-for-technical-recruiters</guid>
      <description>

&lt;p&gt;{%img /images/recruiter/super-recruiter.jpeg %}&lt;/p&gt;

&lt;p&gt;Are you a technical recruiter?&lt;/p&gt;

&lt;p&gt;Is it starting to feel like a cold, cold, world out there?&lt;/p&gt;

&lt;p&gt;Like it or not, there are &lt;a href=&#34;http://techcrunch.com/2013/05/05/there-is-in-fact-a-tech-talent-shortage-and-there-always-will-be/&#34;&gt;a lot of companies competing for technical talent&lt;/a&gt; right now and it&amp;rsquo;s hard to differentiate yourself.  But you may be making mistakes that could be avoided, and overlooking things that could be used to help improve your conversion rate.  How would you like to source more talent, make your clients and recruits happier, and generally recruit like a boss?&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a developer that receives a fair share of attention from talent acquisition specialists, and I&amp;rsquo;m here to tell you about ten things you can do or stop doing to improve your success rate (from the other side, so you know it&amp;rsquo;s legit).&lt;/p&gt;

&lt;p&gt;I hope to help good recruiters source the talent they need to source, while making things a lot less irritating for the talent that gets spammed with endless offers to jump through administrative hoops and maybe get a new job offer.&lt;/p&gt;

&lt;p&gt;Here are Nate&amp;rsquo;s Do&amp;rsquo;s:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Hustle&lt;/li&gt;
&lt;li&gt;Flatter us&lt;/li&gt;
&lt;li&gt;Bribe us&lt;/li&gt;
&lt;li&gt;Get a technical person to contact candidates FIRST&lt;/li&gt;
&lt;li&gt;Cater to our laziness&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And here are Nate&amp;rsquo;s Don&amp;rsquo;ts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Message us or &amp;ldquo;connect&amp;rdquo; with us on LinkedIn&lt;/li&gt;
&lt;li&gt;Modify or botch our resume&lt;/li&gt;
&lt;li&gt;Act like what you&amp;rsquo;re selling is unqiue or indispensable&lt;/li&gt;
&lt;li&gt;Show up at our current place of employment&lt;/li&gt;
&lt;li&gt;Be clueless about technology&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let&amp;rsquo;s do this!&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Do&amp;rsquo;s&lt;/h1&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Hustle.&lt;/h2&gt;

&lt;p&gt;{%img /images/recruiter/hustle.png %}&lt;/p&gt;

&lt;p&gt;If you are recruiting you are most definitely selling.&lt;/p&gt;

&lt;p&gt;All of sales is a conversation.  It is about building a relationship, and it is about mutual fulfillment.  You need to get paid, and candidates need to have a good job.&lt;/p&gt;

&lt;p&gt;The worst way to sell something is this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Hey, uh, you need any X?&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;HELL NO!  I DO NOT NEED ANY X!  It immediately puts people on the defensive.  You&amp;rsquo;ve seen people botch these kinds of sales before, I guarantee it.  Whether they are selling Cutco knives, cable, or vacuum cleaners, you&amp;rsquo;ve seen someone try to peddle their wares this way and get shut down, hard.&lt;/p&gt;

&lt;p&gt;And what do they do after they get rejected?  They sulk away and never try again.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t be this guy.  Be the &lt;a href=&#34;http://www.amazon.com/gp/product/1591842158/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1591842158&amp;amp;linkCode=as2&amp;amp;tag=natlecwrionbu-20&#34;&gt;Ultimate Sales Machine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;{%img /images/recruiter/ultimate-sales-machine.jpeg %}&lt;/p&gt;

&lt;p&gt;Start a (two-way) conversation.  What are the needs of the people you are trying to recruit?  Who are they?  Where can you meet them in real life?&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say you want to hire PHP developers.  Where would you find such a rare creature?  Oh, I know!  On &lt;a href=&#34;http://arstechnica.com/civis/viewtopic.php?f=25&amp;amp;t=1172695&#34;&gt;LinkedIn&lt;/a&gt;, right?&lt;/p&gt;

&lt;p&gt;Wrong. Dead wrong. Every developer worth her salt is getting an endless parade of messages and contact requests on LinkedIn right now, and most of them aren&amp;rsquo;t worth digging into.  You might get lucky, but you probably won&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;Instead, look for PHP meetups in the area.  Alternatively, source at events such as hackathons and conventions, and take a legitimate interest in the lives of developers and their interests.  Most recruiters don&amp;rsquo;t seem to do this.  Intstead, they all stick to the same tired venues (career fairs, Dice, LinkedIn, etc.).&lt;/p&gt;

&lt;p&gt;This is the same reason why people pursuing mates are encouraged to go to bookstores, yoga classes, hiking groups and so on instead of bars and clubs.  The odds of meeting someone who is a good fit are just so much better.&lt;/p&gt;

&lt;p&gt;Because you are creating a true connection.  Because you are creating value.&lt;/p&gt;

&lt;p&gt;The truth is that your true competition isn&amp;rsquo;t other recruiters.  Most of them are pretty average at what they do.  Your competition is video games, the Internet, relationships, and all the other things that are more important to us than talking to you.&lt;/p&gt;

&lt;p&gt;Do yourself a favor and make it worth our while to talk to you.&lt;/p&gt;

&lt;p&gt;Hustle.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Flatter us.&lt;/h2&gt;

&lt;p&gt;{%img /images/recruiter/flattery.jpeg %}&lt;/p&gt;

&lt;p&gt;Are you mentioning specifics in your pitch about why you think the candidate would be a good fit, down to details such as &amp;ldquo;I really enjoyed &lt;a href=&#34;http://nathanleclaire.com/blog/2013/11/23/how-i-automated-finding-almost-anyones-email-address/&#34;&gt;your article on the Rapportive hack&lt;/a&gt;&amp;rdquo; or &amp;ldquo;Looks like you are a pretty active JavaScripter on Github.  We love active open source contributors!&amp;rdquo;?&lt;/p&gt;

&lt;p&gt;Many of the &lt;em&gt;best&lt;/em&gt; candidates have put stuff out there online for the world to see, because people who are great often love to share their greatness.  I would be willing to bet that 90% of recruiters do not flatter these guys and gals.  Perhaps they are simply too lazy or simple-minded.  They can&amp;rsquo;t see things from someone else&amp;rsquo;s perspective.&lt;/p&gt;

&lt;p&gt;Yet, they still expect people to endure the hassle of actually talking to them.&lt;/p&gt;

&lt;p&gt;Would you rather talk to someone who loves your work, and is familiar with it, or someone who is sending out the same spray-and-pray message to everyone in the area?  We are all human here, we love having our egos stroked.  And programmers have some of the biggest egos you&amp;rsquo;ll ever meet, which makes them especially vulnerable to this kind of flattery.&lt;/p&gt;

&lt;p&gt;So flatter us.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Bribe us.&lt;/h2&gt;

&lt;p&gt;{%img /images/recruiter/rubiks-cube.png %}&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not talking about huge stuff here.&lt;/p&gt;

&lt;p&gt;What I mean is, differentiate yourself by giving little gifts.  Know that the candidate you&amp;rsquo;re chasing loves coffee?  Send them a bag of beans or, better yet, take them out for a fancy Aeropress brew.  One time a recruiter dropped off a case of Red Bull at our office which, while violating my rule to not show up at our current place of employment (a major drag), at least showed that he knew where we were coming from a bit.&lt;/p&gt;

&lt;p&gt;Nothing gets a caffiene junkie&amp;rsquo;s attention better than free caffiene.&lt;/p&gt;

&lt;p&gt;Nothing gets a gamer&amp;rsquo;s attention like a Steam gift card (no matter how small).&lt;/p&gt;

&lt;p&gt;Carpet bomb big swaths of potential candidates with little trinkets and oddities if you can.&lt;/p&gt;

&lt;p&gt;Want some of the candidates you&amp;rsquo;re chasing to stare at your company&amp;rsquo;s logo for hours at a time?  Give them a branded Rubik&amp;rsquo;s cube.  Or give them a pen or mechanical pencil with your contact information - I never seem to be able to get enough pens. They always come in handy.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s the little things like this that will get candidates to start warming to you.  Look at it this way:  Let&amp;rsquo;s say you get a $1500 commission for each candidate that converts.  You spend $5 on gift cards for 5 candidates, and only one of those candidates converts.  You&amp;rsquo;re still $1475 ahead.&lt;/p&gt;

&lt;p&gt;Go ahead.  Bribe us.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Get a technical person to contact candidates FIRST.&lt;/h2&gt;

&lt;p&gt;I can&amp;rsquo;t seem to dig up the link, but I remember a case study from a start-up where they had technical people (VP Engineering, Lead Developer, Dev Manager etc.) contact candidates instead of recruiters.  This increased their response rate dramatically.&lt;/p&gt;

&lt;p&gt;This is not surprising to me.  Every time I receive an e-mail from a technical person, I&amp;rsquo;m way more inclined to respond because I feel like that person &amp;ldquo;gets&amp;rdquo; me.  I know that they will know what JavaScript and Python and MongoDB are.  I know that they have shared my pains and elations in the trenches working on a real-world technology project.  I can ask them what they think about e.g. unit testing and get a real answer.&lt;/p&gt;

&lt;p&gt;It is a lot more encouraging to hear from a technical person first, and then get handed off to HR / recruiting later.  So at least for the first e-mail, consider wrangling your friendly neighborhood developer into sending it.&lt;/p&gt;

&lt;p&gt;You probably don&amp;rsquo;t even have to convince them to write it themselves.  Just whip up a draft and have them run over it before sending it out.  If they are a good developer, they will get viscerally uncomfortable if they come across as sounding stupid and fix these parts for you.&lt;/p&gt;

&lt;p&gt;Get technical people to be the first point of contact for technical roles.&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Cater to our laziness&lt;/h2&gt;

&lt;p&gt;{%img /images/recruiter/lazy-cat.jpeg %}&lt;/p&gt;

&lt;p&gt;Remember that you&amp;rsquo;re fighting an uphill battle.  You have to actually persuade people to go through the (probably painful) process of interviewing at a company.  In doing this, they have to face something that is probably a great source of mental anguish for them (it is for most of us): the possibility of rejection.&lt;/p&gt;

&lt;p&gt;An interview is not a guaranteed offer.  It is an invitation to be rejected.  Therefore, the lazy person will avoid this unpleasantness altogether.  In order to go through the dog and pony show, they need a reason, and they need encouragement.&lt;/p&gt;

&lt;p&gt;They need to have a (probably powerful) incentive.  And every single roadblock, minor inconvinience or show-stopper they meet along the way is going to either chip away at that incentive, or destroy it completely.  They are going to be brutally apathetic towards you.&lt;/p&gt;

&lt;p&gt;Programmers especially are notorious for this.  Most of us decided to start doing what we do because we were sick of doing things manually, so we automated them instead.&lt;/p&gt;

&lt;p&gt;We are lazy.&lt;/p&gt;

&lt;p&gt;We may not respond to your emails right away, or at all.  We may not suggest a time to have a call.&lt;/p&gt;

&lt;p&gt;Instead of resenting this or trying to swim upstream against this natural way of things, use it to your advantage.&lt;/p&gt;

&lt;p&gt;Be persistent (but not pushy).  Ping us if we don&amp;rsquo;t e-mail you back over the course of a few days.  Don&amp;rsquo;t forget about us.&lt;/p&gt;

&lt;p&gt;Suggest a time to have a call.  They will correct you if it is no good.&lt;/p&gt;

&lt;p&gt;Instead of pestering them for a Word version of their resume, do the conversion yourself.&lt;/p&gt;

&lt;p&gt;All in all, just take the initiative and remember that the more work you make the candidate do, the less likely they are to convert.  They are busy and they are lazy.&lt;/p&gt;

&lt;p&gt;So cater to our laziness.&lt;/p&gt;

&lt;h1 id=&#34;toc_6&#34;&gt;Don&amp;rsquo;ts&lt;/h1&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;Message us or &amp;ldquo;connect&amp;rdquo; with us on LinkedIn&lt;/h2&gt;

&lt;p&gt;{%img /images/recruiter/linkedin.jpeg %}&lt;/p&gt;

&lt;p&gt;There may be some wiggle room here, and I know your gut reaction is probably vehemently against this, since it runs completely against everything you&amp;rsquo;ve probably been doing.&lt;/p&gt;

&lt;p&gt;But let me ask you this:  How&amp;rsquo;s it been working?  You have any numbers on what your actual conversion rate for candidates you attempt to recruit from LinkedIn?&lt;/p&gt;

&lt;p&gt;My guess is that it&amp;rsquo;s pretty abysmal.  Because it&amp;rsquo;s what everyone else is doing.  LinkedIn is a necessary evil that most of us use to maintain shallow business relationships.  For recruiters it looks like gold, since it&amp;rsquo;s a database of many possible candidates.&lt;/p&gt;

&lt;p&gt;But nothing beats an e-mail, and nothing gets ignored quicker than a LinkedIn message or a connect request from someone I don&amp;rsquo;t know.  Our e-mail inbox is where we all hang out all day, and it&amp;rsquo;s ever more personal than anything LinkedIn could ever hope to offer.  In fact, it&amp;rsquo;s why LinkedIn themselves spams your e-mail inbox so hard.  They know its power.  They&amp;rsquo;d like nothing more than to get their greedy little paws on all of your contact information.&lt;/p&gt;

&lt;p&gt;So if you can, send them an e-mail.  It&amp;rsquo;s usually not too hard to get ahold of someone&amp;rsquo;s email.  Github and personal sites are a good place to check, and a little Google-fu might do you good as well.  If these don&amp;rsquo;t yield anything, try to track it down through real people first.  Alternatively, get those people to make an introduction.&lt;/p&gt;

&lt;p&gt;You should only resort to LinkedIn tactics if you absolutely have to.  Nothing in life is free.&lt;/p&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;Modify or botch our resume&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; this advice goes beyond recruiters and into the realm of, say, consulting houses that are shopping around their candidates to prospective clients.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a geek.&lt;/p&gt;

&lt;p&gt;My resume is done in &lt;a href=&#34;http://stevehanov.ca/blog/index.php?id=56&#34;&gt;LaTeX&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I understand that PDF may not sometimes be the best format for your purposes, and don&amp;rsquo;t really mind if you port it to other formats, as long as it still looks nice.  I&amp;rsquo;m not super happy about it, since I much prefer the PDF version, but I don&amp;rsquo;t really mind.&lt;/p&gt;

&lt;p&gt;But God help you if you modify it.  You start getting into really dangerous territory, really fast.&lt;/p&gt;

&lt;p&gt;For starters, it could potentially be embarassing if you misrepresent the candidate.  They presumably put a lot of time and effort into the way they are presenting themselves professionally, and now you are mucking it all up.  Even seemingly mundane things could end up being very harmful later.  If the candidate finds out that you did this, they WILL hate you for life.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t modify even a single word on our resume.  Just don&amp;rsquo;t.&lt;/p&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;Act like what you&amp;rsquo;re selling is unique or indispensable&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re not talking to you because you&amp;rsquo;re unique or special or indispensable.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re talking to you because we&amp;rsquo;re possibly interested in something that you&amp;rsquo;re selling.&lt;/p&gt;

&lt;p&gt;And whatever it is that you&amp;rsquo;re selling, we could get it somewhere else.&lt;/p&gt;

&lt;p&gt;So don&amp;rsquo;t act like you&amp;rsquo;re God&amp;rsquo;s gift to job-seekers, or whatever, even if you work for a hot company that everyone wants to work at.  You will turn off far more candidates than you will impress with arrogance.  Instead, adopt an attitude that you are trying to come to a mutually beneficial arrangement.  Both parties can benefit, and both parties should be respectful of the other.  As mentioned earlier in this essay, getting a new job is a pain.  Do your best to alleviate this pain.&lt;/p&gt;

&lt;p&gt;Candidate can only talk at six?  That&amp;rsquo;s when you&amp;rsquo;re talking.&lt;/p&gt;

&lt;p&gt;The more you act entitled and indispensable, the worse your conversion rates will be.&lt;/p&gt;

&lt;h2 id=&#34;toc_10&#34;&gt;Show up at our current place of employment&lt;/h2&gt;

&lt;p&gt;I can&amp;rsquo;t even believe that this one needs to be said, but there have been a few instances with my current job alone that make me feel like there are some recruiters with screws loose in their heads.&lt;/p&gt;

&lt;p&gt;I already mentioned the recruiter that dropped off the Red Bull (he was actually looking to talk to a specific person employed there).  Recently, however, I had another run-in that was more dramatic.  Let me tell you a story.&lt;/p&gt;

&lt;p&gt;I was starting to get into my morning groove, sipping some coffee when I got a Skype message from Jill, our administrative assistant.&lt;/p&gt;

&lt;p&gt;JILL: &amp;ldquo;&lt;em&gt;[some recruiter I&amp;rsquo;d never heard of]&lt;/em&gt; from &lt;em&gt;[recruiting agency]&lt;/em&gt; is asking for you&amp;rdquo;&lt;/p&gt;

&lt;p&gt;ME: &amp;ldquo;Wait, like he&amp;rsquo;s literally here at the front desk?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;JILL: &amp;ldquo;He&amp;rsquo;s here, at the front desk&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I was going to ignore it, hoping he&amp;rsquo;d go away, when I got another message from Jill:&lt;/p&gt;

&lt;p&gt;JILL: &amp;ldquo;Please come save me&amp;rdquo;&lt;/p&gt;

&lt;p&gt;So, I left my desk had the flow of my morning interrupted to go talk to some random guy, who happened to have come across my profile on LinkedIn.&lt;/p&gt;

&lt;p&gt;I called him out for being rude and he scurried away, insisting that he was &amp;ldquo;trying to help our company recruit&amp;rdquo; and not trying to recruit me.  It left me pretty appalled that someone would show up and interrupt my day unprompted for their own purposes, whatever they may be.&lt;/p&gt;

&lt;p&gt;Honestly?  What the fuck, recruiters?&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t show up at someone&amp;rsquo;s current place of employment.&lt;/p&gt;

&lt;h2 id=&#34;toc_11&#34;&gt;Be clueless about technology&lt;/h2&gt;

&lt;p&gt;{%img /images/recruiter/clueless-recruiter.jpeg %}&lt;/p&gt;

&lt;p&gt;More than anything else, this will hurt your performance and get you all the worst kinds of candidates.&lt;/p&gt;

&lt;p&gt;How can you possibly hope to recruit people if you don&amp;rsquo;t understand what they do?&lt;/p&gt;

&lt;p&gt;If you think you don&amp;rsquo;t need to learn about technology to recruit technical candidates, then I honestly hope that you fail miserably.  You are doing a disservice to everyone involved and you are the reason that recruiters get a bad rap.&lt;/p&gt;

&lt;p&gt;For instance, if you need to recruit Java folks, know what Java is (and please for the love of God know the difference between Java and JavaScript).  Create a project in it.  Try to learn at least a little bit of the fundamentals.  If candidates are any good they will ask you questions about technical things.  Know what &lt;a href=&#34;http://www.eclipse.org/jetty/&#34;&gt;Jetty&lt;/a&gt;, &lt;a href=&#34;http://www.jboss.org/jbossas&#34;&gt;JBoss&lt;/a&gt;, and &lt;a href=&#34;https://code.google.com/p/mockito/&#34;&gt;Mockito&lt;/a&gt; are.&lt;/p&gt;

&lt;p&gt;Until you have this knowledge, you will not recruit people who are legitimately excited and enthusiastic to talk to you.&lt;/p&gt;

&lt;p&gt;You will recruit people who see you as a necessary evil.&lt;/p&gt;

&lt;p&gt;Is that what you want?&lt;/p&gt;

&lt;p&gt;If this intimidates you, just ask your friendly neighborhood developer to help.  Perhaps they can whiteboard some things out for you so that you understand them better, or walk you through basic programming stuff.  Many great developers LOVE teaching, and they will be excited that you want to know more about what they do.  Taking an interest in someone is one of the most sure-fire ways to make them like you.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t be clueless about technology.&lt;/p&gt;

&lt;h1 id=&#34;toc_12&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This was a long-winded article but I hope it makes the recruitment process a lot more comfortable for everyone.&lt;/p&gt;

&lt;p&gt;Please send me your crazy recruiter stories if you have them!  I&amp;rsquo;d love to hear.&lt;/p&gt;

&lt;p&gt;Stay sassy Internet, and double those acquisitions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nathan&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>